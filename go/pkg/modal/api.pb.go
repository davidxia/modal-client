// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.6
// source: pkg/modal/api.proto

package modal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppDeployVisibility int32

const (
	AppDeployVisibility_APP_DEPLOY_VISIBILITY_UNSPECIFIED AppDeployVisibility = 0
	AppDeployVisibility_APP_DEPLOY_VISIBILITY_WORKSPACE   AppDeployVisibility = 1
	AppDeployVisibility_APP_DEPLOY_VISIBILITY_PUBLIC      AppDeployVisibility = 2
)

// Enum value maps for AppDeployVisibility.
var (
	AppDeployVisibility_name = map[int32]string{
		0: "APP_DEPLOY_VISIBILITY_UNSPECIFIED",
		1: "APP_DEPLOY_VISIBILITY_WORKSPACE",
		2: "APP_DEPLOY_VISIBILITY_PUBLIC",
	}
	AppDeployVisibility_value = map[string]int32{
		"APP_DEPLOY_VISIBILITY_UNSPECIFIED": 0,
		"APP_DEPLOY_VISIBILITY_WORKSPACE":   1,
		"APP_DEPLOY_VISIBILITY_PUBLIC":      2,
	}
)

func (x AppDeployVisibility) Enum() *AppDeployVisibility {
	p := new(AppDeployVisibility)
	*p = x
	return p
}

func (x AppDeployVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppDeployVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[0].Descriptor()
}

func (AppDeployVisibility) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[0]
}

func (x AppDeployVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppDeployVisibility.Descriptor instead.
func (AppDeployVisibility) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{0}
}

type AppDisconnectReason int32

const (
	AppDisconnectReason_APP_DISCONNECT_REASON_UNSPECIFIED          AppDisconnectReason = 0
	AppDisconnectReason_APP_DISCONNECT_REASON_LOCAL_EXCEPTION      AppDisconnectReason = 1
	AppDisconnectReason_APP_DISCONNECT_REASON_KEYBOARD_INTERRUPT   AppDisconnectReason = 2
	AppDisconnectReason_APP_DISCONNECT_REASON_ENTRYPOINT_COMPLETED AppDisconnectReason = 3
	AppDisconnectReason_APP_DISCONNECT_REASON_DEPLOYMENT_EXCEPTION AppDisconnectReason = 4
	AppDisconnectReason_APP_DISCONNECT_REASON_REMOTE_EXCEPTION     AppDisconnectReason = 5
)

// Enum value maps for AppDisconnectReason.
var (
	AppDisconnectReason_name = map[int32]string{
		0: "APP_DISCONNECT_REASON_UNSPECIFIED",
		1: "APP_DISCONNECT_REASON_LOCAL_EXCEPTION",
		2: "APP_DISCONNECT_REASON_KEYBOARD_INTERRUPT",
		3: "APP_DISCONNECT_REASON_ENTRYPOINT_COMPLETED",
		4: "APP_DISCONNECT_REASON_DEPLOYMENT_EXCEPTION",
		5: "APP_DISCONNECT_REASON_REMOTE_EXCEPTION",
	}
	AppDisconnectReason_value = map[string]int32{
		"APP_DISCONNECT_REASON_UNSPECIFIED":          0,
		"APP_DISCONNECT_REASON_LOCAL_EXCEPTION":      1,
		"APP_DISCONNECT_REASON_KEYBOARD_INTERRUPT":   2,
		"APP_DISCONNECT_REASON_ENTRYPOINT_COMPLETED": 3,
		"APP_DISCONNECT_REASON_DEPLOYMENT_EXCEPTION": 4,
		"APP_DISCONNECT_REASON_REMOTE_EXCEPTION":     5,
	}
)

func (x AppDisconnectReason) Enum() *AppDisconnectReason {
	p := new(AppDisconnectReason)
	*p = x
	return p
}

func (x AppDisconnectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppDisconnectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[1].Descriptor()
}

func (AppDisconnectReason) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[1]
}

func (x AppDisconnectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppDisconnectReason.Descriptor instead.
func (AppDisconnectReason) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{1}
}

// NOTE: make sure to update the frontend if we add a new state here
// https://github.com/modal-labs/modal/blob/main/frontend/src/routes/(dashboard)/%5B%5Bworkspace%5D%5D/apps/+page.svelte#L95
type AppState int32

const (
	AppState_APP_STATE_UNSPECIFIED AppState = 0
	// Will be discharged when the client disconnects
	AppState_APP_STATE_EPHEMERAL AppState = 1
	AppState_APP_STATE_DETACHED  AppState = 2
	// Will be discharged when overwritten
	AppState_APP_STATE_DEPLOYED AppState = 3
	// Winding down app due to user termination.
	AppState_APP_STATE_STOPPING AppState = 4
	// Stopped
	AppState_APP_STATE_STOPPED AppState = 5
	// App is created and in process of deployment.
	AppState_APP_STATE_INITIALIZING AppState = 6
	// Same as stopped but prevented from being garbage collected
	AppState_APP_STATE_DISABLED AppState = 7
	// App is detached and local client has disconnected.
	AppState_APP_STATE_DETACHED_DISCONNECTED AppState = 8
	// App is derived from another workspace. Acts as a static, immutable group of functions.
	//
	// Deprecated: Marked as deprecated in pkg/modal/api.proto.
	AppState_APP_STATE_DERIVED AppState = 9
)

// Enum value maps for AppState.
var (
	AppState_name = map[int32]string{
		0: "APP_STATE_UNSPECIFIED",
		1: "APP_STATE_EPHEMERAL",
		2: "APP_STATE_DETACHED",
		3: "APP_STATE_DEPLOYED",
		4: "APP_STATE_STOPPING",
		5: "APP_STATE_STOPPED",
		6: "APP_STATE_INITIALIZING",
		7: "APP_STATE_DISABLED",
		8: "APP_STATE_DETACHED_DISCONNECTED",
		9: "APP_STATE_DERIVED",
	}
	AppState_value = map[string]int32{
		"APP_STATE_UNSPECIFIED":           0,
		"APP_STATE_EPHEMERAL":             1,
		"APP_STATE_DETACHED":              2,
		"APP_STATE_DEPLOYED":              3,
		"APP_STATE_STOPPING":              4,
		"APP_STATE_STOPPED":               5,
		"APP_STATE_INITIALIZING":          6,
		"APP_STATE_DISABLED":              7,
		"APP_STATE_DETACHED_DISCONNECTED": 8,
		"APP_STATE_DERIVED":               9,
	}
)

func (x AppState) Enum() *AppState {
	p := new(AppState)
	*p = x
	return p
}

func (x AppState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[2].Descriptor()
}

func (AppState) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[2]
}

func (x AppState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppState.Descriptor instead.
func (AppState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{2}
}

type AppStopSource int32

const (
	AppStopSource_APP_STOP_SOURCE_UNSPECIFIED   AppStopSource = 0
	AppStopSource_APP_STOP_SOURCE_CLI           AppStopSource = 1
	AppStopSource_APP_STOP_SOURCE_PYTHON_CLIENT AppStopSource = 2
	AppStopSource_APP_STOP_SOURCE_WEB           AppStopSource = 3
)

// Enum value maps for AppStopSource.
var (
	AppStopSource_name = map[int32]string{
		0: "APP_STOP_SOURCE_UNSPECIFIED",
		1: "APP_STOP_SOURCE_CLI",
		2: "APP_STOP_SOURCE_PYTHON_CLIENT",
		3: "APP_STOP_SOURCE_WEB",
	}
	AppStopSource_value = map[string]int32{
		"APP_STOP_SOURCE_UNSPECIFIED":   0,
		"APP_STOP_SOURCE_CLI":           1,
		"APP_STOP_SOURCE_PYTHON_CLIENT": 2,
		"APP_STOP_SOURCE_WEB":           3,
	}
)

func (x AppStopSource) Enum() *AppStopSource {
	p := new(AppStopSource)
	*p = x
	return p
}

func (x AppStopSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppStopSource) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[3].Descriptor()
}

func (AppStopSource) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[3]
}

func (x AppStopSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppStopSource.Descriptor instead.
func (AppStopSource) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{3}
}

type CertificateStatus int32

const (
	CertificateStatus_CERTIFICATE_STATUS_PENDING CertificateStatus = 0
	CertificateStatus_CERTIFICATE_STATUS_ISSUED  CertificateStatus = 1
	CertificateStatus_CERTIFICATE_STATUS_FAILED  CertificateStatus = 2
	CertificateStatus_CERTIFICATE_STATUS_REVOKED CertificateStatus = 3
)

// Enum value maps for CertificateStatus.
var (
	CertificateStatus_name = map[int32]string{
		0: "CERTIFICATE_STATUS_PENDING",
		1: "CERTIFICATE_STATUS_ISSUED",
		2: "CERTIFICATE_STATUS_FAILED",
		3: "CERTIFICATE_STATUS_REVOKED",
	}
	CertificateStatus_value = map[string]int32{
		"CERTIFICATE_STATUS_PENDING": 0,
		"CERTIFICATE_STATUS_ISSUED":  1,
		"CERTIFICATE_STATUS_FAILED":  2,
		"CERTIFICATE_STATUS_REVOKED": 3,
	}
)

func (x CertificateStatus) Enum() *CertificateStatus {
	p := new(CertificateStatus)
	*p = x
	return p
}

func (x CertificateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[4].Descriptor()
}

func (CertificateStatus) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[4]
}

func (x CertificateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateStatus.Descriptor instead.
func (CertificateStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{4}
}

type CheckpointStatus int32

const (
	CheckpointStatus_CHECKPOINT_STATUS_UNSPECIFIED CheckpointStatus = 0
	CheckpointStatus_CHECKPOINT_STATUS_PENDING     CheckpointStatus = 1
	CheckpointStatus_CHECKPOINT_STATUS_PROCESSING  CheckpointStatus = 2
	CheckpointStatus_CHECKPOINT_STATUS_READY       CheckpointStatus = 3
	CheckpointStatus_CHECKPOINT_STATUS_FAILED      CheckpointStatus = 4
)

// Enum value maps for CheckpointStatus.
var (
	CheckpointStatus_name = map[int32]string{
		0: "CHECKPOINT_STATUS_UNSPECIFIED",
		1: "CHECKPOINT_STATUS_PENDING",
		2: "CHECKPOINT_STATUS_PROCESSING",
		3: "CHECKPOINT_STATUS_READY",
		4: "CHECKPOINT_STATUS_FAILED",
	}
	CheckpointStatus_value = map[string]int32{
		"CHECKPOINT_STATUS_UNSPECIFIED": 0,
		"CHECKPOINT_STATUS_PENDING":     1,
		"CHECKPOINT_STATUS_PROCESSING":  2,
		"CHECKPOINT_STATUS_READY":       3,
		"CHECKPOINT_STATUS_FAILED":      4,
	}
)

func (x CheckpointStatus) Enum() *CheckpointStatus {
	p := new(CheckpointStatus)
	*p = x
	return p
}

func (x CheckpointStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckpointStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[5].Descriptor()
}

func (CheckpointStatus) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[5]
}

func (x CheckpointStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckpointStatus.Descriptor instead.
func (CheckpointStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{5}
}

type ClientType int32

const (
	ClientType_CLIENT_TYPE_UNSPECIFIED ClientType = 0
	ClientType_CLIENT_TYPE_CLIENT      ClientType = 1
	ClientType_CLIENT_TYPE_CONTAINER   ClientType = 3
	ClientType_CLIENT_TYPE_WEB_SERVER  ClientType = 5
)

// Enum value maps for ClientType.
var (
	ClientType_name = map[int32]string{
		0: "CLIENT_TYPE_UNSPECIFIED",
		1: "CLIENT_TYPE_CLIENT",
		3: "CLIENT_TYPE_CONTAINER",
		5: "CLIENT_TYPE_WEB_SERVER",
	}
	ClientType_value = map[string]int32{
		"CLIENT_TYPE_UNSPECIFIED": 0,
		"CLIENT_TYPE_CLIENT":      1,
		"CLIENT_TYPE_CONTAINER":   3,
		"CLIENT_TYPE_WEB_SERVER":  5,
	}
)

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[6].Descriptor()
}

func (ClientType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[6]
}

func (x ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientType.Descriptor instead.
func (ClientType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{6}
}

type CloudProvider int32

const (
	CloudProvider_CLOUD_PROVIDER_UNSPECIFIED CloudProvider = 0
	CloudProvider_CLOUD_PROVIDER_AWS         CloudProvider = 1
	CloudProvider_CLOUD_PROVIDER_GCP         CloudProvider = 2
	CloudProvider_CLOUD_PROVIDER_AUTO        CloudProvider = 3
	CloudProvider_CLOUD_PROVIDER_OCI         CloudProvider = 4
)

// Enum value maps for CloudProvider.
var (
	CloudProvider_name = map[int32]string{
		0: "CLOUD_PROVIDER_UNSPECIFIED",
		1: "CLOUD_PROVIDER_AWS",
		2: "CLOUD_PROVIDER_GCP",
		3: "CLOUD_PROVIDER_AUTO",
		4: "CLOUD_PROVIDER_OCI",
	}
	CloudProvider_value = map[string]int32{
		"CLOUD_PROVIDER_UNSPECIFIED": 0,
		"CLOUD_PROVIDER_AWS":         1,
		"CLOUD_PROVIDER_GCP":         2,
		"CLOUD_PROVIDER_AUTO":        3,
		"CLOUD_PROVIDER_OCI":         4,
	}
)

func (x CloudProvider) Enum() *CloudProvider {
	p := new(CloudProvider)
	*p = x
	return p
}

func (x CloudProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[7].Descriptor()
}

func (CloudProvider) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[7]
}

func (x CloudProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudProvider.Descriptor instead.
func (CloudProvider) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{7}
}

type DNSRecordType int32

const (
	DNSRecordType_DNS_RECORD_TYPE_A     DNSRecordType = 0
	DNSRecordType_DNS_RECORD_TYPE_TXT   DNSRecordType = 1
	DNSRecordType_DNS_RECORD_TYPE_CNAME DNSRecordType = 2
)

// Enum value maps for DNSRecordType.
var (
	DNSRecordType_name = map[int32]string{
		0: "DNS_RECORD_TYPE_A",
		1: "DNS_RECORD_TYPE_TXT",
		2: "DNS_RECORD_TYPE_CNAME",
	}
	DNSRecordType_value = map[string]int32{
		"DNS_RECORD_TYPE_A":     0,
		"DNS_RECORD_TYPE_TXT":   1,
		"DNS_RECORD_TYPE_CNAME": 2,
	}
)

func (x DNSRecordType) Enum() *DNSRecordType {
	p := new(DNSRecordType)
	*p = x
	return p
}

func (x DNSRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[8].Descriptor()
}

func (DNSRecordType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[8]
}

func (x DNSRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSRecordType.Descriptor instead.
func (DNSRecordType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{8}
}

// Which data format a binary message is encoded with.
type DataFormat int32

const (
	DataFormat_DATA_FORMAT_UNSPECIFIED    DataFormat = 0
	DataFormat_DATA_FORMAT_PICKLE         DataFormat = 1 // Cloudpickle
	DataFormat_DATA_FORMAT_ASGI           DataFormat = 2 // "Asgi" protobuf message
	DataFormat_DATA_FORMAT_GENERATOR_DONE DataFormat = 3 // "GeneratorDone" protobuf message
	DataFormat_DATA_FORMAT_PAYLOAD_VALUE  DataFormat = 4 // See PayloadValue
)

// Enum value maps for DataFormat.
var (
	DataFormat_name = map[int32]string{
		0: "DATA_FORMAT_UNSPECIFIED",
		1: "DATA_FORMAT_PICKLE",
		2: "DATA_FORMAT_ASGI",
		3: "DATA_FORMAT_GENERATOR_DONE",
		4: "DATA_FORMAT_PAYLOAD_VALUE",
	}
	DataFormat_value = map[string]int32{
		"DATA_FORMAT_UNSPECIFIED":    0,
		"DATA_FORMAT_PICKLE":         1,
		"DATA_FORMAT_ASGI":           2,
		"DATA_FORMAT_GENERATOR_DONE": 3,
		"DATA_FORMAT_PAYLOAD_VALUE":  4,
	}
)

func (x DataFormat) Enum() *DataFormat {
	p := new(DataFormat)
	*p = x
	return p
}

func (x DataFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[9].Descriptor()
}

func (DataFormat) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[9]
}

func (x DataFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataFormat.Descriptor instead.
func (DataFormat) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{9}
}

type DeploymentNamespace int32

const (
	DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED DeploymentNamespace = 0
	DeploymentNamespace_DEPLOYMENT_NAMESPACE_WORKSPACE   DeploymentNamespace = 1
	DeploymentNamespace_DEPLOYMENT_NAMESPACE_GLOBAL      DeploymentNamespace = 3
)

// Enum value maps for DeploymentNamespace.
var (
	DeploymentNamespace_name = map[int32]string{
		0: "DEPLOYMENT_NAMESPACE_UNSPECIFIED",
		1: "DEPLOYMENT_NAMESPACE_WORKSPACE",
		3: "DEPLOYMENT_NAMESPACE_GLOBAL",
	}
	DeploymentNamespace_value = map[string]int32{
		"DEPLOYMENT_NAMESPACE_UNSPECIFIED": 0,
		"DEPLOYMENT_NAMESPACE_WORKSPACE":   1,
		"DEPLOYMENT_NAMESPACE_GLOBAL":      3,
	}
)

func (x DeploymentNamespace) Enum() *DeploymentNamespace {
	p := new(DeploymentNamespace)
	*p = x
	return p
}

func (x DeploymentNamespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentNamespace) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[10].Descriptor()
}

func (DeploymentNamespace) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[10]
}

func (x DeploymentNamespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentNamespace.Descriptor instead.
func (DeploymentNamespace) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{10}
}

type FileDescriptor int32

const (
	FileDescriptor_FILE_DESCRIPTOR_UNSPECIFIED FileDescriptor = 0
	FileDescriptor_FILE_DESCRIPTOR_STDOUT      FileDescriptor = 1
	FileDescriptor_FILE_DESCRIPTOR_STDERR      FileDescriptor = 2
	FileDescriptor_FILE_DESCRIPTOR_INFO        FileDescriptor = 3
)

// Enum value maps for FileDescriptor.
var (
	FileDescriptor_name = map[int32]string{
		0: "FILE_DESCRIPTOR_UNSPECIFIED",
		1: "FILE_DESCRIPTOR_STDOUT",
		2: "FILE_DESCRIPTOR_STDERR",
		3: "FILE_DESCRIPTOR_INFO",
	}
	FileDescriptor_value = map[string]int32{
		"FILE_DESCRIPTOR_UNSPECIFIED": 0,
		"FILE_DESCRIPTOR_STDOUT":      1,
		"FILE_DESCRIPTOR_STDERR":      2,
		"FILE_DESCRIPTOR_INFO":        3,
	}
)

func (x FileDescriptor) Enum() *FileDescriptor {
	p := new(FileDescriptor)
	*p = x
	return p
}

func (x FileDescriptor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileDescriptor) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[11].Descriptor()
}

func (FileDescriptor) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[11]
}

func (x FileDescriptor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileDescriptor.Descriptor instead.
func (FileDescriptor) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{11}
}

type FunctionCallInvocationType int32

const (
	FunctionCallInvocationType_FUNCTION_CALL_INVOCATION_TYPE_UNSPECIFIED  FunctionCallInvocationType = 0
	FunctionCallInvocationType_FUNCTION_CALL_INVOCATION_TYPE_SYNC_LEGACY  FunctionCallInvocationType = 1
	FunctionCallInvocationType_FUNCTION_CALL_INVOCATION_TYPE_ASYNC_LEGACY FunctionCallInvocationType = 2
	FunctionCallInvocationType_FUNCTION_CALL_INVOCATION_TYPE_ASYNC        FunctionCallInvocationType = 3
)

// Enum value maps for FunctionCallInvocationType.
var (
	FunctionCallInvocationType_name = map[int32]string{
		0: "FUNCTION_CALL_INVOCATION_TYPE_UNSPECIFIED",
		1: "FUNCTION_CALL_INVOCATION_TYPE_SYNC_LEGACY",
		2: "FUNCTION_CALL_INVOCATION_TYPE_ASYNC_LEGACY",
		3: "FUNCTION_CALL_INVOCATION_TYPE_ASYNC",
	}
	FunctionCallInvocationType_value = map[string]int32{
		"FUNCTION_CALL_INVOCATION_TYPE_UNSPECIFIED":  0,
		"FUNCTION_CALL_INVOCATION_TYPE_SYNC_LEGACY":  1,
		"FUNCTION_CALL_INVOCATION_TYPE_ASYNC_LEGACY": 2,
		"FUNCTION_CALL_INVOCATION_TYPE_ASYNC":        3,
	}
)

func (x FunctionCallInvocationType) Enum() *FunctionCallInvocationType {
	p := new(FunctionCallInvocationType)
	*p = x
	return p
}

func (x FunctionCallInvocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionCallInvocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[12].Descriptor()
}

func (FunctionCallInvocationType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[12]
}

func (x FunctionCallInvocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionCallInvocationType.Descriptor instead.
func (FunctionCallInvocationType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{12}
}

type FunctionCallType int32

const (
	FunctionCallType_FUNCTION_CALL_TYPE_UNSPECIFIED FunctionCallType = 0
	FunctionCallType_FUNCTION_CALL_TYPE_UNARY       FunctionCallType = 1
	FunctionCallType_FUNCTION_CALL_TYPE_MAP         FunctionCallType = 2
)

// Enum value maps for FunctionCallType.
var (
	FunctionCallType_name = map[int32]string{
		0: "FUNCTION_CALL_TYPE_UNSPECIFIED",
		1: "FUNCTION_CALL_TYPE_UNARY",
		2: "FUNCTION_CALL_TYPE_MAP",
	}
	FunctionCallType_value = map[string]int32{
		"FUNCTION_CALL_TYPE_UNSPECIFIED": 0,
		"FUNCTION_CALL_TYPE_UNARY":       1,
		"FUNCTION_CALL_TYPE_MAP":         2,
	}
)

func (x FunctionCallType) Enum() *FunctionCallType {
	p := new(FunctionCallType)
	*p = x
	return p
}

func (x FunctionCallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionCallType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[13].Descriptor()
}

func (FunctionCallType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[13]
}

func (x FunctionCallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionCallType.Descriptor instead.
func (FunctionCallType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{13}
}

type GPUType int32

const (
	GPUType_GPU_TYPE_UNSPECIFIED GPUType = 0
	GPUType_GPU_TYPE_T4          GPUType = 1
	GPUType_GPU_TYPE_A100        GPUType = 2
	GPUType_GPU_TYPE_A10G        GPUType = 3
	GPUType_GPU_TYPE_ANY         GPUType = 4
	// Deprecated: Marked as deprecated in pkg/modal/api.proto.
	GPUType_GPU_TYPE_A100_20G GPUType = 5
	// Deprecated: Marked as deprecated in pkg/modal/api.proto.
	GPUType_GPU_TYPE_A100_40GB_MANY GPUType = 6
	// Deprecated: Marked as deprecated in pkg/modal/api.proto.
	GPUType_GPU_TYPE_INFERENTIA2 GPUType = 7
	GPUType_GPU_TYPE_A100_80GB   GPUType = 8
	GPUType_GPU_TYPE_L4          GPUType = 9
	GPUType_GPU_TYPE_H100        GPUType = 10
	GPUType_GPU_TYPE_L40S        GPUType = 11
)

// Enum value maps for GPUType.
var (
	GPUType_name = map[int32]string{
		0:  "GPU_TYPE_UNSPECIFIED",
		1:  "GPU_TYPE_T4",
		2:  "GPU_TYPE_A100",
		3:  "GPU_TYPE_A10G",
		4:  "GPU_TYPE_ANY",
		5:  "GPU_TYPE_A100_20G",
		6:  "GPU_TYPE_A100_40GB_MANY",
		7:  "GPU_TYPE_INFERENTIA2",
		8:  "GPU_TYPE_A100_80GB",
		9:  "GPU_TYPE_L4",
		10: "GPU_TYPE_H100",
		11: "GPU_TYPE_L40S",
	}
	GPUType_value = map[string]int32{
		"GPU_TYPE_UNSPECIFIED":    0,
		"GPU_TYPE_T4":             1,
		"GPU_TYPE_A100":           2,
		"GPU_TYPE_A10G":           3,
		"GPU_TYPE_ANY":            4,
		"GPU_TYPE_A100_20G":       5,
		"GPU_TYPE_A100_40GB_MANY": 6,
		"GPU_TYPE_INFERENTIA2":    7,
		"GPU_TYPE_A100_80GB":      8,
		"GPU_TYPE_L4":             9,
		"GPU_TYPE_H100":           10,
		"GPU_TYPE_L40S":           11,
	}
)

func (x GPUType) Enum() *GPUType {
	p := new(GPUType)
	*p = x
	return p
}

func (x GPUType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[14].Descriptor()
}

func (GPUType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[14]
}

func (x GPUType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUType.Descriptor instead.
func (GPUType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{14}
}

type ObjectCreationType int32

const (
	ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED                ObjectCreationType = 0 // just lookup
	ObjectCreationType_OBJECT_CREATION_TYPE_CREATE_IF_MISSING          ObjectCreationType = 1
	ObjectCreationType_OBJECT_CREATION_TYPE_CREATE_FAIL_IF_EXISTS      ObjectCreationType = 2
	ObjectCreationType_OBJECT_CREATION_TYPE_CREATE_OVERWRITE_IF_EXISTS ObjectCreationType = 3
	ObjectCreationType_OBJECT_CREATION_TYPE_ANONYMOUS_OWNED_BY_APP     ObjectCreationType = 4 // deprecate at some point
	ObjectCreationType_OBJECT_CREATION_TYPE_EPHEMERAL                  ObjectCreationType = 5
)

// Enum value maps for ObjectCreationType.
var (
	ObjectCreationType_name = map[int32]string{
		0: "OBJECT_CREATION_TYPE_UNSPECIFIED",
		1: "OBJECT_CREATION_TYPE_CREATE_IF_MISSING",
		2: "OBJECT_CREATION_TYPE_CREATE_FAIL_IF_EXISTS",
		3: "OBJECT_CREATION_TYPE_CREATE_OVERWRITE_IF_EXISTS",
		4: "OBJECT_CREATION_TYPE_ANONYMOUS_OWNED_BY_APP",
		5: "OBJECT_CREATION_TYPE_EPHEMERAL",
	}
	ObjectCreationType_value = map[string]int32{
		"OBJECT_CREATION_TYPE_UNSPECIFIED":                0,
		"OBJECT_CREATION_TYPE_CREATE_IF_MISSING":          1,
		"OBJECT_CREATION_TYPE_CREATE_FAIL_IF_EXISTS":      2,
		"OBJECT_CREATION_TYPE_CREATE_OVERWRITE_IF_EXISTS": 3,
		"OBJECT_CREATION_TYPE_ANONYMOUS_OWNED_BY_APP":     4,
		"OBJECT_CREATION_TYPE_EPHEMERAL":                  5,
	}
)

func (x ObjectCreationType) Enum() *ObjectCreationType {
	p := new(ObjectCreationType)
	*p = x
	return p
}

func (x ObjectCreationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectCreationType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[15].Descriptor()
}

func (ObjectCreationType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[15]
}

func (x ObjectCreationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectCreationType.Descriptor instead.
func (ObjectCreationType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{15}
}

type ParameterType int32

const (
	ParameterType_PARAM_TYPE_UNSPECIFIED ParameterType = 0
	ParameterType_PARAM_TYPE_STRING      ParameterType = 1
	ParameterType_PARAM_TYPE_INT         ParameterType = 2
	ParameterType_PARAM_TYPE_BOOL        ParameterType = 3
	ParameterType_PARAM_TYPE_FLOAT       ParameterType = 4
	ParameterType_PARAM_TYPE_BYTES       ParameterType = 5
	ParameterType_PARAM_TYPE_LIST        ParameterType = 6
	ParameterType_PARAM_TYPE_DICT        ParameterType = 7
	ParameterType_PARAM_TYPE_NONE        ParameterType = 8
	ParameterType_PARAM_TYPE_PICKLE      ParameterType = 9
)

// Enum value maps for ParameterType.
var (
	ParameterType_name = map[int32]string{
		0: "PARAM_TYPE_UNSPECIFIED",
		1: "PARAM_TYPE_STRING",
		2: "PARAM_TYPE_INT",
		3: "PARAM_TYPE_BOOL",
		4: "PARAM_TYPE_FLOAT",
		5: "PARAM_TYPE_BYTES",
		6: "PARAM_TYPE_LIST",
		7: "PARAM_TYPE_DICT",
		8: "PARAM_TYPE_NONE",
		9: "PARAM_TYPE_PICKLE",
	}
	ParameterType_value = map[string]int32{
		"PARAM_TYPE_UNSPECIFIED": 0,
		"PARAM_TYPE_STRING":      1,
		"PARAM_TYPE_INT":         2,
		"PARAM_TYPE_BOOL":        3,
		"PARAM_TYPE_FLOAT":       4,
		"PARAM_TYPE_BYTES":       5,
		"PARAM_TYPE_LIST":        6,
		"PARAM_TYPE_DICT":        7,
		"PARAM_TYPE_NONE":        8,
		"PARAM_TYPE_PICKLE":      9,
	}
)

func (x ParameterType) Enum() *ParameterType {
	p := new(ParameterType)
	*p = x
	return p
}

func (x ParameterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[16].Descriptor()
}

func (ParameterType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[16]
}

func (x ParameterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterType.Descriptor instead.
func (ParameterType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{16}
}

type ProgressType int32

const (
	ProgressType_IMAGE_SNAPSHOT_UPLOAD ProgressType = 0 // TODO(erikbern): shouldn't be zero, and needs prefix
	ProgressType_FUNCTION_QUEUED       ProgressType = 1 // TODO(erikbern): needs_prefix
)

// Enum value maps for ProgressType.
var (
	ProgressType_name = map[int32]string{
		0: "IMAGE_SNAPSHOT_UPLOAD",
		1: "FUNCTION_QUEUED",
	}
	ProgressType_value = map[string]int32{
		"IMAGE_SNAPSHOT_UPLOAD": 0,
		"FUNCTION_QUEUED":       1,
	}
)

func (x ProgressType) Enum() *ProgressType {
	p := new(ProgressType)
	*p = x
	return p
}

func (x ProgressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProgressType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[17].Descriptor()
}

func (ProgressType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[17]
}

func (x ProgressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProgressType.Descriptor instead.
func (ProgressType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{17}
}

type ProxyIpStatus int32

const (
	ProxyIpStatus_PROXY_IP_STATUS_UNSPECIFIED ProxyIpStatus = 0
	ProxyIpStatus_PROXY_IP_STATUS_CREATING    ProxyIpStatus = 1
	ProxyIpStatus_PROXY_IP_STATUS_ONLINE      ProxyIpStatus = 2
	ProxyIpStatus_PROXY_IP_STATUS_TERMINATED  ProxyIpStatus = 3
	ProxyIpStatus_PROXY_IP_STATUS_UNHEALTHY   ProxyIpStatus = 4
)

// Enum value maps for ProxyIpStatus.
var (
	ProxyIpStatus_name = map[int32]string{
		0: "PROXY_IP_STATUS_UNSPECIFIED",
		1: "PROXY_IP_STATUS_CREATING",
		2: "PROXY_IP_STATUS_ONLINE",
		3: "PROXY_IP_STATUS_TERMINATED",
		4: "PROXY_IP_STATUS_UNHEALTHY",
	}
	ProxyIpStatus_value = map[string]int32{
		"PROXY_IP_STATUS_UNSPECIFIED": 0,
		"PROXY_IP_STATUS_CREATING":    1,
		"PROXY_IP_STATUS_ONLINE":      2,
		"PROXY_IP_STATUS_TERMINATED":  3,
		"PROXY_IP_STATUS_UNHEALTHY":   4,
	}
)

func (x ProxyIpStatus) Enum() *ProxyIpStatus {
	p := new(ProxyIpStatus)
	*p = x
	return p
}

func (x ProxyIpStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProxyIpStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[18].Descriptor()
}

func (ProxyIpStatus) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[18]
}

func (x ProxyIpStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProxyIpStatus.Descriptor instead.
func (ProxyIpStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{18}
}

type RateLimitInterval int32

const (
	RateLimitInterval_RATE_LIMIT_INTERVAL_UNSPECIFIED RateLimitInterval = 0
	RateLimitInterval_RATE_LIMIT_INTERVAL_SECOND      RateLimitInterval = 1
	RateLimitInterval_RATE_LIMIT_INTERVAL_MINUTE      RateLimitInterval = 2
)

// Enum value maps for RateLimitInterval.
var (
	RateLimitInterval_name = map[int32]string{
		0: "RATE_LIMIT_INTERVAL_UNSPECIFIED",
		1: "RATE_LIMIT_INTERVAL_SECOND",
		2: "RATE_LIMIT_INTERVAL_MINUTE",
	}
	RateLimitInterval_value = map[string]int32{
		"RATE_LIMIT_INTERVAL_UNSPECIFIED": 0,
		"RATE_LIMIT_INTERVAL_SECOND":      1,
		"RATE_LIMIT_INTERVAL_MINUTE":      2,
	}
)

func (x RateLimitInterval) Enum() *RateLimitInterval {
	p := new(RateLimitInterval)
	*p = x
	return p
}

func (x RateLimitInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateLimitInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[19].Descriptor()
}

func (RateLimitInterval) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[19]
}

func (x RateLimitInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateLimitInterval.Descriptor instead.
func (RateLimitInterval) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{19}
}

type RegistryAuthType int32

const (
	RegistryAuthType_REGISTRY_AUTH_TYPE_UNSPECIFIED  RegistryAuthType = 0 // Older clients send this instead of "public".
	RegistryAuthType_REGISTRY_AUTH_TYPE_AWS          RegistryAuthType = 1
	RegistryAuthType_REGISTRY_AUTH_TYPE_GCP          RegistryAuthType = 2
	RegistryAuthType_REGISTRY_AUTH_TYPE_PUBLIC       RegistryAuthType = 3
	RegistryAuthType_REGISTRY_AUTH_TYPE_STATIC_CREDS RegistryAuthType = 4
)

// Enum value maps for RegistryAuthType.
var (
	RegistryAuthType_name = map[int32]string{
		0: "REGISTRY_AUTH_TYPE_UNSPECIFIED",
		1: "REGISTRY_AUTH_TYPE_AWS",
		2: "REGISTRY_AUTH_TYPE_GCP",
		3: "REGISTRY_AUTH_TYPE_PUBLIC",
		4: "REGISTRY_AUTH_TYPE_STATIC_CREDS",
	}
	RegistryAuthType_value = map[string]int32{
		"REGISTRY_AUTH_TYPE_UNSPECIFIED":  0,
		"REGISTRY_AUTH_TYPE_AWS":          1,
		"REGISTRY_AUTH_TYPE_GCP":          2,
		"REGISTRY_AUTH_TYPE_PUBLIC":       3,
		"REGISTRY_AUTH_TYPE_STATIC_CREDS": 4,
	}
)

func (x RegistryAuthType) Enum() *RegistryAuthType {
	p := new(RegistryAuthType)
	*p = x
	return p
}

func (x RegistryAuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistryAuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[20].Descriptor()
}

func (RegistryAuthType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[20]
}

func (x RegistryAuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistryAuthType.Descriptor instead.
func (RegistryAuthType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{20}
}

type TaskState int32

const (
	TaskState_TASK_STATE_UNSPECIFIED              TaskState = 0
	TaskState_TASK_STATE_CREATED                  TaskState = 6
	TaskState_TASK_STATE_QUEUED                   TaskState = 1
	TaskState_TASK_STATE_WORKER_ASSIGNED          TaskState = 2
	TaskState_TASK_STATE_LOADING_IMAGE            TaskState = 3
	TaskState_TASK_STATE_ACTIVE                   TaskState = 4
	TaskState_TASK_STATE_COMPLETED                TaskState = 5
	TaskState_TASK_STATE_CREATING_CONTAINER       TaskState = 7
	TaskState_TASK_STATE_IDLE                     TaskState = 8
	TaskState_TASK_STATE_PREEMPTIBLE              TaskState = 9
	TaskState_TASK_STATE_PREEMPTED                TaskState = 10
	TaskState_TASK_STATE_LOADING_CHECKPOINT_IMAGE TaskState = 11
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0:  "TASK_STATE_UNSPECIFIED",
		6:  "TASK_STATE_CREATED",
		1:  "TASK_STATE_QUEUED",
		2:  "TASK_STATE_WORKER_ASSIGNED",
		3:  "TASK_STATE_LOADING_IMAGE",
		4:  "TASK_STATE_ACTIVE",
		5:  "TASK_STATE_COMPLETED",
		7:  "TASK_STATE_CREATING_CONTAINER",
		8:  "TASK_STATE_IDLE",
		9:  "TASK_STATE_PREEMPTIBLE",
		10: "TASK_STATE_PREEMPTED",
		11: "TASK_STATE_LOADING_CHECKPOINT_IMAGE",
	}
	TaskState_value = map[string]int32{
		"TASK_STATE_UNSPECIFIED":              0,
		"TASK_STATE_CREATED":                  6,
		"TASK_STATE_QUEUED":                   1,
		"TASK_STATE_WORKER_ASSIGNED":          2,
		"TASK_STATE_LOADING_IMAGE":            3,
		"TASK_STATE_ACTIVE":                   4,
		"TASK_STATE_COMPLETED":                5,
		"TASK_STATE_CREATING_CONTAINER":       7,
		"TASK_STATE_IDLE":                     8,
		"TASK_STATE_PREEMPTIBLE":              9,
		"TASK_STATE_PREEMPTED":                10,
		"TASK_STATE_LOADING_CHECKPOINT_IMAGE": 11,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[21].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[21]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{21}
}

type VolumeFsVersion int32

const (
	VolumeFsVersion_UNSPECIFIED VolumeFsVersion = 0
	VolumeFsVersion_V1          VolumeFsVersion = 1
	VolumeFsVersion_V2          VolumeFsVersion = 2
)

// Enum value maps for VolumeFsVersion.
var (
	VolumeFsVersion_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "V1",
		2: "V2",
	}
	VolumeFsVersion_value = map[string]int32{
		"UNSPECIFIED": 0,
		"V1":          1,
		"V2":          2,
	}
)

func (x VolumeFsVersion) Enum() *VolumeFsVersion {
	p := new(VolumeFsVersion)
	*p = x
	return p
}

func (x VolumeFsVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeFsVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[22].Descriptor()
}

func (VolumeFsVersion) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[22]
}

func (x VolumeFsVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeFsVersion.Descriptor instead.
func (VolumeFsVersion) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{22}
}

type WebhookAsyncMode int32

const (
	WebhookAsyncMode_WEBHOOK_ASYNC_MODE_UNSPECIFIED WebhookAsyncMode = 0
	WebhookAsyncMode_WEBHOOK_ASYNC_MODE_DISABLED    WebhookAsyncMode = 2 // no redirect, fail after timeout
	WebhookAsyncMode_WEBHOOK_ASYNC_MODE_TRIGGER     WebhookAsyncMode = 3 // return immediately, roughly same as old wait_for_response=False
	WebhookAsyncMode_WEBHOOK_ASYNC_MODE_AUTO        WebhookAsyncMode = 4 // redirect to polling endpoint if execution time nears the http timeout
)

// Enum value maps for WebhookAsyncMode.
var (
	WebhookAsyncMode_name = map[int32]string{
		0: "WEBHOOK_ASYNC_MODE_UNSPECIFIED",
		2: "WEBHOOK_ASYNC_MODE_DISABLED",
		3: "WEBHOOK_ASYNC_MODE_TRIGGER",
		4: "WEBHOOK_ASYNC_MODE_AUTO",
	}
	WebhookAsyncMode_value = map[string]int32{
		"WEBHOOK_ASYNC_MODE_UNSPECIFIED": 0,
		"WEBHOOK_ASYNC_MODE_DISABLED":    2,
		"WEBHOOK_ASYNC_MODE_TRIGGER":     3,
		"WEBHOOK_ASYNC_MODE_AUTO":        4,
	}
)

func (x WebhookAsyncMode) Enum() *WebhookAsyncMode {
	p := new(WebhookAsyncMode)
	*p = x
	return p
}

func (x WebhookAsyncMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookAsyncMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[23].Descriptor()
}

func (WebhookAsyncMode) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[23]
}

func (x WebhookAsyncMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookAsyncMode.Descriptor instead.
func (WebhookAsyncMode) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{23}
}

type WebhookType int32

const (
	WebhookType_WEBHOOK_TYPE_UNSPECIFIED WebhookType = 0
	WebhookType_WEBHOOK_TYPE_ASGI_APP    WebhookType = 1
	WebhookType_WEBHOOK_TYPE_FUNCTION    WebhookType = 2
	WebhookType_WEBHOOK_TYPE_WSGI_APP    WebhookType = 3
	WebhookType_WEBHOOK_TYPE_WEB_SERVER  WebhookType = 4
)

// Enum value maps for WebhookType.
var (
	WebhookType_name = map[int32]string{
		0: "WEBHOOK_TYPE_UNSPECIFIED",
		1: "WEBHOOK_TYPE_ASGI_APP",
		2: "WEBHOOK_TYPE_FUNCTION",
		3: "WEBHOOK_TYPE_WSGI_APP",
		4: "WEBHOOK_TYPE_WEB_SERVER",
	}
	WebhookType_value = map[string]int32{
		"WEBHOOK_TYPE_UNSPECIFIED": 0,
		"WEBHOOK_TYPE_ASGI_APP":    1,
		"WEBHOOK_TYPE_FUNCTION":    2,
		"WEBHOOK_TYPE_WSGI_APP":    3,
		"WEBHOOK_TYPE_WEB_SERVER":  4,
	}
)

func (x WebhookType) Enum() *WebhookType {
	p := new(WebhookType)
	*p = x
	return p
}

func (x WebhookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[24].Descriptor()
}

func (WebhookType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[24]
}

func (x WebhookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookType.Descriptor instead.
func (WebhookType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{24}
}

type ClassParameterInfo_ParameterSerializationFormat int32

const (
	ClassParameterInfo_PARAM_SERIALIZATION_FORMAT_UNSPECIFIED ClassParameterInfo_ParameterSerializationFormat = 0
	ClassParameterInfo_PARAM_SERIALIZATION_FORMAT_PICKLE      ClassParameterInfo_ParameterSerializationFormat = 1 // legacy format - pickle of (args, kwargs) tuple
	ClassParameterInfo_PARAM_SERIALIZATION_FORMAT_PROTO       ClassParameterInfo_ParameterSerializationFormat = 2 // new format using api.FunctionParameterSet
)

// Enum value maps for ClassParameterInfo_ParameterSerializationFormat.
var (
	ClassParameterInfo_ParameterSerializationFormat_name = map[int32]string{
		0: "PARAM_SERIALIZATION_FORMAT_UNSPECIFIED",
		1: "PARAM_SERIALIZATION_FORMAT_PICKLE",
		2: "PARAM_SERIALIZATION_FORMAT_PROTO",
	}
	ClassParameterInfo_ParameterSerializationFormat_value = map[string]int32{
		"PARAM_SERIALIZATION_FORMAT_UNSPECIFIED": 0,
		"PARAM_SERIALIZATION_FORMAT_PICKLE":      1,
		"PARAM_SERIALIZATION_FORMAT_PROTO":       2,
	}
)

func (x ClassParameterInfo_ParameterSerializationFormat) Enum() *ClassParameterInfo_ParameterSerializationFormat {
	p := new(ClassParameterInfo_ParameterSerializationFormat)
	*p = x
	return p
}

func (x ClassParameterInfo_ParameterSerializationFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClassParameterInfo_ParameterSerializationFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[25].Descriptor()
}

func (ClassParameterInfo_ParameterSerializationFormat) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[25]
}

func (x ClassParameterInfo_ParameterSerializationFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClassParameterInfo_ParameterSerializationFormat.Descriptor instead.
func (ClassParameterInfo_ParameterSerializationFormat) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{43, 0}
}

type CloudBucketMount_BucketType int32

const (
	CloudBucketMount_UNSPECIFIED CloudBucketMount_BucketType = 0
	CloudBucketMount_S3          CloudBucketMount_BucketType = 1
	CloudBucketMount_R2          CloudBucketMount_BucketType = 2
	CloudBucketMount_GCP         CloudBucketMount_BucketType = 3
)

// Enum value maps for CloudBucketMount_BucketType.
var (
	CloudBucketMount_BucketType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "S3",
		2: "R2",
		3: "GCP",
	}
	CloudBucketMount_BucketType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"S3":          1,
		"R2":          2,
		"GCP":         3,
	}
)

func (x CloudBucketMount_BucketType) Enum() *CloudBucketMount_BucketType {
	p := new(CloudBucketMount_BucketType)
	*p = x
	return p
}

func (x CloudBucketMount_BucketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudBucketMount_BucketType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[26].Descriptor()
}

func (CloudBucketMount_BucketType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[26]
}

func (x CloudBucketMount_BucketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudBucketMount_BucketType.Descriptor instead.
func (CloudBucketMount_BucketType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{48, 0}
}

type FileEntry_FileType int32

const (
	FileEntry_UNSPECIFIED FileEntry_FileType = 0
	FileEntry_FILE        FileEntry_FileType = 1
	FileEntry_DIRECTORY   FileEntry_FileType = 2
	FileEntry_SYMLINK     FileEntry_FileType = 3
)

// Enum value maps for FileEntry_FileType.
var (
	FileEntry_FileType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "FILE",
		2: "DIRECTORY",
		3: "SYMLINK",
	}
	FileEntry_FileType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"FILE":        1,
		"DIRECTORY":   2,
		"SYMLINK":     3,
	}
)

func (x FileEntry_FileType) Enum() *FileEntry_FileType {
	p := new(FileEntry_FileType)
	*p = x
	return p
}

func (x FileEntry_FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileEntry_FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[27].Descriptor()
}

func (FileEntry_FileType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[27]
}

func (x FileEntry_FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileEntry_FileType.Descriptor instead.
func (FileEntry_FileType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{101, 0}
}

type Function_DefinitionType int32

const (
	Function_DEFINITION_TYPE_UNSPECIFIED Function_DefinitionType = 0
	Function_DEFINITION_TYPE_SERIALIZED  Function_DefinitionType = 1
	Function_DEFINITION_TYPE_FILE        Function_DefinitionType = 2
)

// Enum value maps for Function_DefinitionType.
var (
	Function_DefinitionType_name = map[int32]string{
		0: "DEFINITION_TYPE_UNSPECIFIED",
		1: "DEFINITION_TYPE_SERIALIZED",
		2: "DEFINITION_TYPE_FILE",
	}
	Function_DefinitionType_value = map[string]int32{
		"DEFINITION_TYPE_UNSPECIFIED": 0,
		"DEFINITION_TYPE_SERIALIZED":  1,
		"DEFINITION_TYPE_FILE":        2,
	}
)

func (x Function_DefinitionType) Enum() *Function_DefinitionType {
	p := new(Function_DefinitionType)
	*p = x
	return p
}

func (x Function_DefinitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Function_DefinitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[28].Descriptor()
}

func (Function_DefinitionType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[28]
}

func (x Function_DefinitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Function_DefinitionType.Descriptor instead.
func (Function_DefinitionType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{102, 0}
}

type Function_FunctionType int32

const (
	Function_FUNCTION_TYPE_UNSPECIFIED Function_FunctionType = 0
	Function_FUNCTION_TYPE_GENERATOR   Function_FunctionType = 1
	Function_FUNCTION_TYPE_FUNCTION    Function_FunctionType = 2
)

// Enum value maps for Function_FunctionType.
var (
	Function_FunctionType_name = map[int32]string{
		0: "FUNCTION_TYPE_UNSPECIFIED",
		1: "FUNCTION_TYPE_GENERATOR",
		2: "FUNCTION_TYPE_FUNCTION",
	}
	Function_FunctionType_value = map[string]int32{
		"FUNCTION_TYPE_UNSPECIFIED": 0,
		"FUNCTION_TYPE_GENERATOR":   1,
		"FUNCTION_TYPE_FUNCTION":    2,
	}
)

func (x Function_FunctionType) Enum() *Function_FunctionType {
	p := new(Function_FunctionType)
	*p = x
	return p
}

func (x Function_FunctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Function_FunctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[29].Descriptor()
}

func (Function_FunctionType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[29]
}

func (x Function_FunctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Function_FunctionType.Descriptor instead.
func (Function_FunctionType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{102, 1}
}

type GenericResult_GenericStatus int32

const (
	GenericResult_GENERIC_STATUS_UNSPECIFIED GenericResult_GenericStatus = 0
	GenericResult_GENERIC_STATUS_SUCCESS     GenericResult_GenericStatus = 1
	GenericResult_GENERIC_STATUS_FAILURE     GenericResult_GenericStatus = 2
	// Used when a task was killed using an external signal.
	GenericResult_GENERIC_STATUS_TERMINATED GenericResult_GenericStatus = 3
	GenericResult_GENERIC_STATUS_TIMEOUT    GenericResult_GenericStatus = 4
	// Used when the user's function fails to initialize (ex. S3 mount failed due to invalid credentials).
	// Terminates the function and all remaining inputs.
	GenericResult_GENERIC_STATUS_INIT_FAILURE GenericResult_GenericStatus = 5
)

// Enum value maps for GenericResult_GenericStatus.
var (
	GenericResult_GenericStatus_name = map[int32]string{
		0: "GENERIC_STATUS_UNSPECIFIED",
		1: "GENERIC_STATUS_SUCCESS",
		2: "GENERIC_STATUS_FAILURE",
		3: "GENERIC_STATUS_TERMINATED",
		4: "GENERIC_STATUS_TIMEOUT",
		5: "GENERIC_STATUS_INIT_FAILURE",
	}
	GenericResult_GenericStatus_value = map[string]int32{
		"GENERIC_STATUS_UNSPECIFIED":  0,
		"GENERIC_STATUS_SUCCESS":      1,
		"GENERIC_STATUS_FAILURE":      2,
		"GENERIC_STATUS_TERMINATED":   3,
		"GENERIC_STATUS_TIMEOUT":      4,
		"GENERIC_STATUS_INIT_FAILURE": 5,
	}
)

func (x GenericResult_GenericStatus) Enum() *GenericResult_GenericStatus {
	p := new(GenericResult_GenericStatus)
	*p = x
	return p
}

func (x GenericResult_GenericStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenericResult_GenericStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[30].Descriptor()
}

func (GenericResult_GenericStatus) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[30]
}

func (x GenericResult_GenericStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenericResult_GenericStatus.Descriptor instead.
func (GenericResult_GenericStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{150, 0}
}

type GenericResult_GeneratorStatus int32

const (
	GenericResult_GENERATOR_STATUS_UNSPECIFIED GenericResult_GeneratorStatus = 0
	GenericResult_GENERATOR_STATUS_INCOMPLETE  GenericResult_GeneratorStatus = 1
	GenericResult_GENERATOR_STATUS_COMPLETE    GenericResult_GeneratorStatus = 2
)

// Enum value maps for GenericResult_GeneratorStatus.
var (
	GenericResult_GeneratorStatus_name = map[int32]string{
		0: "GENERATOR_STATUS_UNSPECIFIED",
		1: "GENERATOR_STATUS_INCOMPLETE",
		2: "GENERATOR_STATUS_COMPLETE",
	}
	GenericResult_GeneratorStatus_value = map[string]int32{
		"GENERATOR_STATUS_UNSPECIFIED": 0,
		"GENERATOR_STATUS_INCOMPLETE":  1,
		"GENERATOR_STATUS_COMPLETE":    2,
	}
)

func (x GenericResult_GeneratorStatus) Enum() *GenericResult_GeneratorStatus {
	p := new(GenericResult_GeneratorStatus)
	*p = x
	return p
}

func (x GenericResult_GeneratorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenericResult_GeneratorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[31].Descriptor()
}

func (GenericResult_GeneratorStatus) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[31]
}

func (x GenericResult_GeneratorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenericResult_GeneratorStatus.Descriptor instead.
func (GenericResult_GeneratorStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{150, 1}
}

type NetworkAccess_NetworkAccessType int32

const (
	NetworkAccess_UNSPECIFIED NetworkAccess_NetworkAccessType = 0
	NetworkAccess_OPEN        NetworkAccess_NetworkAccessType = 1
	NetworkAccess_BLOCKED     NetworkAccess_NetworkAccessType = 2
	NetworkAccess_ALLOWLIST   NetworkAccess_NetworkAccessType = 3
)

// Enum value maps for NetworkAccess_NetworkAccessType.
var (
	NetworkAccess_NetworkAccessType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "OPEN",
		2: "BLOCKED",
		3: "ALLOWLIST",
	}
	NetworkAccess_NetworkAccessType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"OPEN":        1,
		"BLOCKED":     2,
		"ALLOWLIST":   3,
	}
)

func (x NetworkAccess_NetworkAccessType) Enum() *NetworkAccess_NetworkAccessType {
	p := new(NetworkAccess_NetworkAccessType)
	*p = x
	return p
}

func (x NetworkAccess_NetworkAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkAccess_NetworkAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[32].Descriptor()
}

func (NetworkAccess_NetworkAccessType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[32]
}

func (x NetworkAccess_NetworkAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkAccess_NetworkAccessType.Descriptor instead.
func (NetworkAccess_NetworkAccessType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{168, 0}
}

type PTYInfo_PTYType int32

const (
	PTYInfo_PTY_TYPE_UNSPECIFIED PTYInfo_PTYType = 0 // Nothing
	PTYInfo_PTY_TYPE_FUNCTION    PTYInfo_PTYType = 1 // Run function in PTY
	PTYInfo_PTY_TYPE_SHELL       PTYInfo_PTYType = 2 // Replace function with shell
)

// Enum value maps for PTYInfo_PTYType.
var (
	PTYInfo_PTYType_name = map[int32]string{
		0: "PTY_TYPE_UNSPECIFIED",
		1: "PTY_TYPE_FUNCTION",
		2: "PTY_TYPE_SHELL",
	}
	PTYInfo_PTYType_value = map[string]int32{
		"PTY_TYPE_UNSPECIFIED": 0,
		"PTY_TYPE_FUNCTION":    1,
		"PTY_TYPE_SHELL":       2,
	}
)

func (x PTYInfo_PTYType) Enum() *PTYInfo_PTYType {
	p := new(PTYInfo_PTYType)
	*p = x
	return p
}

func (x PTYInfo_PTYType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PTYInfo_PTYType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_modal_api_proto_enumTypes[33].Descriptor()
}

func (PTYInfo_PTYType) Type() protoreflect.EnumType {
	return &file_pkg_modal_api_proto_enumTypes[33]
}

func (x PTYInfo_PTYType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PTYInfo_PTYType.Descriptor instead.
func (PTYInfo_PTYType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{171, 0}
}

type AppClientDisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string              `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Reason    AppDisconnectReason `protobuf:"varint,2,opt,name=reason,proto3,enum=modal.client.AppDisconnectReason" json:"reason,omitempty"`
	Exception string              `protobuf:"bytes,3,opt,name=exception,proto3" json:"exception,omitempty"`
}

func (x *AppClientDisconnectRequest) Reset() {
	*x = AppClientDisconnectRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppClientDisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppClientDisconnectRequest) ProtoMessage() {}

func (x *AppClientDisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppClientDisconnectRequest.ProtoReflect.Descriptor instead.
func (*AppClientDisconnectRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{0}
}

func (x *AppClientDisconnectRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppClientDisconnectRequest) GetReason() AppDisconnectReason {
	if x != nil {
		return x.Reason
	}
	return AppDisconnectReason_APP_DISCONNECT_REASON_UNSPECIFIED
}

func (x *AppClientDisconnectRequest) GetException() string {
	if x != nil {
		return x.Exception
	}
	return ""
}

type AppCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId        string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Description     string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // Human readable label for the app
	EnvironmentName string   `protobuf:"bytes,5,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	AppState        AppState `protobuf:"varint,6,opt,name=app_state,json=appState,proto3,enum=modal.client.AppState" json:"app_state,omitempty"`
}

func (x *AppCreateRequest) Reset() {
	*x = AppCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCreateRequest) ProtoMessage() {}

func (x *AppCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCreateRequest.ProtoReflect.Descriptor instead.
func (*AppCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{1}
}

func (x *AppCreateRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AppCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AppCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *AppCreateRequest) GetAppState() AppState {
	if x != nil {
		return x.AppState
	}
	return AppState_APP_STATE_UNSPECIFIED
}

type AppCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppPageUrl string `protobuf:"bytes,2,opt,name=app_page_url,json=appPageUrl,proto3" json:"app_page_url,omitempty"`
	AppLogsUrl string `protobuf:"bytes,3,opt,name=app_logs_url,json=appLogsUrl,proto3" json:"app_logs_url,omitempty"`
}

func (x *AppCreateResponse) Reset() {
	*x = AppCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCreateResponse) ProtoMessage() {}

func (x *AppCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCreateResponse.ProtoReflect.Descriptor instead.
func (*AppCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{2}
}

func (x *AppCreateResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppCreateResponse) GetAppPageUrl() string {
	if x != nil {
		return x.AppPageUrl
	}
	return ""
}

func (x *AppCreateResponse) GetAppLogsUrl() string {
	if x != nil {
		return x.AppLogsUrl
	}
	return ""
}

type AppDeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        string              `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Namespace    DeploymentNamespace `protobuf:"varint,2,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	Name         string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ObjectEntity string              `protobuf:"bytes,4,opt,name=object_entity,json=objectEntity,proto3" json:"object_entity,omitempty"`
	Visibility   AppDeployVisibility `protobuf:"varint,5,opt,name=visibility,proto3,enum=modal.client.AppDeployVisibility" json:"visibility,omitempty"`
	Tag          string              `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *AppDeployRequest) Reset() {
	*x = AppDeployRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppDeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeployRequest) ProtoMessage() {}

func (x *AppDeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeployRequest.ProtoReflect.Descriptor instead.
func (*AppDeployRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{3}
}

func (x *AppDeployRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppDeployRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *AppDeployRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppDeployRequest) GetObjectEntity() string {
	if x != nil {
		return x.ObjectEntity
	}
	return ""
}

func (x *AppDeployRequest) GetVisibility() AppDeployVisibility {
	if x != nil {
		return x.Visibility
	}
	return AppDeployVisibility_APP_DEPLOY_VISIBILITY_UNSPECIFIED
}

func (x *AppDeployRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type AppDeployResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AppDeployResponse) Reset() {
	*x = AppDeployResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppDeployResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeployResponse) ProtoMessage() {}

func (x *AppDeployResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeployResponse.ProtoReflect.Descriptor instead.
func (*AppDeployResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{4}
}

func (x *AppDeployResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AppDeploySingleObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       DeploymentNamespace `protobuf:"varint,2,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName string              `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	ObjectId        string              `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *AppDeploySingleObjectRequest) Reset() {
	*x = AppDeploySingleObjectRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppDeploySingleObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeploySingleObjectRequest) ProtoMessage() {}

func (x *AppDeploySingleObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeploySingleObjectRequest.ProtoReflect.Descriptor instead.
func (*AppDeploySingleObjectRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{5}
}

func (x *AppDeploySingleObjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppDeploySingleObjectRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *AppDeploySingleObjectRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *AppDeploySingleObjectRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type AppDeploySingleObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppDeploySingleObjectResponse) Reset() {
	*x = AppDeploySingleObjectResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppDeploySingleObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeploySingleObjectResponse) ProtoMessage() {}

func (x *AppDeploySingleObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeploySingleObjectResponse.ProtoReflect.Descriptor instead.
func (*AppDeploySingleObjectResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{6}
}

func (x *AppDeploySingleObjectResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type AppDeploymentHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string  `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Version         uint32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	ClientVersion   string  `protobuf:"bytes,3,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	DeployedAt      float64 `protobuf:"fixed64,4,opt,name=deployed_at,json=deployedAt,proto3" json:"deployed_at,omitempty"`
	DeployedBy      string  `protobuf:"bytes,5,opt,name=deployed_by,json=deployedBy,proto3" json:"deployed_by,omitempty"`
	Tag             string  `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
	RollbackVersion uint32  `protobuf:"varint,7,opt,name=rollback_version,json=rollbackVersion,proto3" json:"rollback_version,omitempty"`
	RollbackAllowed bool    `protobuf:"varint,8,opt,name=rollback_allowed,json=rollbackAllowed,proto3" json:"rollback_allowed,omitempty"`
}

func (x *AppDeploymentHistory) Reset() {
	*x = AppDeploymentHistory{}
	mi := &file_pkg_modal_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppDeploymentHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeploymentHistory) ProtoMessage() {}

func (x *AppDeploymentHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeploymentHistory.ProtoReflect.Descriptor instead.
func (*AppDeploymentHistory) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{7}
}

func (x *AppDeploymentHistory) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppDeploymentHistory) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AppDeploymentHistory) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *AppDeploymentHistory) GetDeployedAt() float64 {
	if x != nil {
		return x.DeployedAt
	}
	return 0
}

func (x *AppDeploymentHistory) GetDeployedBy() string {
	if x != nil {
		return x.DeployedBy
	}
	return ""
}

func (x *AppDeploymentHistory) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AppDeploymentHistory) GetRollbackVersion() uint32 {
	if x != nil {
		return x.RollbackVersion
	}
	return 0
}

func (x *AppDeploymentHistory) GetRollbackAllowed() bool {
	if x != nil {
		return x.RollbackAllowed
	}
	return false
}

type AppDeploymentHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppDeploymentHistoryRequest) Reset() {
	*x = AppDeploymentHistoryRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppDeploymentHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeploymentHistoryRequest) ProtoMessage() {}

func (x *AppDeploymentHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeploymentHistoryRequest.ProtoReflect.Descriptor instead.
func (*AppDeploymentHistoryRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{8}
}

func (x *AppDeploymentHistoryRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type AppDeploymentHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppDeploymentHistories []*AppDeploymentHistory `protobuf:"bytes,1,rep,name=app_deployment_histories,json=appDeploymentHistories,proto3" json:"app_deployment_histories,omitempty"`
}

func (x *AppDeploymentHistoryResponse) Reset() {
	*x = AppDeploymentHistoryResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppDeploymentHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppDeploymentHistoryResponse) ProtoMessage() {}

func (x *AppDeploymentHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppDeploymentHistoryResponse.ProtoReflect.Descriptor instead.
func (*AppDeploymentHistoryResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{9}
}

func (x *AppDeploymentHistoryResponse) GetAppDeploymentHistories() []*AppDeploymentHistory {
	if x != nil {
		return x.AppDeploymentHistories
	}
	return nil
}

type AppGetByDeploymentNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace       DeploymentNamespace `protobuf:"varint,1,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	Name            string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EnvironmentName string              `protobuf:"bytes,4,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *AppGetByDeploymentNameRequest) Reset() {
	*x = AppGetByDeploymentNameRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppGetByDeploymentNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGetByDeploymentNameRequest) ProtoMessage() {}

func (x *AppGetByDeploymentNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGetByDeploymentNameRequest.ProtoReflect.Descriptor instead.
func (*AppGetByDeploymentNameRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{10}
}

func (x *AppGetByDeploymentNameRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *AppGetByDeploymentNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppGetByDeploymentNameRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type AppGetByDeploymentNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppGetByDeploymentNameResponse) Reset() {
	*x = AppGetByDeploymentNameResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppGetByDeploymentNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGetByDeploymentNameResponse) ProtoMessage() {}

func (x *AppGetByDeploymentNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGetByDeploymentNameResponse.ProtoReflect.Descriptor instead.
func (*AppGetByDeploymentNameResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{11}
}

func (x *AppGetByDeploymentNameResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type AppGetLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId          string         `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Timeout        float32        `protobuf:"fixed32,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	LastEntryId    string         `protobuf:"bytes,4,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
	FunctionId     string         `protobuf:"bytes,5,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	InputId        string         `protobuf:"bytes,6,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	TaskId         string         `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FileDescriptor FileDescriptor `protobuf:"varint,8,opt,name=file_descriptor,json=fileDescriptor,proto3,enum=modal.client.FileDescriptor" json:"file_descriptor,omitempty"`
}

func (x *AppGetLogsRequest) Reset() {
	*x = AppGetLogsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppGetLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGetLogsRequest) ProtoMessage() {}

func (x *AppGetLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGetLogsRequest.ProtoReflect.Descriptor instead.
func (*AppGetLogsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{12}
}

func (x *AppGetLogsRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppGetLogsRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *AppGetLogsRequest) GetLastEntryId() string {
	if x != nil {
		return x.LastEntryId
	}
	return ""
}

func (x *AppGetLogsRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *AppGetLogsRequest) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *AppGetLogsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AppGetLogsRequest) GetFileDescriptor() FileDescriptor {
	if x != nil {
		return x.FileDescriptor
	}
	return FileDescriptor_FILE_DESCRIPTOR_UNSPECIFIED
}

type AppGetObjectsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag    string  `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Object *Object `protobuf:"bytes,6,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *AppGetObjectsItem) Reset() {
	*x = AppGetObjectsItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppGetObjectsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGetObjectsItem) ProtoMessage() {}

func (x *AppGetObjectsItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGetObjectsItem.ProtoReflect.Descriptor instead.
func (*AppGetObjectsItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{13}
}

func (x *AppGetObjectsItem) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AppGetObjectsItem) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

type AppGetObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	IncludeUnindexed bool   `protobuf:"varint,2,opt,name=include_unindexed,json=includeUnindexed,proto3" json:"include_unindexed,omitempty"`
}

func (x *AppGetObjectsRequest) Reset() {
	*x = AppGetObjectsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppGetObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGetObjectsRequest) ProtoMessage() {}

func (x *AppGetObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGetObjectsRequest.ProtoReflect.Descriptor instead.
func (*AppGetObjectsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{14}
}

func (x *AppGetObjectsRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppGetObjectsRequest) GetIncludeUnindexed() bool {
	if x != nil {
		return x.IncludeUnindexed
	}
	return false
}

type AppGetObjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AppGetObjectsItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AppGetObjectsResponse) Reset() {
	*x = AppGetObjectsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppGetObjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGetObjectsResponse) ProtoMessage() {}

func (x *AppGetObjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGetObjectsResponse.ProtoReflect.Descriptor instead.
func (*AppGetObjectsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{15}
}

func (x *AppGetObjectsResponse) GetItems() []*AppGetObjectsItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type AppGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName            string             `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	EnvironmentName    string             `protobuf:"bytes,2,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	ObjectCreationType ObjectCreationType `protobuf:"varint,3,opt,name=object_creation_type,json=objectCreationType,proto3,enum=modal.client.ObjectCreationType" json:"object_creation_type,omitempty"`
}

func (x *AppGetOrCreateRequest) Reset() {
	*x = AppGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGetOrCreateRequest) ProtoMessage() {}

func (x *AppGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*AppGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{16}
}

func (x *AppGetOrCreateRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AppGetOrCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *AppGetOrCreateRequest) GetObjectCreationType() ObjectCreationType {
	if x != nil {
		return x.ObjectCreationType
	}
	return ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED
}

type AppGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppGetOrCreateResponse) Reset() {
	*x = AppGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGetOrCreateResponse) ProtoMessage() {}

func (x *AppGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*AppGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{17}
}

func (x *AppGetOrCreateResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type AppHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppHeartbeatRequest) Reset() {
	*x = AppHeartbeatRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppHeartbeatRequest) ProtoMessage() {}

func (x *AppHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*AppHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{18}
}

func (x *AppHeartbeatRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type AppListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentName string `protobuf:"bytes,1,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *AppListRequest) Reset() {
	*x = AppListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppListRequest) ProtoMessage() {}

func (x *AppListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppListRequest.ProtoReflect.Descriptor instead.
func (*AppListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{19}
}

func (x *AppListRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type AppListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*AppListResponse_AppListItem `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *AppListResponse) Reset() {
	*x = AppListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppListResponse) ProtoMessage() {}

func (x *AppListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppListResponse.ProtoReflect.Descriptor instead.
func (*AppListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{20}
}

func (x *AppListResponse) GetApps() []*AppListResponse_AppListItem {
	if x != nil {
		return x.Apps
	}
	return nil
}

type AppLookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName         string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	EnvironmentName string `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *AppLookupRequest) Reset() {
	*x = AppLookupRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppLookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLookupRequest) ProtoMessage() {}

func (x *AppLookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLookupRequest.ProtoReflect.Descriptor instead.
func (*AppLookupRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{21}
}

func (x *AppLookupRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AppLookupRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type AppLookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppLookupResponse) Reset() {
	*x = AppLookupResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppLookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLookupResponse) ProtoMessage() {}

func (x *AppLookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLookupResponse.ProtoReflect.Descriptor instead.
func (*AppLookupResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{22}
}

func (x *AppLookupResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type AppPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string            `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Name            string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DeploymentTag   string            `protobuf:"bytes,3,opt,name=deployment_tag,json=deploymentTag,proto3" json:"deployment_tag,omitempty"`                                                                                         // Additional metadata to identify a deployment
	AppState        AppState          `protobuf:"varint,4,opt,name=app_state,json=appState,proto3,enum=modal.client.AppState" json:"app_state,omitempty"`                                                                            // Published app will be in this state
	FunctionIds     map[string]string `protobuf:"bytes,5,rep,name=function_ids,json=functionIds,proto3" json:"function_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // function_name -> function_id
	ClassIds        map[string]string `protobuf:"bytes,6,rep,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                // class_name -> class_id
	DefinitionIds   map[string]string `protobuf:"bytes,7,rep,name=definition_ids,json=definitionIds,proto3" json:"definition_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // function_id -> definition_id
	RollbackVersion uint32            `protobuf:"varint,8,opt,name=rollback_version,json=rollbackVersion,proto3" json:"rollback_version,omitempty"`                                                                                  // Unused by client, but used internally
	ClientVersion   string            `protobuf:"bytes,9,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`                                                                                         // Unused by client, but used internally
}

func (x *AppPublishRequest) Reset() {
	*x = AppPublishRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishRequest) ProtoMessage() {}

func (x *AppPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishRequest.ProtoReflect.Descriptor instead.
func (*AppPublishRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{23}
}

func (x *AppPublishRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppPublishRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppPublishRequest) GetDeploymentTag() string {
	if x != nil {
		return x.DeploymentTag
	}
	return ""
}

func (x *AppPublishRequest) GetAppState() AppState {
	if x != nil {
		return x.AppState
	}
	return AppState_APP_STATE_UNSPECIFIED
}

func (x *AppPublishRequest) GetFunctionIds() map[string]string {
	if x != nil {
		return x.FunctionIds
	}
	return nil
}

func (x *AppPublishRequest) GetClassIds() map[string]string {
	if x != nil {
		return x.ClassIds
	}
	return nil
}

func (x *AppPublishRequest) GetDefinitionIds() map[string]string {
	if x != nil {
		return x.DefinitionIds
	}
	return nil
}

func (x *AppPublishRequest) GetRollbackVersion() uint32 {
	if x != nil {
		return x.RollbackVersion
	}
	return 0
}

func (x *AppPublishRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type AppPublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AppPublishResponse) Reset() {
	*x = AppPublishResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppPublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPublishResponse) ProtoMessage() {}

func (x *AppPublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPublishResponse.ProtoReflect.Descriptor instead.
func (*AppPublishResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{24}
}

func (x *AppPublishResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AppRollbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"` // signed as we support negative "roll back n versions" requests
}

func (x *AppRollbackRequest) Reset() {
	*x = AppRollbackRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppRollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppRollbackRequest) ProtoMessage() {}

func (x *AppRollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppRollbackRequest.ProtoReflect.Descriptor instead.
func (*AppRollbackRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{25}
}

func (x *AppRollbackRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppRollbackRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type AppSetObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              string            `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	IndexedObjectIds   map[string]string `protobuf:"bytes,2,rep,name=indexed_object_ids,json=indexedObjectIds,proto3" json:"indexed_object_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientId           string            `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	UnindexedObjectIds []string          `protobuf:"bytes,4,rep,name=unindexed_object_ids,json=unindexedObjectIds,proto3" json:"unindexed_object_ids,omitempty"`
	NewAppState        AppState          `protobuf:"varint,5,opt,name=new_app_state,json=newAppState,proto3,enum=modal.client.AppState" json:"new_app_state,omitempty"` // promotes an app from initializing to this new state
	SingleObjectId     string            `protobuf:"bytes,6,opt,name=single_object_id,json=singleObjectId,proto3" json:"single_object_id,omitempty"`
}

func (x *AppSetObjectsRequest) Reset() {
	*x = AppSetObjectsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppSetObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSetObjectsRequest) ProtoMessage() {}

func (x *AppSetObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSetObjectsRequest.ProtoReflect.Descriptor instead.
func (*AppSetObjectsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{26}
}

func (x *AppSetObjectsRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppSetObjectsRequest) GetIndexedObjectIds() map[string]string {
	if x != nil {
		return x.IndexedObjectIds
	}
	return nil
}

func (x *AppSetObjectsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AppSetObjectsRequest) GetUnindexedObjectIds() []string {
	if x != nil {
		return x.UnindexedObjectIds
	}
	return nil
}

func (x *AppSetObjectsRequest) GetNewAppState() AppState {
	if x != nil {
		return x.NewAppState
	}
	return AppState_APP_STATE_UNSPECIFIED
}

func (x *AppSetObjectsRequest) GetSingleObjectId() string {
	if x != nil {
		return x.SingleObjectId
	}
	return ""
}

type AppStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId  string        `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Source AppStopSource `protobuf:"varint,2,opt,name=source,proto3,enum=modal.client.AppStopSource" json:"source,omitempty"`
}

func (x *AppStopRequest) Reset() {
	*x = AppStopRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStopRequest) ProtoMessage() {}

func (x *AppStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStopRequest.ProtoReflect.Descriptor instead.
func (*AppStopRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{27}
}

func (x *AppStopRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppStopRequest) GetSource() AppStopSource {
	if x != nil {
		return x.Source
	}
	return AppStopSource_APP_STOP_SOURCE_UNSPECIFIED
}

// A web endpoint connection-related message.
//
// Modal's internal web endpoint runtime effectively acts as a global web server
// that schedules requests to tasks that are spawned on-demand, so we need an
// internal protocol to model HTTP requests. This is that protocol.
//
// We base this protocol on Python's ASGI specification, which is a popular
// interface between applications and web servers.
//
// ASGI Spec: https://asgi.readthedocs.io/en/latest/specs/www.html
type Asgi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Asgi_Http_
	//	*Asgi_HttpRequest_
	//	*Asgi_HttpResponseStart_
	//	*Asgi_HttpResponseBody_
	//	*Asgi_HttpResponseTrailers_
	//	*Asgi_HttpDisconnect_
	//	*Asgi_Websocket_
	//	*Asgi_WebsocketConnect_
	//	*Asgi_WebsocketAccept_
	//	*Asgi_WebsocketReceive_
	//	*Asgi_WebsocketSend_
	//	*Asgi_WebsocketDisconnect_
	//	*Asgi_WebsocketClose_
	Type isAsgi_Type `protobuf_oneof:"type"`
}

func (x *Asgi) Reset() {
	*x = Asgi{}
	mi := &file_pkg_modal_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi) ProtoMessage() {}

func (x *Asgi) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi.ProtoReflect.Descriptor instead.
func (*Asgi) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28}
}

func (m *Asgi) GetType() isAsgi_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Asgi) GetHttp() *Asgi_Http {
	if x, ok := x.GetType().(*Asgi_Http_); ok {
		return x.Http
	}
	return nil
}

func (x *Asgi) GetHttpRequest() *Asgi_HttpRequest {
	if x, ok := x.GetType().(*Asgi_HttpRequest_); ok {
		return x.HttpRequest
	}
	return nil
}

func (x *Asgi) GetHttpResponseStart() *Asgi_HttpResponseStart {
	if x, ok := x.GetType().(*Asgi_HttpResponseStart_); ok {
		return x.HttpResponseStart
	}
	return nil
}

func (x *Asgi) GetHttpResponseBody() *Asgi_HttpResponseBody {
	if x, ok := x.GetType().(*Asgi_HttpResponseBody_); ok {
		return x.HttpResponseBody
	}
	return nil
}

func (x *Asgi) GetHttpResponseTrailers() *Asgi_HttpResponseTrailers {
	if x, ok := x.GetType().(*Asgi_HttpResponseTrailers_); ok {
		return x.HttpResponseTrailers
	}
	return nil
}

func (x *Asgi) GetHttpDisconnect() *Asgi_HttpDisconnect {
	if x, ok := x.GetType().(*Asgi_HttpDisconnect_); ok {
		return x.HttpDisconnect
	}
	return nil
}

func (x *Asgi) GetWebsocket() *Asgi_Websocket {
	if x, ok := x.GetType().(*Asgi_Websocket_); ok {
		return x.Websocket
	}
	return nil
}

func (x *Asgi) GetWebsocketConnect() *Asgi_WebsocketConnect {
	if x, ok := x.GetType().(*Asgi_WebsocketConnect_); ok {
		return x.WebsocketConnect
	}
	return nil
}

func (x *Asgi) GetWebsocketAccept() *Asgi_WebsocketAccept {
	if x, ok := x.GetType().(*Asgi_WebsocketAccept_); ok {
		return x.WebsocketAccept
	}
	return nil
}

func (x *Asgi) GetWebsocketReceive() *Asgi_WebsocketReceive {
	if x, ok := x.GetType().(*Asgi_WebsocketReceive_); ok {
		return x.WebsocketReceive
	}
	return nil
}

func (x *Asgi) GetWebsocketSend() *Asgi_WebsocketSend {
	if x, ok := x.GetType().(*Asgi_WebsocketSend_); ok {
		return x.WebsocketSend
	}
	return nil
}

func (x *Asgi) GetWebsocketDisconnect() *Asgi_WebsocketDisconnect {
	if x, ok := x.GetType().(*Asgi_WebsocketDisconnect_); ok {
		return x.WebsocketDisconnect
	}
	return nil
}

func (x *Asgi) GetWebsocketClose() *Asgi_WebsocketClose {
	if x, ok := x.GetType().(*Asgi_WebsocketClose_); ok {
		return x.WebsocketClose
	}
	return nil
}

type isAsgi_Type interface {
	isAsgi_Type()
}

type Asgi_Http_ struct {
	Http *Asgi_Http `protobuf:"bytes,1,opt,name=http,proto3,oneof"`
}

type Asgi_HttpRequest_ struct {
	HttpRequest *Asgi_HttpRequest `protobuf:"bytes,2,opt,name=http_request,json=httpRequest,proto3,oneof"`
}

type Asgi_HttpResponseStart_ struct {
	HttpResponseStart *Asgi_HttpResponseStart `protobuf:"bytes,3,opt,name=http_response_start,json=httpResponseStart,proto3,oneof"`
}

type Asgi_HttpResponseBody_ struct {
	HttpResponseBody *Asgi_HttpResponseBody `protobuf:"bytes,4,opt,name=http_response_body,json=httpResponseBody,proto3,oneof"`
}

type Asgi_HttpResponseTrailers_ struct {
	HttpResponseTrailers *Asgi_HttpResponseTrailers `protobuf:"bytes,5,opt,name=http_response_trailers,json=httpResponseTrailers,proto3,oneof"`
}

type Asgi_HttpDisconnect_ struct {
	HttpDisconnect *Asgi_HttpDisconnect `protobuf:"bytes,6,opt,name=http_disconnect,json=httpDisconnect,proto3,oneof"`
}

type Asgi_Websocket_ struct {
	Websocket *Asgi_Websocket `protobuf:"bytes,7,opt,name=websocket,proto3,oneof"`
}

type Asgi_WebsocketConnect_ struct {
	WebsocketConnect *Asgi_WebsocketConnect `protobuf:"bytes,8,opt,name=websocket_connect,json=websocketConnect,proto3,oneof"`
}

type Asgi_WebsocketAccept_ struct {
	WebsocketAccept *Asgi_WebsocketAccept `protobuf:"bytes,9,opt,name=websocket_accept,json=websocketAccept,proto3,oneof"`
}

type Asgi_WebsocketReceive_ struct {
	WebsocketReceive *Asgi_WebsocketReceive `protobuf:"bytes,10,opt,name=websocket_receive,json=websocketReceive,proto3,oneof"`
}

type Asgi_WebsocketSend_ struct {
	WebsocketSend *Asgi_WebsocketSend `protobuf:"bytes,11,opt,name=websocket_send,json=websocketSend,proto3,oneof"`
}

type Asgi_WebsocketDisconnect_ struct {
	WebsocketDisconnect *Asgi_WebsocketDisconnect `protobuf:"bytes,12,opt,name=websocket_disconnect,json=websocketDisconnect,proto3,oneof"`
}

type Asgi_WebsocketClose_ struct {
	WebsocketClose *Asgi_WebsocketClose `protobuf:"bytes,13,opt,name=websocket_close,json=websocketClose,proto3,oneof"`
}

func (*Asgi_Http_) isAsgi_Type() {}

func (*Asgi_HttpRequest_) isAsgi_Type() {}

func (*Asgi_HttpResponseStart_) isAsgi_Type() {}

func (*Asgi_HttpResponseBody_) isAsgi_Type() {}

func (*Asgi_HttpResponseTrailers_) isAsgi_Type() {}

func (*Asgi_HttpDisconnect_) isAsgi_Type() {}

func (*Asgi_Websocket_) isAsgi_Type() {}

func (*Asgi_WebsocketConnect_) isAsgi_Type() {}

func (*Asgi_WebsocketAccept_) isAsgi_Type() {}

func (*Asgi_WebsocketReceive_) isAsgi_Type() {}

func (*Asgi_WebsocketSend_) isAsgi_Type() {}

func (*Asgi_WebsocketDisconnect_) isAsgi_Type() {}

func (*Asgi_WebsocketClose_) isAsgi_Type() {}

type BaseImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId   string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	DockerTag string `protobuf:"bytes,2,opt,name=docker_tag,json=dockerTag,proto3" json:"docker_tag,omitempty"`
}

func (x *BaseImage) Reset() {
	*x = BaseImage{}
	mi := &file_pkg_modal_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseImage) ProtoMessage() {}

func (x *BaseImage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseImage.ProtoReflect.Descriptor instead.
func (*BaseImage) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{29}
}

func (x *BaseImage) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *BaseImage) GetDockerTag() string {
	if x != nil {
		return x.DockerTag
	}
	return ""
}

type BlobCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(erikbern): how are these garbage collected?
	// Shouldn't they belong to an app?
	ContentMd5          string `protobuf:"bytes,1,opt,name=content_md5,json=contentMd5,proto3" json:"content_md5,omitempty"`
	ContentSha256Base64 string `protobuf:"bytes,2,opt,name=content_sha256_base64,json=contentSha256Base64,proto3" json:"content_sha256_base64,omitempty"`
	ContentLength       int64  `protobuf:"varint,3,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
}

func (x *BlobCreateRequest) Reset() {
	*x = BlobCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobCreateRequest) ProtoMessage() {}

func (x *BlobCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobCreateRequest.ProtoReflect.Descriptor instead.
func (*BlobCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{30}
}

func (x *BlobCreateRequest) GetContentMd5() string {
	if x != nil {
		return x.ContentMd5
	}
	return ""
}

func (x *BlobCreateRequest) GetContentSha256Base64() string {
	if x != nil {
		return x.ContentSha256Base64
	}
	return ""
}

func (x *BlobCreateRequest) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

type BlobCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobId string `protobuf:"bytes,2,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
	// Types that are assignable to UploadTypeOneof:
	//
	//	*BlobCreateResponse_UploadUrl
	//	*BlobCreateResponse_Multipart
	UploadTypeOneof isBlobCreateResponse_UploadTypeOneof `protobuf_oneof:"upload_type_oneof"`
}

func (x *BlobCreateResponse) Reset() {
	*x = BlobCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobCreateResponse) ProtoMessage() {}

func (x *BlobCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobCreateResponse.ProtoReflect.Descriptor instead.
func (*BlobCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{31}
}

func (x *BlobCreateResponse) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

func (m *BlobCreateResponse) GetUploadTypeOneof() isBlobCreateResponse_UploadTypeOneof {
	if m != nil {
		return m.UploadTypeOneof
	}
	return nil
}

func (x *BlobCreateResponse) GetUploadUrl() string {
	if x, ok := x.GetUploadTypeOneof().(*BlobCreateResponse_UploadUrl); ok {
		return x.UploadUrl
	}
	return ""
}

func (x *BlobCreateResponse) GetMultipart() *MultiPartUpload {
	if x, ok := x.GetUploadTypeOneof().(*BlobCreateResponse_Multipart); ok {
		return x.Multipart
	}
	return nil
}

type isBlobCreateResponse_UploadTypeOneof interface {
	isBlobCreateResponse_UploadTypeOneof()
}

type BlobCreateResponse_UploadUrl struct {
	UploadUrl string `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3,oneof"`
}

type BlobCreateResponse_Multipart struct {
	Multipart *MultiPartUpload `protobuf:"bytes,3,opt,name=multipart,proto3,oneof"`
}

func (*BlobCreateResponse_UploadUrl) isBlobCreateResponse_UploadTypeOneof() {}

func (*BlobCreateResponse_Multipart) isBlobCreateResponse_UploadTypeOneof() {}

type BlobGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobId string `protobuf:"bytes,1,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
}

func (x *BlobGetRequest) Reset() {
	*x = BlobGetRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGetRequest) ProtoMessage() {}

func (x *BlobGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGetRequest.ProtoReflect.Descriptor instead.
func (*BlobGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{32}
}

func (x *BlobGetRequest) GetBlobId() string {
	if x != nil {
		return x.BlobId
	}
	return ""
}

type BlobGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl string `protobuf:"bytes,1,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
}

func (x *BlobGetResponse) Reset() {
	*x = BlobGetResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGetResponse) ProtoMessage() {}

func (x *BlobGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGetResponse.ProtoReflect.Descriptor instead.
func (*BlobGetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{33}
}

func (x *BlobGetResponse) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

type BuildFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definition string         `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	Globals    []byte         `protobuf:"bytes,2,opt,name=globals,proto3" json:"globals,omitempty"`
	Input      *FunctionInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *BuildFunction) Reset() {
	*x = BuildFunction{}
	mi := &file_pkg_modal_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildFunction) ProtoMessage() {}

func (x *BuildFunction) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildFunction.ProtoReflect.Descriptor instead.
func (*BuildFunction) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{34}
}

func (x *BuildFunction) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *BuildFunction) GetGlobals() []byte {
	if x != nil {
		return x.Globals
	}
	return nil
}

func (x *BuildFunction) GetInput() *FunctionInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CancelInputEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputIds            []string `protobuf:"bytes,1,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
	TerminateContainers bool     `protobuf:"varint,2,opt,name=terminate_containers,json=terminateContainers,proto3" json:"terminate_containers,omitempty"`
}

func (x *CancelInputEvent) Reset() {
	*x = CancelInputEvent{}
	mi := &file_pkg_modal_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelInputEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInputEvent) ProtoMessage() {}

func (x *CancelInputEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInputEvent.ProtoReflect.Descriptor instead.
func (*CancelInputEvent) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{35}
}

func (x *CancelInputEvent) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

func (x *CancelInputEvent) GetTerminateContainers() bool {
	if x != nil {
		return x.TerminateContainers
	}
	return false
}

type CheckpointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checksum           string           `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Status             CheckpointStatus `protobuf:"varint,2,opt,name=status,proto3,enum=modal.client.CheckpointStatus" json:"status,omitempty"`
	CheckpointId       string           `protobuf:"bytes,3,opt,name=checkpoint_id,json=checkpointId,proto3" json:"checkpoint_id,omitempty"`
	RuntimeFingerprint string           `protobuf:"bytes,4,opt,name=runtime_fingerprint,json=runtimeFingerprint,proto3" json:"runtime_fingerprint,omitempty"`
	Size               int64            `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *CheckpointInfo) Reset() {
	*x = CheckpointInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckpointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointInfo) ProtoMessage() {}

func (x *CheckpointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointInfo.ProtoReflect.Descriptor instead.
func (*CheckpointInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{36}
}

func (x *CheckpointInfo) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *CheckpointInfo) GetStatus() CheckpointStatus {
	if x != nil {
		return x.Status
	}
	return CheckpointStatus_CHECKPOINT_STATUS_UNSPECIFIED
}

func (x *CheckpointInfo) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

func (x *CheckpointInfo) GetRuntimeFingerprint() string {
	if x != nil {
		return x.RuntimeFingerprint
	}
	return ""
}

func (x *CheckpointInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ClassCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string         `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ExistingClassId string         `protobuf:"bytes,2,opt,name=existing_class_id,json=existingClassId,proto3" json:"existing_class_id,omitempty"`
	Methods         []*ClassMethod `protobuf:"bytes,3,rep,name=methods,proto3" json:"methods,omitempty"`
}

func (x *ClassCreateRequest) Reset() {
	*x = ClassCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassCreateRequest) ProtoMessage() {}

func (x *ClassCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassCreateRequest.ProtoReflect.Descriptor instead.
func (*ClassCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{37}
}

func (x *ClassCreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ClassCreateRequest) GetExistingClassId() string {
	if x != nil {
		return x.ExistingClassId
	}
	return ""
}

func (x *ClassCreateRequest) GetMethods() []*ClassMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

type ClassCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId        string               `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	HandleMetadata *ClassHandleMetadata `protobuf:"bytes,2,opt,name=handle_metadata,json=handleMetadata,proto3" json:"handle_metadata,omitempty"`
}

func (x *ClassCreateResponse) Reset() {
	*x = ClassCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassCreateResponse) ProtoMessage() {}

func (x *ClassCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassCreateResponse.ProtoReflect.Descriptor instead.
func (*ClassCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{38}
}

func (x *ClassCreateResponse) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *ClassCreateResponse) GetHandleMetadata() *ClassHandleMetadata {
	if x != nil {
		return x.HandleMetadata
	}
	return nil
}

type ClassGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName         string              `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	ObjectTag       string              `protobuf:"bytes,2,opt,name=object_tag,json=objectTag,proto3" json:"object_tag,omitempty"`
	Namespace       DeploymentNamespace `protobuf:"varint,3,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName string              `protobuf:"bytes,4,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	LookupPublished bool                `protobuf:"varint,8,opt,name=lookup_published,json=lookupPublished,proto3" json:"lookup_published,omitempty"` // Lookup class on app published by another workspace
	WorkspaceName   string              `protobuf:"bytes,9,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *ClassGetRequest) Reset() {
	*x = ClassGetRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassGetRequest) ProtoMessage() {}

func (x *ClassGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassGetRequest.ProtoReflect.Descriptor instead.
func (*ClassGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{39}
}

func (x *ClassGetRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ClassGetRequest) GetObjectTag() string {
	if x != nil {
		return x.ObjectTag
	}
	return ""
}

func (x *ClassGetRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *ClassGetRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *ClassGetRequest) GetLookupPublished() bool {
	if x != nil {
		return x.LookupPublished
	}
	return false
}

func (x *ClassGetRequest) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type ClassGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassId        string               `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	HandleMetadata *ClassHandleMetadata `protobuf:"bytes,2,opt,name=handle_metadata,json=handleMetadata,proto3" json:"handle_metadata,omitempty"`
}

func (x *ClassGetResponse) Reset() {
	*x = ClassGetResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassGetResponse) ProtoMessage() {}

func (x *ClassGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassGetResponse.ProtoReflect.Descriptor instead.
func (*ClassGetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{40}
}

func (x *ClassGetResponse) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *ClassGetResponse) GetHandleMetadata() *ClassHandleMetadata {
	if x != nil {
		return x.HandleMetadata
	}
	return nil
}

type ClassHandleMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Methods               []*ClassMethod          `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	ClassFunctionId       string                  `protobuf:"bytes,2,opt,name=class_function_id,json=classFunctionId,proto3" json:"class_function_id,omitempty"`
	ClassFunctionMetadata *FunctionHandleMetadata `protobuf:"bytes,3,opt,name=class_function_metadata,json=classFunctionMetadata,proto3" json:"class_function_metadata,omitempty"`
}

func (x *ClassHandleMetadata) Reset() {
	*x = ClassHandleMetadata{}
	mi := &file_pkg_modal_api_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassHandleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassHandleMetadata) ProtoMessage() {}

func (x *ClassHandleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassHandleMetadata.ProtoReflect.Descriptor instead.
func (*ClassHandleMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{41}
}

func (x *ClassHandleMetadata) GetMethods() []*ClassMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *ClassHandleMetadata) GetClassFunctionId() string {
	if x != nil {
		return x.ClassFunctionId
	}
	return ""
}

func (x *ClassHandleMetadata) GetClassFunctionMetadata() *FunctionHandleMetadata {
	if x != nil {
		return x.ClassFunctionMetadata
	}
	return nil
}

type ClassMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	FunctionId   string `protobuf:"bytes,2,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	// Class methods need to hydrate all functions on the class
	FunctionHandleMetadata *FunctionHandleMetadata `protobuf:"bytes,3,opt,name=function_handle_metadata,json=functionHandleMetadata,proto3" json:"function_handle_metadata,omitempty"`
}

func (x *ClassMethod) Reset() {
	*x = ClassMethod{}
	mi := &file_pkg_modal_api_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassMethod) ProtoMessage() {}

func (x *ClassMethod) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassMethod.ProtoReflect.Descriptor instead.
func (*ClassMethod) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{42}
}

func (x *ClassMethod) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *ClassMethod) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *ClassMethod) GetFunctionHandleMetadata() *FunctionHandleMetadata {
	if x != nil {
		return x.FunctionHandleMetadata
	}
	return nil
}

type ClassParameterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format ClassParameterInfo_ParameterSerializationFormat `protobuf:"varint,1,opt,name=format,proto3,enum=modal.client.ClassParameterInfo_ParameterSerializationFormat" json:"format,omitempty"`
	Schema []*ClassParameterSpec                           `protobuf:"bytes,2,rep,name=schema,proto3" json:"schema,omitempty"` // only set for PARAM_SERIALIZATION_FORMAT_PROTO
}

func (x *ClassParameterInfo) Reset() {
	*x = ClassParameterInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassParameterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassParameterInfo) ProtoMessage() {}

func (x *ClassParameterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassParameterInfo.ProtoReflect.Descriptor instead.
func (*ClassParameterInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{43}
}

func (x *ClassParameterInfo) GetFormat() ClassParameterInfo_ParameterSerializationFormat {
	if x != nil {
		return x.Format
	}
	return ClassParameterInfo_PARAM_SERIALIZATION_FORMAT_UNSPECIFIED
}

func (x *ClassParameterInfo) GetSchema() []*ClassParameterSpec {
	if x != nil {
		return x.Schema
	}
	return nil
}

type ClassParameterSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: adding additional *fields* here can invalidate function lookups
	//
	//	since we use the serialized message as the bound function identifier
	//	for parameter-bound classes. Modify with *caution*
	Parameters []*ClassParameterValue `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ClassParameterSet) Reset() {
	*x = ClassParameterSet{}
	mi := &file_pkg_modal_api_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassParameterSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassParameterSet) ProtoMessage() {}

func (x *ClassParameterSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassParameterSet.ProtoReflect.Descriptor instead.
func (*ClassParameterSet) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{44}
}

func (x *ClassParameterSet) GetParameters() []*ClassParameterValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ClassParameterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       ParameterType `protobuf:"varint,2,opt,name=type,proto3,enum=modal.client.ParameterType" json:"type,omitempty"`
	HasDefault bool          `protobuf:"varint,3,opt,name=has_default,json=hasDefault,proto3" json:"has_default,omitempty"`
	// Types that are assignable to DefaultOneof:
	//
	//	*ClassParameterSpec_StringDefault
	//	*ClassParameterSpec_IntDefault
	DefaultOneof isClassParameterSpec_DefaultOneof `protobuf_oneof:"default_oneof"`
}

func (x *ClassParameterSpec) Reset() {
	*x = ClassParameterSpec{}
	mi := &file_pkg_modal_api_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassParameterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassParameterSpec) ProtoMessage() {}

func (x *ClassParameterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassParameterSpec.ProtoReflect.Descriptor instead.
func (*ClassParameterSpec) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{45}
}

func (x *ClassParameterSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClassParameterSpec) GetType() ParameterType {
	if x != nil {
		return x.Type
	}
	return ParameterType_PARAM_TYPE_UNSPECIFIED
}

func (x *ClassParameterSpec) GetHasDefault() bool {
	if x != nil {
		return x.HasDefault
	}
	return false
}

func (m *ClassParameterSpec) GetDefaultOneof() isClassParameterSpec_DefaultOneof {
	if m != nil {
		return m.DefaultOneof
	}
	return nil
}

func (x *ClassParameterSpec) GetStringDefault() string {
	if x, ok := x.GetDefaultOneof().(*ClassParameterSpec_StringDefault); ok {
		return x.StringDefault
	}
	return ""
}

func (x *ClassParameterSpec) GetIntDefault() int64 {
	if x, ok := x.GetDefaultOneof().(*ClassParameterSpec_IntDefault); ok {
		return x.IntDefault
	}
	return 0
}

type isClassParameterSpec_DefaultOneof interface {
	isClassParameterSpec_DefaultOneof()
}

type ClassParameterSpec_StringDefault struct {
	StringDefault string `protobuf:"bytes,4,opt,name=string_default,json=stringDefault,proto3,oneof"`
}

type ClassParameterSpec_IntDefault struct {
	IntDefault int64 `protobuf:"varint,5,opt,name=int_default,json=intDefault,proto3,oneof"`
}

func (*ClassParameterSpec_StringDefault) isClassParameterSpec_DefaultOneof() {}

func (*ClassParameterSpec_IntDefault) isClassParameterSpec_DefaultOneof() {}

type ClassParameterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: adding additional *fields* here can invalidate function lookups
	//
	//	since we use the serialized message as the bound function identifier
	//	for parameter-bound classes. Modify with *caution*
	Name string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ParameterType `protobuf:"varint,2,opt,name=type,proto3,enum=modal.client.ParameterType" json:"type,omitempty"`
	// Types that are assignable to ValueOneof:
	//
	//	*ClassParameterValue_StringValue
	//	*ClassParameterValue_IntValue
	ValueOneof isClassParameterValue_ValueOneof `protobuf_oneof:"value_oneof"`
}

func (x *ClassParameterValue) Reset() {
	*x = ClassParameterValue{}
	mi := &file_pkg_modal_api_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassParameterValue) ProtoMessage() {}

func (x *ClassParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassParameterValue.ProtoReflect.Descriptor instead.
func (*ClassParameterValue) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{46}
}

func (x *ClassParameterValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClassParameterValue) GetType() ParameterType {
	if x != nil {
		return x.Type
	}
	return ParameterType_PARAM_TYPE_UNSPECIFIED
}

func (m *ClassParameterValue) GetValueOneof() isClassParameterValue_ValueOneof {
	if m != nil {
		return m.ValueOneof
	}
	return nil
}

func (x *ClassParameterValue) GetStringValue() string {
	if x, ok := x.GetValueOneof().(*ClassParameterValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ClassParameterValue) GetIntValue() int64 {
	if x, ok := x.GetValueOneof().(*ClassParameterValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

type isClassParameterValue_ValueOneof interface {
	isClassParameterValue_ValueOneof()
}

type ClassParameterValue_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type ClassParameterValue_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3,oneof"`
}

func (*ClassParameterValue_StringValue) isClassParameterValue_ValueOneof() {}

func (*ClassParameterValue_IntValue) isClassParameterValue_ValueOneof() {}

type ClientHelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warning             string `protobuf:"bytes,1,opt,name=warning,proto3" json:"warning,omitempty"`
	ImageBuilderVersion string `protobuf:"bytes,2,opt,name=image_builder_version,json=imageBuilderVersion,proto3" json:"image_builder_version,omitempty"` // Deprecated, no longer used in client
}

func (x *ClientHelloResponse) Reset() {
	*x = ClientHelloResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientHelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHelloResponse) ProtoMessage() {}

func (x *ClientHelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHelloResponse.ProtoReflect.Descriptor instead.
func (*ClientHelloResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{47}
}

func (x *ClientHelloResponse) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *ClientHelloResponse) GetImageBuilderVersion() string {
	if x != nil {
		return x.ImageBuilderVersion
	}
	return ""
}

type CloudBucketMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName          string                      `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	MountPath           string                      `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	CredentialsSecretId string                      `protobuf:"bytes,3,opt,name=credentials_secret_id,json=credentialsSecretId,proto3" json:"credentials_secret_id,omitempty"`
	ReadOnly            bool                        `protobuf:"varint,4,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	BucketType          CloudBucketMount_BucketType `protobuf:"varint,5,opt,name=bucket_type,json=bucketType,proto3,enum=modal.client.CloudBucketMount_BucketType" json:"bucket_type,omitempty"`
	RequesterPays       bool                        `protobuf:"varint,6,opt,name=requester_pays,json=requesterPays,proto3" json:"requester_pays,omitempty"`
	BucketEndpointUrl   *string                     `protobuf:"bytes,7,opt,name=bucket_endpoint_url,json=bucketEndpointUrl,proto3,oneof" json:"bucket_endpoint_url,omitempty"`
	KeyPrefix           *string                     `protobuf:"bytes,8,opt,name=key_prefix,json=keyPrefix,proto3,oneof" json:"key_prefix,omitempty"`
}

func (x *CloudBucketMount) Reset() {
	*x = CloudBucketMount{}
	mi := &file_pkg_modal_api_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudBucketMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudBucketMount) ProtoMessage() {}

func (x *CloudBucketMount) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudBucketMount.ProtoReflect.Descriptor instead.
func (*CloudBucketMount) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{48}
}

func (x *CloudBucketMount) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *CloudBucketMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *CloudBucketMount) GetCredentialsSecretId() string {
	if x != nil {
		return x.CredentialsSecretId
	}
	return ""
}

func (x *CloudBucketMount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *CloudBucketMount) GetBucketType() CloudBucketMount_BucketType {
	if x != nil {
		return x.BucketType
	}
	return CloudBucketMount_UNSPECIFIED
}

func (x *CloudBucketMount) GetRequesterPays() bool {
	if x != nil {
		return x.RequesterPays
	}
	return false
}

func (x *CloudBucketMount) GetBucketEndpointUrl() string {
	if x != nil && x.BucketEndpointUrl != nil {
		return *x.BucketEndpointUrl
	}
	return ""
}

func (x *CloudBucketMount) GetKeyPrefix() string {
	if x != nil && x.KeyPrefix != nil {
		return *x.KeyPrefix
	}
	return ""
}

type ContainerArguments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string            `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FunctionId       string            `protobuf:"bytes,2,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	AppId            string            `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	FunctionDef      *Function         `protobuf:"bytes,7,opt,name=function_def,json=functionDef,proto3" json:"function_def,omitempty"`
	ProxyInfo        *ProxyInfo        `protobuf:"bytes,8,opt,name=proxy_info,json=proxyInfo,proto3" json:"proxy_info,omitempty"`
	TracingContext   map[string]string `protobuf:"bytes,9,rep,name=tracing_context,json=tracingContext,proto3" json:"tracing_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SerializedParams []byte            `protobuf:"bytes,10,opt,name=serialized_params,json=serializedParams,proto3" json:"serialized_params,omitempty"`
	Runtime          string            `protobuf:"bytes,11,opt,name=runtime,proto3" json:"runtime,omitempty"`
	EnvironmentName  string            `protobuf:"bytes,13,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	CheckpointId     *string           `protobuf:"bytes,14,opt,name=checkpoint_id,json=checkpointId,proto3,oneof" json:"checkpoint_id,omitempty"`
}

func (x *ContainerArguments) Reset() {
	*x = ContainerArguments{}
	mi := &file_pkg_modal_api_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerArguments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerArguments) ProtoMessage() {}

func (x *ContainerArguments) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerArguments.ProtoReflect.Descriptor instead.
func (*ContainerArguments) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{49}
}

func (x *ContainerArguments) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ContainerArguments) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *ContainerArguments) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ContainerArguments) GetFunctionDef() *Function {
	if x != nil {
		return x.FunctionDef
	}
	return nil
}

func (x *ContainerArguments) GetProxyInfo() *ProxyInfo {
	if x != nil {
		return x.ProxyInfo
	}
	return nil
}

func (x *ContainerArguments) GetTracingContext() map[string]string {
	if x != nil {
		return x.TracingContext
	}
	return nil
}

func (x *ContainerArguments) GetSerializedParams() []byte {
	if x != nil {
		return x.SerializedParams
	}
	return nil
}

func (x *ContainerArguments) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ContainerArguments) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *ContainerArguments) GetCheckpointId() string {
	if x != nil && x.CheckpointId != nil {
		return *x.CheckpointId
	}
	return ""
}

type ContainerCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckpointId string `protobuf:"bytes,1,opt,name=checkpoint_id,json=checkpointId,proto3" json:"checkpoint_id,omitempty"`
}

func (x *ContainerCheckpointRequest) Reset() {
	*x = ContainerCheckpointRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerCheckpointRequest) ProtoMessage() {}

func (x *ContainerCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerCheckpointRequest.ProtoReflect.Descriptor instead.
func (*ContainerCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{50}
}

func (x *ContainerCheckpointRequest) GetCheckpointId() string {
	if x != nil {
		return x.CheckpointId
	}
	return ""
}

type ContainerExecGetOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecId         string         `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Timeout        float32        `protobuf:"fixed32,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	LastBatchIndex uint64         `protobuf:"varint,3,opt,name=last_batch_index,json=lastBatchIndex,proto3" json:"last_batch_index,omitempty"`
	FileDescriptor FileDescriptor `protobuf:"varint,4,opt,name=file_descriptor,json=fileDescriptor,proto3,enum=modal.client.FileDescriptor" json:"file_descriptor,omitempty"`
}

func (x *ContainerExecGetOutputRequest) Reset() {
	*x = ContainerExecGetOutputRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerExecGetOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerExecGetOutputRequest) ProtoMessage() {}

func (x *ContainerExecGetOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerExecGetOutputRequest.ProtoReflect.Descriptor instead.
func (*ContainerExecGetOutputRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{51}
}

func (x *ContainerExecGetOutputRequest) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *ContainerExecGetOutputRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ContainerExecGetOutputRequest) GetLastBatchIndex() uint64 {
	if x != nil {
		return x.LastBatchIndex
	}
	return 0
}

func (x *ContainerExecGetOutputRequest) GetFileDescriptor() FileDescriptor {
	if x != nil {
		return x.FileDescriptor
	}
	return FileDescriptor_FILE_DESCRIPTOR_UNSPECIFIED
}

type ContainerExecPutInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecId string               `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Input  *RuntimeInputMessage `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *ContainerExecPutInputRequest) Reset() {
	*x = ContainerExecPutInputRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerExecPutInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerExecPutInputRequest) ProtoMessage() {}

func (x *ContainerExecPutInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerExecPutInputRequest.ProtoReflect.Descriptor instead.
func (*ContainerExecPutInputRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{52}
}

func (x *ContainerExecPutInputRequest) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *ContainerExecPutInputRequest) GetInput() *RuntimeInputMessage {
	if x != nil {
		return x.Input
	}
	return nil
}

type ContainerExecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  string   `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Command []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	PtyInfo *PTYInfo `protobuf:"bytes,3,opt,name=pty_info,json=ptyInfo,proto3" json:"pty_info,omitempty"`
	// Send SIGTERM to running container on exit of exec command.
	TerminateContainerOnExit bool `protobuf:"varint,4,opt,name=terminate_container_on_exit,json=terminateContainerOnExit,proto3" json:"terminate_container_on_exit,omitempty"`
	RuntimeDebug             bool `protobuf:"varint,5,opt,name=runtime_debug,json=runtimeDebug,proto3" json:"runtime_debug,omitempty"` // For internal debugging use only.
}

func (x *ContainerExecRequest) Reset() {
	*x = ContainerExecRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerExecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerExecRequest) ProtoMessage() {}

func (x *ContainerExecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerExecRequest.ProtoReflect.Descriptor instead.
func (*ContainerExecRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{53}
}

func (x *ContainerExecRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ContainerExecRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ContainerExecRequest) GetPtyInfo() *PTYInfo {
	if x != nil {
		return x.PtyInfo
	}
	return nil
}

func (x *ContainerExecRequest) GetTerminateContainerOnExit() bool {
	if x != nil {
		return x.TerminateContainerOnExit
	}
	return false
}

func (x *ContainerExecRequest) GetRuntimeDebug() bool {
	if x != nil {
		return x.RuntimeDebug
	}
	return false
}

type ContainerExecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecId string `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
}

func (x *ContainerExecResponse) Reset() {
	*x = ContainerExecResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerExecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerExecResponse) ProtoMessage() {}

func (x *ContainerExecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerExecResponse.ProtoReflect.Descriptor instead.
func (*ContainerExecResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{54}
}

func (x *ContainerExecResponse) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

type ContainerExecWaitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecId  string  `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Timeout float32 `protobuf:"fixed32,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ContainerExecWaitRequest) Reset() {
	*x = ContainerExecWaitRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerExecWaitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerExecWaitRequest) ProtoMessage() {}

func (x *ContainerExecWaitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerExecWaitRequest.ProtoReflect.Descriptor instead.
func (*ContainerExecWaitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{55}
}

func (x *ContainerExecWaitRequest) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *ContainerExecWaitRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type ContainerExecWaitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode  *int32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3,oneof" json:"exit_code,omitempty"`
	Completed bool   `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (x *ContainerExecWaitResponse) Reset() {
	*x = ContainerExecWaitResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerExecWaitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerExecWaitResponse) ProtoMessage() {}

func (x *ContainerExecWaitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerExecWaitResponse.ProtoReflect.Descriptor instead.
func (*ContainerExecWaitResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{56}
}

func (x *ContainerExecWaitResponse) GetExitCode() int32 {
	if x != nil && x.ExitCode != nil {
		return *x.ExitCode
	}
	return 0
}

func (x *ContainerExecWaitResponse) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

type ContainerHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentInputId                    string  `protobuf:"bytes,1,opt,name=current_input_id,json=currentInputId,proto3" json:"current_input_id,omitempty"`
	CurrentInputStartedAt             float64 `protobuf:"fixed64,2,opt,name=current_input_started_at,json=currentInputStartedAt,proto3" json:"current_input_started_at,omitempty"`
	SupportsGracefulInputCancellation bool    `protobuf:"varint,3,opt,name=supports_graceful_input_cancellation,json=supportsGracefulInputCancellation,proto3" json:"supports_graceful_input_cancellation,omitempty"` // implicitly also means we support long polling. Can be removed once v0.57 is no longer supported
}

func (x *ContainerHeartbeatRequest) Reset() {
	*x = ContainerHeartbeatRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerHeartbeatRequest) ProtoMessage() {}

func (x *ContainerHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*ContainerHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{57}
}

func (x *ContainerHeartbeatRequest) GetCurrentInputId() string {
	if x != nil {
		return x.CurrentInputId
	}
	return ""
}

func (x *ContainerHeartbeatRequest) GetCurrentInputStartedAt() float64 {
	if x != nil {
		return x.CurrentInputStartedAt
	}
	return 0
}

func (x *ContainerHeartbeatRequest) GetSupportsGracefulInputCancellation() bool {
	if x != nil {
		return x.SupportsGracefulInputCancellation
	}
	return false
}

type ContainerHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CancelInputEvent *CancelInputEvent `protobuf:"bytes,1,opt,name=cancel_input_event,json=cancelInputEvent,proto3,oneof" json:"cancel_input_event,omitempty"`
}

func (x *ContainerHeartbeatResponse) Reset() {
	*x = ContainerHeartbeatResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerHeartbeatResponse) ProtoMessage() {}

func (x *ContainerHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*ContainerHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{58}
}

func (x *ContainerHeartbeatResponse) GetCancelInputEvent() *CancelInputEvent {
	if x != nil {
		return x.CancelInputEvent
	}
	return nil
}

type ContainerLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*TaskLogs `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *ContainerLogRequest) Reset() {
	*x = ContainerLogRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerLogRequest) ProtoMessage() {}

func (x *ContainerLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerLogRequest.ProtoReflect.Descriptor instead.
func (*ContainerLogRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{59}
}

func (x *ContainerLogRequest) GetLogs() []*TaskLogs {
	if x != nil {
		return x.Logs
	}
	return nil
}

type ContainerStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *ContainerStopRequest) Reset() {
	*x = ContainerStopRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStopRequest) ProtoMessage() {}

func (x *ContainerStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStopRequest.ProtoReflect.Descriptor instead.
func (*ContainerStopRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{60}
}

func (x *ContainerStopRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ContainerStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContainerStopResponse) Reset() {
	*x = ContainerStopResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStopResponse) ProtoMessage() {}

func (x *ContainerStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStopResponse.ProtoReflect.Descriptor instead.
func (*ContainerStopResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{61}
}

type CustomDomainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CustomDomainConfig) Reset() {
	*x = CustomDomainConfig{}
	mi := &file_pkg_modal_api_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDomainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDomainConfig) ProtoMessage() {}

func (x *CustomDomainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDomainConfig.ProtoReflect.Descriptor instead.
func (*CustomDomainConfig) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{62}
}

func (x *CustomDomainConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CustomDomainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CustomDomainInfo) Reset() {
	*x = CustomDomainInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomDomainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDomainInfo) ProtoMessage() {}

func (x *CustomDomainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDomainInfo.ProtoReflect.Descriptor instead.
func (*CustomDomainInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{63}
}

func (x *CustomDomainInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DNSRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  DNSRecordType `protobuf:"varint,1,opt,name=type,proto3,enum=modal.client.DNSRecordType" json:"type,omitempty"`
	Name  string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value string        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DNSRecord) Reset() {
	*x = DNSRecord{}
	mi := &file_pkg_modal_api_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSRecord) ProtoMessage() {}

func (x *DNSRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSRecord.ProtoReflect.Descriptor instead.
func (*DNSRecord) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{64}
}

func (x *DNSRecord) GetType() DNSRecordType {
	if x != nil {
		return x.Type
	}
	return DNSRecordType_DNS_RECORD_TYPE_A
}

func (x *DNSRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNSRecord) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Chunks of data that can be streamed in and out of tasks.
type DataChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataFormat DataFormat `protobuf:"varint,1,opt,name=data_format,json=dataFormat,proto3,enum=modal.client.DataFormat" json:"data_format,omitempty"`
	// Types that are assignable to DataOneof:
	//
	//	*DataChunk_Data
	//	*DataChunk_DataBlobId
	DataOneof isDataChunk_DataOneof `protobuf_oneof:"data_oneof"`
	Index     uint64                `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"` // Index of this data chunk in the stream.
}

func (x *DataChunk) Reset() {
	*x = DataChunk{}
	mi := &file_pkg_modal_api_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunk) ProtoMessage() {}

func (x *DataChunk) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunk.ProtoReflect.Descriptor instead.
func (*DataChunk) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{65}
}

func (x *DataChunk) GetDataFormat() DataFormat {
	if x != nil {
		return x.DataFormat
	}
	return DataFormat_DATA_FORMAT_UNSPECIFIED
}

func (m *DataChunk) GetDataOneof() isDataChunk_DataOneof {
	if m != nil {
		return m.DataOneof
	}
	return nil
}

func (x *DataChunk) GetData() []byte {
	if x, ok := x.GetDataOneof().(*DataChunk_Data); ok {
		return x.Data
	}
	return nil
}

func (x *DataChunk) GetDataBlobId() string {
	if x, ok := x.GetDataOneof().(*DataChunk_DataBlobId); ok {
		return x.DataBlobId
	}
	return ""
}

func (x *DataChunk) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type isDataChunk_DataOneof interface {
	isDataChunk_DataOneof()
}

type DataChunk_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type DataChunk_DataBlobId struct {
	DataBlobId string `protobuf:"bytes,3,opt,name=data_blob_id,json=dataBlobId,proto3,oneof"`
}

func (*DataChunk_Data) isDataChunk_DataOneof() {}

func (*DataChunk_DataBlobId) isDataChunk_DataOneof() {}

type DictClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId string `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
}

func (x *DictClearRequest) Reset() {
	*x = DictClearRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictClearRequest) ProtoMessage() {}

func (x *DictClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictClearRequest.ProtoReflect.Descriptor instead.
func (*DictClearRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{66}
}

func (x *DictClearRequest) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

type DictContainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId string `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
	Key    []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DictContainsRequest) Reset() {
	*x = DictContainsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictContainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictContainsRequest) ProtoMessage() {}

func (x *DictContainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictContainsRequest.ProtoReflect.Descriptor instead.
func (*DictContainsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{67}
}

func (x *DictContainsRequest) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

func (x *DictContainsRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type DictContainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found bool `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
}

func (x *DictContainsResponse) Reset() {
	*x = DictContainsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictContainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictContainsResponse) ProtoMessage() {}

func (x *DictContainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictContainsResponse.ProtoReflect.Descriptor instead.
func (*DictContainsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{68}
}

func (x *DictContainsResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type DictContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId string `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
	// Setting these to True will populate the corresponding field in the response, otherwise it will be null
	// This lets us support the keys/values/items SDK API through one RPC without unnecessary data transfer
	Keys   bool `protobuf:"varint,2,opt,name=keys,proto3" json:"keys,omitempty"`
	Values bool `protobuf:"varint,3,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *DictContentsRequest) Reset() {
	*x = DictContentsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictContentsRequest) ProtoMessage() {}

func (x *DictContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictContentsRequest.ProtoReflect.Descriptor instead.
func (*DictContentsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{69}
}

func (x *DictContentsRequest) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

func (x *DictContentsRequest) GetKeys() bool {
	if x != nil {
		return x.Keys
	}
	return false
}

func (x *DictContentsRequest) GetValues() bool {
	if x != nil {
		return x.Values
	}
	return false
}

type DictDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId string `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
}

func (x *DictDeleteRequest) Reset() {
	*x = DictDeleteRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictDeleteRequest) ProtoMessage() {}

func (x *DictDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictDeleteRequest.ProtoReflect.Descriptor instead.
func (*DictDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{70}
}

func (x *DictDeleteRequest) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

type DictEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DictEntry) Reset() {
	*x = DictEntry{}
	mi := &file_pkg_modal_api_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictEntry) ProtoMessage() {}

func (x *DictEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictEntry.ProtoReflect.Descriptor instead.
func (*DictEntry) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{71}
}

func (x *DictEntry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DictEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type DictGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName     string              `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Namespace          DeploymentNamespace `protobuf:"varint,2,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName    string              `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	ObjectCreationType ObjectCreationType  `protobuf:"varint,4,opt,name=object_creation_type,json=objectCreationType,proto3,enum=modal.client.ObjectCreationType" json:"object_creation_type,omitempty"`
	Data               []*DictEntry        `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DictGetOrCreateRequest) Reset() {
	*x = DictGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictGetOrCreateRequest) ProtoMessage() {}

func (x *DictGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*DictGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{72}
}

func (x *DictGetOrCreateRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *DictGetOrCreateRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *DictGetOrCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *DictGetOrCreateRequest) GetObjectCreationType() ObjectCreationType {
	if x != nil {
		return x.ObjectCreationType
	}
	return ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED
}

func (x *DictGetOrCreateRequest) GetData() []*DictEntry {
	if x != nil {
		return x.Data
	}
	return nil
}

type DictGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId string `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
}

func (x *DictGetOrCreateResponse) Reset() {
	*x = DictGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictGetOrCreateResponse) ProtoMessage() {}

func (x *DictGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*DictGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{73}
}

func (x *DictGetOrCreateResponse) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

type DictGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId string `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
	Key    []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DictGetRequest) Reset() {
	*x = DictGetRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictGetRequest) ProtoMessage() {}

func (x *DictGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictGetRequest.ProtoReflect.Descriptor instead.
func (*DictGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{74}
}

func (x *DictGetRequest) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

func (x *DictGetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type DictGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found bool   `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *DictGetResponse) Reset() {
	*x = DictGetResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictGetResponse) ProtoMessage() {}

func (x *DictGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictGetResponse.ProtoReflect.Descriptor instead.
func (*DictGetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{75}
}

func (x *DictGetResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *DictGetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type DictHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId string `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
}

func (x *DictHeartbeatRequest) Reset() {
	*x = DictHeartbeatRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictHeartbeatRequest) ProtoMessage() {}

func (x *DictHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*DictHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{76}
}

func (x *DictHeartbeatRequest) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

type DictLenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId string `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
}

func (x *DictLenRequest) Reset() {
	*x = DictLenRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictLenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictLenRequest) ProtoMessage() {}

func (x *DictLenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictLenRequest.ProtoReflect.Descriptor instead.
func (*DictLenRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{77}
}

func (x *DictLenRequest) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

type DictLenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len int32 `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *DictLenResponse) Reset() {
	*x = DictLenResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictLenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictLenResponse) ProtoMessage() {}

func (x *DictLenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictLenResponse.ProtoReflect.Descriptor instead.
func (*DictLenResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{78}
}

func (x *DictLenResponse) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type DictListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentName string `protobuf:"bytes,1,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *DictListRequest) Reset() {
	*x = DictListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictListRequest) ProtoMessage() {}

func (x *DictListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictListRequest.ProtoReflect.Descriptor instead.
func (*DictListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{79}
}

func (x *DictListRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type DictListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dicts []*DictListResponse_DictInfo `protobuf:"bytes,1,rep,name=dicts,proto3" json:"dicts,omitempty"`
}

func (x *DictListResponse) Reset() {
	*x = DictListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictListResponse) ProtoMessage() {}

func (x *DictListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictListResponse.ProtoReflect.Descriptor instead.
func (*DictListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{80}
}

func (x *DictListResponse) GetDicts() []*DictListResponse_DictInfo {
	if x != nil {
		return x.Dicts
	}
	return nil
}

type DictPopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId string `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
	Key    []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DictPopRequest) Reset() {
	*x = DictPopRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictPopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictPopRequest) ProtoMessage() {}

func (x *DictPopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictPopRequest.ProtoReflect.Descriptor instead.
func (*DictPopRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{81}
}

func (x *DictPopRequest) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

func (x *DictPopRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type DictPopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found bool   `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *DictPopResponse) Reset() {
	*x = DictPopResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictPopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictPopResponse) ProtoMessage() {}

func (x *DictPopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictPopResponse.ProtoReflect.Descriptor instead.
func (*DictPopResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{82}
}

func (x *DictPopResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *DictPopResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type DictUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId  string       `protobuf:"bytes,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
	Updates []*DictEntry `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *DictUpdateRequest) Reset() {
	*x = DictUpdateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictUpdateRequest) ProtoMessage() {}

func (x *DictUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictUpdateRequest.ProtoReflect.Descriptor instead.
func (*DictUpdateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{83}
}

func (x *DictUpdateRequest) GetDictId() string {
	if x != nil {
		return x.DictId
	}
	return ""
}

func (x *DictUpdateRequest) GetUpdates() []*DictEntry {
	if x != nil {
		return x.Updates
	}
	return nil
}

type DictUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DictUpdateResponse) Reset() {
	*x = DictUpdateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictUpdateResponse) ProtoMessage() {}

func (x *DictUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictUpdateResponse.ProtoReflect.Descriptor instead.
func (*DictUpdateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{84}
}

type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId          string            `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	DomainName        string            `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	CreatedAt         float64           `protobuf:"fixed64,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CertificateStatus CertificateStatus `protobuf:"varint,4,opt,name=certificate_status,json=certificateStatus,proto3,enum=modal.client.CertificateStatus" json:"certificate_status,omitempty"`
	DnsRecords        []*DNSRecord      `protobuf:"bytes,5,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
}

func (x *Domain) Reset() {
	*x = Domain{}
	mi := &file_pkg_modal_api_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{85}
}

func (x *Domain) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *Domain) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Domain) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Domain) GetCertificateStatus() CertificateStatus {
	if x != nil {
		return x.CertificateStatus
	}
	return CertificateStatus_CERTIFICATE_STATUS_PENDING
}

func (x *Domain) GetDnsRecords() []*DNSRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

type DomainCertificateVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (x *DomainCertificateVerifyRequest) Reset() {
	*x = DomainCertificateVerifyRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainCertificateVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCertificateVerifyRequest) ProtoMessage() {}

func (x *DomainCertificateVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCertificateVerifyRequest.ProtoReflect.Descriptor instead.
func (*DomainCertificateVerifyRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{86}
}

func (x *DomainCertificateVerifyRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

type DomainCertificateVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain *Domain `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *DomainCertificateVerifyResponse) Reset() {
	*x = DomainCertificateVerifyResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainCertificateVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCertificateVerifyResponse) ProtoMessage() {}

func (x *DomainCertificateVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCertificateVerifyResponse.ProtoReflect.Descriptor instead.
func (*DomainCertificateVerifyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{87}
}

func (x *DomainCertificateVerifyResponse) GetDomain() *Domain {
	if x != nil {
		return x.Domain
	}
	return nil
}

type DomainCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainName string `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (x *DomainCreateRequest) Reset() {
	*x = DomainCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCreateRequest) ProtoMessage() {}

func (x *DomainCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCreateRequest.ProtoReflect.Descriptor instead.
func (*DomainCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{88}
}

func (x *DomainCreateRequest) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

type DomainCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId   string       `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	DnsRecords []*DNSRecord `protobuf:"bytes,2,rep,name=dns_records,json=dnsRecords,proto3" json:"dns_records,omitempty"`
}

func (x *DomainCreateResponse) Reset() {
	*x = DomainCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCreateResponse) ProtoMessage() {}

func (x *DomainCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCreateResponse.ProtoReflect.Descriptor instead.
func (*DomainCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{89}
}

func (x *DomainCreateResponse) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DomainCreateResponse) GetDnsRecords() []*DNSRecord {
	if x != nil {
		return x.DnsRecords
	}
	return nil
}

type DomainListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DomainListRequest) Reset() {
	*x = DomainListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainListRequest) ProtoMessage() {}

func (x *DomainListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainListRequest.ProtoReflect.Descriptor instead.
func (*DomainListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{90}
}

type DomainListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains []*Domain `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (x *DomainListResponse) Reset() {
	*x = DomainListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainListResponse) ProtoMessage() {}

func (x *DomainListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainListResponse.ProtoReflect.Descriptor instead.
func (*DomainListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{91}
}

func (x *DomainListResponse) GetDomains() []*Domain {
	if x != nil {
		return x.Domains
	}
	return nil
}

type EnvironmentCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EnvironmentCreateRequest) Reset() {
	*x = EnvironmentCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentCreateRequest) ProtoMessage() {}

func (x *EnvironmentCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentCreateRequest.ProtoReflect.Descriptor instead.
func (*EnvironmentCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{92}
}

func (x *EnvironmentCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EnvironmentDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EnvironmentDeleteRequest) Reset() {
	*x = EnvironmentDeleteRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentDeleteRequest) ProtoMessage() {}

func (x *EnvironmentDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentDeleteRequest.ProtoReflect.Descriptor instead.
func (*EnvironmentDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{93}
}

func (x *EnvironmentDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EnvironmentGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName     string             `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	ObjectCreationType ObjectCreationType `protobuf:"varint,2,opt,name=object_creation_type,json=objectCreationType,proto3,enum=modal.client.ObjectCreationType" json:"object_creation_type,omitempty"`
}

func (x *EnvironmentGetOrCreateRequest) Reset() {
	*x = EnvironmentGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentGetOrCreateRequest) ProtoMessage() {}

func (x *EnvironmentGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*EnvironmentGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{94}
}

func (x *EnvironmentGetOrCreateRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *EnvironmentGetOrCreateRequest) GetObjectCreationType() ObjectCreationType {
	if x != nil {
		return x.ObjectCreationType
	}
	return ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED
}

type EnvironmentGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentId string               `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Metadata      *EnvironmentMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EnvironmentGetOrCreateResponse) Reset() {
	*x = EnvironmentGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentGetOrCreateResponse) ProtoMessage() {}

func (x *EnvironmentGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*EnvironmentGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{95}
}

func (x *EnvironmentGetOrCreateResponse) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *EnvironmentGetOrCreateResponse) GetMetadata() *EnvironmentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type EnvironmentListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WebhookSuffix string  `protobuf:"bytes,2,opt,name=webhook_suffix,json=webhookSuffix,proto3" json:"webhook_suffix,omitempty"`
	CreatedAt     float64 `protobuf:"fixed64,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Default       bool    `protobuf:"varint,4,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *EnvironmentListItem) Reset() {
	*x = EnvironmentListItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentListItem) ProtoMessage() {}

func (x *EnvironmentListItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentListItem.ProtoReflect.Descriptor instead.
func (*EnvironmentListItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{96}
}

func (x *EnvironmentListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentListItem) GetWebhookSuffix() string {
	if x != nil {
		return x.WebhookSuffix
	}
	return ""
}

func (x *EnvironmentListItem) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *EnvironmentListItem) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type EnvironmentListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*EnvironmentListItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *EnvironmentListResponse) Reset() {
	*x = EnvironmentListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentListResponse) ProtoMessage() {}

func (x *EnvironmentListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentListResponse.ProtoReflect.Descriptor instead.
func (*EnvironmentListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{97}
}

func (x *EnvironmentListResponse) GetItems() []*EnvironmentListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type EnvironmentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Settings *EnvironmentSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *EnvironmentMetadata) Reset() {
	*x = EnvironmentMetadata{}
	mi := &file_pkg_modal_api_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentMetadata) ProtoMessage() {}

func (x *EnvironmentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentMetadata.ProtoReflect.Descriptor instead.
func (*EnvironmentMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{98}
}

func (x *EnvironmentMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentMetadata) GetSettings() *EnvironmentSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// Environment-scoped settings, with workspace-level defaults.
// Note that we use MergeFrom to combine workspace / environment settings,
// which will *append* any `repeated` fields!
type EnvironmentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageBuilderVersion string `protobuf:"bytes,1,opt,name=image_builder_version,json=imageBuilderVersion,proto3" json:"image_builder_version,omitempty"`
	WebhookSuffix       string `protobuf:"bytes,2,opt,name=webhook_suffix,json=webhookSuffix,proto3" json:"webhook_suffix,omitempty"`
}

func (x *EnvironmentSettings) Reset() {
	*x = EnvironmentSettings{}
	mi := &file_pkg_modal_api_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentSettings) ProtoMessage() {}

func (x *EnvironmentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentSettings.ProtoReflect.Descriptor instead.
func (*EnvironmentSettings) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{99}
}

func (x *EnvironmentSettings) GetImageBuilderVersion() string {
	if x != nil {
		return x.ImageBuilderVersion
	}
	return ""
}

func (x *EnvironmentSettings) GetWebhookSuffix() string {
	if x != nil {
		return x.WebhookSuffix
	}
	return ""
}

type EnvironmentUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentName string                  `protobuf:"bytes,1,opt,name=current_name,json=currentName,proto3" json:"current_name,omitempty"`
	Name        *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WebSuffix   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=web_suffix,json=webSuffix,proto3" json:"web_suffix,omitempty"`
}

func (x *EnvironmentUpdateRequest) Reset() {
	*x = EnvironmentUpdateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentUpdateRequest) ProtoMessage() {}

func (x *EnvironmentUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentUpdateRequest.ProtoReflect.Descriptor instead.
func (*EnvironmentUpdateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{100}
}

func (x *EnvironmentUpdateRequest) GetCurrentName() string {
	if x != nil {
		return x.CurrentName
	}
	return ""
}

func (x *EnvironmentUpdateRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EnvironmentUpdateRequest) GetWebSuffix() *wrapperspb.StringValue {
	if x != nil {
		return x.WebSuffix
	}
	return nil
}

// A file entry when listing files in a volume or network file system.
type FileEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string             `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type  FileEntry_FileType `protobuf:"varint,2,opt,name=type,proto3,enum=modal.client.FileEntry_FileType" json:"type,omitempty"`
	Mtime uint64             `protobuf:"varint,3,opt,name=mtime,proto3" json:"mtime,omitempty"`
	Size  uint64             `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FileEntry) Reset() {
	*x = FileEntry{}
	mi := &file_pkg_modal_api_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileEntry) ProtoMessage() {}

func (x *FileEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileEntry.ProtoReflect.Descriptor instead.
func (*FileEntry) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{101}
}

func (x *FileEntry) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileEntry) GetType() FileEntry_FileType {
	if x != nil {
		return x.Type
	}
	return FileEntry_UNSPECIFIED
}

func (x *FileEntry) GetMtime() uint64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *FileEntry) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName          string                  `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	FunctionName        string                  `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	MountIds            []string                `protobuf:"bytes,3,rep,name=mount_ids,json=mountIds,proto3" json:"mount_ids,omitempty"`
	ImageId             string                  `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	FunctionSerialized  []byte                  `protobuf:"bytes,6,opt,name=function_serialized,json=functionSerialized,proto3" json:"function_serialized,omitempty"`
	DefinitionType      Function_DefinitionType `protobuf:"varint,7,opt,name=definition_type,json=definitionType,proto3,enum=modal.client.Function_DefinitionType" json:"definition_type,omitempty"`
	FunctionType        Function_FunctionType   `protobuf:"varint,8,opt,name=function_type,json=functionType,proto3,enum=modal.client.Function_FunctionType" json:"function_type,omitempty"`
	Resources           *Resources              `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	SecretIds           []string                `protobuf:"bytes,10,rep,name=secret_ids,json=secretIds,proto3" json:"secret_ids,omitempty"`
	RateLimit           *RateLimit              `protobuf:"bytes,11,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	WebhookConfig       *WebhookConfig          `protobuf:"bytes,15,opt,name=webhook_config,json=webhookConfig,proto3" json:"webhook_config,omitempty"`
	SharedVolumeMounts  []*SharedVolumeMount    `protobuf:"bytes,16,rep,name=shared_volume_mounts,json=sharedVolumeMounts,proto3" json:"shared_volume_mounts,omitempty"`
	ProxyId             *string                 `protobuf:"bytes,17,opt,name=proxy_id,json=proxyId,proto3,oneof" json:"proxy_id,omitempty"`
	RetryPolicy         *FunctionRetryPolicy    `protobuf:"bytes,18,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	ConcurrencyLimit    uint32                  `protobuf:"varint,19,opt,name=concurrency_limit,json=concurrencyLimit,proto3" json:"concurrency_limit,omitempty"`
	TimeoutSecs         uint32                  `protobuf:"varint,21,opt,name=timeout_secs,json=timeoutSecs,proto3" json:"timeout_secs,omitempty"`
	PtyInfo             *PTYInfo                `protobuf:"bytes,22,opt,name=pty_info,json=ptyInfo,proto3" json:"pty_info,omitempty"`
	ClassSerialized     []byte                  `protobuf:"bytes,23,opt,name=class_serialized,json=classSerialized,proto3" json:"class_serialized,omitempty"`
	TaskIdleTimeoutSecs uint32                  `protobuf:"varint,25,opt,name=task_idle_timeout_secs,json=taskIdleTimeoutSecs,proto3" json:"task_idle_timeout_secs,omitempty"`
	CloudProvider       *CloudProvider          `protobuf:"varint,26,opt,name=cloud_provider,json=cloudProvider,proto3,enum=modal.client.CloudProvider,oneof" json:"cloud_provider,omitempty"`
	WarmPoolSize        uint32                  `protobuf:"varint,27,opt,name=warm_pool_size,json=warmPoolSize,proto3" json:"warm_pool_size,omitempty"`
	WebUrl              string                  `protobuf:"bytes,28,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	WebUrlInfo          *WebUrlInfo             `protobuf:"bytes,29,opt,name=web_url_info,json=webUrlInfo,proto3" json:"web_url_info,omitempty"`
	// If set, overrides the runtime used by the function, either "runc" or "gvisor".
	Runtime                string              `protobuf:"bytes,30,opt,name=runtime,proto3" json:"runtime,omitempty"`
	AppName                string              `protobuf:"bytes,31,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"` // Formerly stub_name
	VolumeMounts           []*VolumeMount      `protobuf:"bytes,33,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	TargetConcurrentInputs uint32              `protobuf:"varint,34,opt,name=target_concurrent_inputs,json=targetConcurrentInputs,proto3" json:"target_concurrent_inputs,omitempty"`
	CustomDomainInfo       []*CustomDomainInfo `protobuf:"bytes,35,rep,name=custom_domain_info,json=customDomainInfo,proto3" json:"custom_domain_info,omitempty"`
	WorkerId               string              `protobuf:"bytes,36,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`              // For internal debugging use only.
	RuntimeDebug           bool                `protobuf:"varint,37,opt,name=runtime_debug,json=runtimeDebug,proto3" json:"runtime_debug,omitempty"` // For internal debugging use only.
	// TODO: combine into enum?
	IsBuilderFunction                    bool                `protobuf:"varint,32,opt,name=is_builder_function,json=isBuilderFunction,proto3" json:"is_builder_function,omitempty"`
	IsAutoSnapshot                       bool                `protobuf:"varint,38,opt,name=is_auto_snapshot,json=isAutoSnapshot,proto3" json:"is_auto_snapshot,omitempty"`
	IsMethod                             bool                `protobuf:"varint,39,opt,name=is_method,json=isMethod,proto3" json:"is_method,omitempty"`
	IsCheckpointingFunction              bool                `protobuf:"varint,40,opt,name=is_checkpointing_function,json=isCheckpointingFunction,proto3" json:"is_checkpointing_function,omitempty"`
	CheckpointingEnabled                 bool                `protobuf:"varint,41,opt,name=checkpointing_enabled,json=checkpointingEnabled,proto3" json:"checkpointing_enabled,omitempty"`
	Checkpoint                           *CheckpointInfo     `protobuf:"bytes,42,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	ObjectDependencies                   []*ObjectDependency `protobuf:"bytes,43,rep,name=object_dependencies,json=objectDependencies,proto3" json:"object_dependencies,omitempty"`
	BlockNetwork                         bool                `protobuf:"varint,44,opt,name=block_network,json=blockNetwork,proto3" json:"block_network,omitempty"`
	MaxInputs                            uint32              `protobuf:"varint,46,opt,name=max_inputs,json=maxInputs,proto3" json:"max_inputs,omitempty"`
	S3Mounts                             []*S3Mount          `protobuf:"bytes,47,rep,name=s3_mounts,json=s3Mounts,proto3" json:"s3_mounts,omitempty"`
	CloudBucketMounts                    []*CloudBucketMount `protobuf:"bytes,51,rep,name=cloud_bucket_mounts,json=cloudBucketMounts,proto3" json:"cloud_bucket_mounts,omitempty"`
	XExperimentalBoost                   bool                `protobuf:"varint,48,opt,name=_experimental_boost,json=ExperimentalBoost,proto3" json:"_experimental_boost,omitempty"`
	SchedulerPlacement                   *SchedulerPlacement `protobuf:"bytes,50,opt,name=scheduler_placement,json=schedulerPlacement,proto3,oneof" json:"scheduler_placement,omitempty"`
	IsClass                              bool                `protobuf:"varint,53,opt,name=is_class,json=isClass,proto3" json:"is_class,omitempty"`                    // if "Function" is actually a class grouping multiple methods
	UseFunctionId                        string              `protobuf:"bytes,54,opt,name=use_function_id,json=useFunctionId,proto3" json:"use_function_id,omitempty"` // for class methods use this function id instead for invocations - the *referenced* function should have is_class=True
	UseMethodName                        string              `protobuf:"bytes,55,opt,name=use_method_name,json=useMethodName,proto3" json:"use_method_name,omitempty"` // for class methods - this method name needs to be included in the FunctionInput
	ClassParameterInfo                   *ClassParameterInfo `protobuf:"bytes,56,opt,name=class_parameter_info,json=classParameterInfo,proto3" json:"class_parameter_info,omitempty"`
	BatchMaxSize                         uint32              `protobuf:"varint,60,opt,name=batch_max_size,json=batchMaxSize,proto3" json:"batch_max_size,omitempty"`    // Maximum number of inputs to fetch at once
	BatchLingerMs                        uint64              `protobuf:"varint,61,opt,name=batch_linger_ms,json=batchLingerMs,proto3" json:"batch_linger_ms,omitempty"` // Miliseconds to block before a response is needed
	I6PnEnabled                          bool                `protobuf:"varint,62,opt,name=i6pn_enabled,json=i6pnEnabled,proto3" json:"i6pn_enabled,omitempty"`
	XExperimentalConcurrentCancellations bool                `protobuf:"varint,63,opt,name=_experimental_concurrent_cancellations,json=ExperimentalConcurrentCancellations,proto3" json:"_experimental_concurrent_cancellations,omitempty"`
	MaxConcurrentInputs                  uint32              `protobuf:"varint,64,opt,name=max_concurrent_inputs,json=maxConcurrentInputs,proto3" json:"max_concurrent_inputs,omitempty"`
	// TODO(irfansharif): Remove, once https://github.com/modal-labs/modal/pull/15645 lands.
	XExperimentalTaskTemplatesEnabled bool            `protobuf:"varint,65,opt,name=_experimental_task_templates_enabled,json=ExperimentalTaskTemplatesEnabled,proto3" json:"_experimental_task_templates_enabled,omitempty"` // forces going through the new gpu-fallbacks integration path, even if no fallback options are specified
	XExperimentalTaskTemplates        []*TaskTemplate `protobuf:"bytes,66,rep,name=_experimental_task_templates,json=ExperimentalTaskTemplates,proto3" json:"_experimental_task_templates,omitempty"`                         // for fallback options, where the first/most-preferred "template" is derived from fields above
	// When the function is a "grouped" one, this records the # of tasks we want
	// to schedule in tandem.
	XExperimentalGroupSize uint32 `protobuf:"varint,67,opt,name=_experimental_group_size,json=ExperimentalGroupSize,proto3" json:"_experimental_group_size,omitempty"`
	// If set, the function will be run in an untrusted environment.
	Untrusted                     bool      `protobuf:"varint,68,opt,name=untrusted,proto3" json:"untrusted,omitempty"`
	XExperimentalBufferContainers uint32    `protobuf:"varint,69,opt,name=_experimental_buffer_containers,json=ExperimentalBufferContainers,proto3" json:"_experimental_buffer_containers,omitempty"`
	XExperimentalProxyIp          *string   `protobuf:"bytes,70,opt,name=_experimental_proxy_ip,json=ExperimentalProxyIp,proto3,oneof" json:"_experimental_proxy_ip,omitempty"`
	RuntimePerfRecord             bool      `protobuf:"varint,71,opt,name=runtime_perf_record,json=runtimePerfRecord,proto3" json:"runtime_perf_record,omitempty"` // For internal debugging use only.
	Schedule                      *Schedule `protobuf:"bytes,72,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	mi := &file_pkg_modal_api_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{102}
}

func (x *Function) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *Function) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *Function) GetMountIds() []string {
	if x != nil {
		return x.MountIds
	}
	return nil
}

func (x *Function) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *Function) GetFunctionSerialized() []byte {
	if x != nil {
		return x.FunctionSerialized
	}
	return nil
}

func (x *Function) GetDefinitionType() Function_DefinitionType {
	if x != nil {
		return x.DefinitionType
	}
	return Function_DEFINITION_TYPE_UNSPECIFIED
}

func (x *Function) GetFunctionType() Function_FunctionType {
	if x != nil {
		return x.FunctionType
	}
	return Function_FUNCTION_TYPE_UNSPECIFIED
}

func (x *Function) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Function) GetSecretIds() []string {
	if x != nil {
		return x.SecretIds
	}
	return nil
}

func (x *Function) GetRateLimit() *RateLimit {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *Function) GetWebhookConfig() *WebhookConfig {
	if x != nil {
		return x.WebhookConfig
	}
	return nil
}

func (x *Function) GetSharedVolumeMounts() []*SharedVolumeMount {
	if x != nil {
		return x.SharedVolumeMounts
	}
	return nil
}

func (x *Function) GetProxyId() string {
	if x != nil && x.ProxyId != nil {
		return *x.ProxyId
	}
	return ""
}

func (x *Function) GetRetryPolicy() *FunctionRetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *Function) GetConcurrencyLimit() uint32 {
	if x != nil {
		return x.ConcurrencyLimit
	}
	return 0
}

func (x *Function) GetTimeoutSecs() uint32 {
	if x != nil {
		return x.TimeoutSecs
	}
	return 0
}

func (x *Function) GetPtyInfo() *PTYInfo {
	if x != nil {
		return x.PtyInfo
	}
	return nil
}

func (x *Function) GetClassSerialized() []byte {
	if x != nil {
		return x.ClassSerialized
	}
	return nil
}

func (x *Function) GetTaskIdleTimeoutSecs() uint32 {
	if x != nil {
		return x.TaskIdleTimeoutSecs
	}
	return 0
}

func (x *Function) GetCloudProvider() CloudProvider {
	if x != nil && x.CloudProvider != nil {
		return *x.CloudProvider
	}
	return CloudProvider_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *Function) GetWarmPoolSize() uint32 {
	if x != nil {
		return x.WarmPoolSize
	}
	return 0
}

func (x *Function) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *Function) GetWebUrlInfo() *WebUrlInfo {
	if x != nil {
		return x.WebUrlInfo
	}
	return nil
}

func (x *Function) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Function) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Function) GetVolumeMounts() []*VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *Function) GetTargetConcurrentInputs() uint32 {
	if x != nil {
		return x.TargetConcurrentInputs
	}
	return 0
}

func (x *Function) GetCustomDomainInfo() []*CustomDomainInfo {
	if x != nil {
		return x.CustomDomainInfo
	}
	return nil
}

func (x *Function) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *Function) GetRuntimeDebug() bool {
	if x != nil {
		return x.RuntimeDebug
	}
	return false
}

func (x *Function) GetIsBuilderFunction() bool {
	if x != nil {
		return x.IsBuilderFunction
	}
	return false
}

func (x *Function) GetIsAutoSnapshot() bool {
	if x != nil {
		return x.IsAutoSnapshot
	}
	return false
}

func (x *Function) GetIsMethod() bool {
	if x != nil {
		return x.IsMethod
	}
	return false
}

func (x *Function) GetIsCheckpointingFunction() bool {
	if x != nil {
		return x.IsCheckpointingFunction
	}
	return false
}

func (x *Function) GetCheckpointingEnabled() bool {
	if x != nil {
		return x.CheckpointingEnabled
	}
	return false
}

func (x *Function) GetCheckpoint() *CheckpointInfo {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *Function) GetObjectDependencies() []*ObjectDependency {
	if x != nil {
		return x.ObjectDependencies
	}
	return nil
}

func (x *Function) GetBlockNetwork() bool {
	if x != nil {
		return x.BlockNetwork
	}
	return false
}

func (x *Function) GetMaxInputs() uint32 {
	if x != nil {
		return x.MaxInputs
	}
	return 0
}

func (x *Function) GetS3Mounts() []*S3Mount {
	if x != nil {
		return x.S3Mounts
	}
	return nil
}

func (x *Function) GetCloudBucketMounts() []*CloudBucketMount {
	if x != nil {
		return x.CloudBucketMounts
	}
	return nil
}

func (x *Function) GetXExperimentalBoost() bool {
	if x != nil {
		return x.XExperimentalBoost
	}
	return false
}

func (x *Function) GetSchedulerPlacement() *SchedulerPlacement {
	if x != nil {
		return x.SchedulerPlacement
	}
	return nil
}

func (x *Function) GetIsClass() bool {
	if x != nil {
		return x.IsClass
	}
	return false
}

func (x *Function) GetUseFunctionId() string {
	if x != nil {
		return x.UseFunctionId
	}
	return ""
}

func (x *Function) GetUseMethodName() string {
	if x != nil {
		return x.UseMethodName
	}
	return ""
}

func (x *Function) GetClassParameterInfo() *ClassParameterInfo {
	if x != nil {
		return x.ClassParameterInfo
	}
	return nil
}

func (x *Function) GetBatchMaxSize() uint32 {
	if x != nil {
		return x.BatchMaxSize
	}
	return 0
}

func (x *Function) GetBatchLingerMs() uint64 {
	if x != nil {
		return x.BatchLingerMs
	}
	return 0
}

func (x *Function) GetI6PnEnabled() bool {
	if x != nil {
		return x.I6PnEnabled
	}
	return false
}

func (x *Function) GetXExperimentalConcurrentCancellations() bool {
	if x != nil {
		return x.XExperimentalConcurrentCancellations
	}
	return false
}

func (x *Function) GetMaxConcurrentInputs() uint32 {
	if x != nil {
		return x.MaxConcurrentInputs
	}
	return 0
}

func (x *Function) GetXExperimentalTaskTemplatesEnabled() bool {
	if x != nil {
		return x.XExperimentalTaskTemplatesEnabled
	}
	return false
}

func (x *Function) GetXExperimentalTaskTemplates() []*TaskTemplate {
	if x != nil {
		return x.XExperimentalTaskTemplates
	}
	return nil
}

func (x *Function) GetXExperimentalGroupSize() uint32 {
	if x != nil {
		return x.XExperimentalGroupSize
	}
	return 0
}

func (x *Function) GetUntrusted() bool {
	if x != nil {
		return x.Untrusted
	}
	return false
}

func (x *Function) GetXExperimentalBufferContainers() uint32 {
	if x != nil {
		return x.XExperimentalBufferContainers
	}
	return 0
}

func (x *Function) GetXExperimentalProxyIp() string {
	if x != nil && x.XExperimentalProxyIp != nil {
		return *x.XExperimentalProxyIp
	}
	return ""
}

func (x *Function) GetRuntimePerfRecord() bool {
	if x != nil {
		return x.RuntimePerfRecord
	}
	return false
}

func (x *Function) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type FunctionBindParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId       string           `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	SerializedParams []byte           `protobuf:"bytes,2,opt,name=serialized_params,json=serializedParams,proto3" json:"serialized_params,omitempty"`
	FunctionOptions  *FunctionOptions `protobuf:"bytes,3,opt,name=function_options,json=functionOptions,proto3" json:"function_options,omitempty"`
	EnvironmentName  string           `protobuf:"bytes,4,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *FunctionBindParamsRequest) Reset() {
	*x = FunctionBindParamsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionBindParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionBindParamsRequest) ProtoMessage() {}

func (x *FunctionBindParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionBindParamsRequest.ProtoReflect.Descriptor instead.
func (*FunctionBindParamsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{103}
}

func (x *FunctionBindParamsRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *FunctionBindParamsRequest) GetSerializedParams() []byte {
	if x != nil {
		return x.SerializedParams
	}
	return nil
}

func (x *FunctionBindParamsRequest) GetFunctionOptions() *FunctionOptions {
	if x != nil {
		return x.FunctionOptions
	}
	return nil
}

func (x *FunctionBindParamsRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type FunctionBindParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoundFunctionId string                  `protobuf:"bytes,1,opt,name=bound_function_id,json=boundFunctionId,proto3" json:"bound_function_id,omitempty"`
	HandleMetadata  *FunctionHandleMetadata `protobuf:"bytes,2,opt,name=handle_metadata,json=handleMetadata,proto3" json:"handle_metadata,omitempty"`
}

func (x *FunctionBindParamsResponse) Reset() {
	*x = FunctionBindParamsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionBindParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionBindParamsResponse) ProtoMessage() {}

func (x *FunctionBindParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionBindParamsResponse.ProtoReflect.Descriptor instead.
func (*FunctionBindParamsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{104}
}

func (x *FunctionBindParamsResponse) GetBoundFunctionId() string {
	if x != nil {
		return x.BoundFunctionId
	}
	return ""
}

func (x *FunctionBindParamsResponse) GetHandleMetadata() *FunctionHandleMetadata {
	if x != nil {
		return x.HandleMetadata
	}
	return nil
}

type FunctionCallCallGraphInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCallId string `protobuf:"bytes,1,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	ParentInputId  string `protobuf:"bytes,2,opt,name=parent_input_id,json=parentInputId,proto3" json:"parent_input_id,omitempty"`
	FunctionName   string `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	ModuleName     string `protobuf:"bytes,4,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
}

func (x *FunctionCallCallGraphInfo) Reset() {
	*x = FunctionCallCallGraphInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallCallGraphInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallCallGraphInfo) ProtoMessage() {}

func (x *FunctionCallCallGraphInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallCallGraphInfo.ProtoReflect.Descriptor instead.
func (*FunctionCallCallGraphInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{105}
}

func (x *FunctionCallCallGraphInfo) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *FunctionCallCallGraphInfo) GetParentInputId() string {
	if x != nil {
		return x.ParentInputId
	}
	return ""
}

func (x *FunctionCallCallGraphInfo) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionCallCallGraphInfo) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

type FunctionCallCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCallId      string `protobuf:"bytes,1,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	TerminateContainers bool   `protobuf:"varint,2,opt,name=terminate_containers,json=terminateContainers,proto3" json:"terminate_containers,omitempty"`
}

func (x *FunctionCallCancelRequest) Reset() {
	*x = FunctionCallCancelRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallCancelRequest) ProtoMessage() {}

func (x *FunctionCallCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallCancelRequest.ProtoReflect.Descriptor instead.
func (*FunctionCallCancelRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{106}
}

func (x *FunctionCallCancelRequest) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *FunctionCallCancelRequest) GetTerminateContainers() bool {
	if x != nil {
		return x.TerminateContainers
	}
	return false
}

type FunctionCallGetDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCallId string `protobuf:"bytes,1,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	LastIndex      uint64 `protobuf:"varint,2,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
}

func (x *FunctionCallGetDataRequest) Reset() {
	*x = FunctionCallGetDataRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallGetDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallGetDataRequest) ProtoMessage() {}

func (x *FunctionCallGetDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallGetDataRequest.ProtoReflect.Descriptor instead.
func (*FunctionCallGetDataRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{107}
}

func (x *FunctionCallGetDataRequest) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *FunctionCallGetDataRequest) GetLastIndex() uint64 {
	if x != nil {
		return x.LastIndex
	}
	return 0
}

type FunctionCallInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCallId  string             `protobuf:"bytes,1,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	Idx             int32              `protobuf:"varint,2,opt,name=idx,proto3" json:"idx,omitempty"`
	CreatedAt       float64            `protobuf:"fixed64,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`       // when the call was created
	ScheduledAt     float64            `protobuf:"fixed64,7,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"` // if cron job, when run was scheduled
	PendingInputs   *InputCategoryInfo `protobuf:"bytes,12,opt,name=pending_inputs,json=pendingInputs,proto3" json:"pending_inputs,omitempty"`
	FailedInputs    *InputCategoryInfo `protobuf:"bytes,13,opt,name=failed_inputs,json=failedInputs,proto3" json:"failed_inputs,omitempty"`
	SucceededInputs *InputCategoryInfo `protobuf:"bytes,14,opt,name=succeeded_inputs,json=succeededInputs,proto3" json:"succeeded_inputs,omitempty"`
	TimeoutInputs   *InputCategoryInfo `protobuf:"bytes,15,opt,name=timeout_inputs,json=timeoutInputs,proto3" json:"timeout_inputs,omitempty"`
	CancelledInputs *InputCategoryInfo `protobuf:"bytes,16,opt,name=cancelled_inputs,json=cancelledInputs,proto3" json:"cancelled_inputs,omitempty"`
	TotalInputs     int32              `protobuf:"varint,17,opt,name=total_inputs,json=totalInputs,proto3" json:"total_inputs,omitempty"`
}

func (x *FunctionCallInfo) Reset() {
	*x = FunctionCallInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallInfo) ProtoMessage() {}

func (x *FunctionCallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallInfo.ProtoReflect.Descriptor instead.
func (*FunctionCallInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{108}
}

func (x *FunctionCallInfo) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *FunctionCallInfo) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *FunctionCallInfo) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FunctionCallInfo) GetScheduledAt() float64 {
	if x != nil {
		return x.ScheduledAt
	}
	return 0
}

func (x *FunctionCallInfo) GetPendingInputs() *InputCategoryInfo {
	if x != nil {
		return x.PendingInputs
	}
	return nil
}

func (x *FunctionCallInfo) GetFailedInputs() *InputCategoryInfo {
	if x != nil {
		return x.FailedInputs
	}
	return nil
}

func (x *FunctionCallInfo) GetSucceededInputs() *InputCategoryInfo {
	if x != nil {
		return x.SucceededInputs
	}
	return nil
}

func (x *FunctionCallInfo) GetTimeoutInputs() *InputCategoryInfo {
	if x != nil {
		return x.TimeoutInputs
	}
	return nil
}

func (x *FunctionCallInfo) GetCancelledInputs() *InputCategoryInfo {
	if x != nil {
		return x.CancelledInputs
	}
	return nil
}

func (x *FunctionCallInfo) GetTotalInputs() int32 {
	if x != nil {
		return x.TotalInputs
	}
	return 0
}

type FunctionCallListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId string `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
}

func (x *FunctionCallListRequest) Reset() {
	*x = FunctionCallListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallListRequest) ProtoMessage() {}

func (x *FunctionCallListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallListRequest.ProtoReflect.Descriptor instead.
func (*FunctionCallListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{109}
}

func (x *FunctionCallListRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

type FunctionCallListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCalls []*FunctionCallInfo `protobuf:"bytes,1,rep,name=function_calls,json=functionCalls,proto3" json:"function_calls,omitempty"`
}

func (x *FunctionCallListResponse) Reset() {
	*x = FunctionCallListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallListResponse) ProtoMessage() {}

func (x *FunctionCallListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallListResponse.ProtoReflect.Descriptor instead.
func (*FunctionCallListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{110}
}

func (x *FunctionCallListResponse) GetFunctionCalls() []*FunctionCallInfo {
	if x != nil {
		return x.FunctionCalls
	}
	return nil
}

type FunctionCallPutDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCallId string       `protobuf:"bytes,1,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	DataChunks     []*DataChunk `protobuf:"bytes,2,rep,name=data_chunks,json=dataChunks,proto3" json:"data_chunks,omitempty"`
}

func (x *FunctionCallPutDataRequest) Reset() {
	*x = FunctionCallPutDataRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallPutDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallPutDataRequest) ProtoMessage() {}

func (x *FunctionCallPutDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallPutDataRequest.ProtoReflect.Descriptor instead.
func (*FunctionCallPutDataRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{111}
}

func (x *FunctionCallPutDataRequest) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *FunctionCallPutDataRequest) GetDataChunks() []*DataChunk {
	if x != nil {
		return x.DataChunks
	}
	return nil
}

type FunctionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function           *Function `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	AppId              string    `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Schedule           *Schedule `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"` // Deprecated: now passed in the Function definition
	ExistingFunctionId string    `protobuf:"bytes,7,opt,name=existing_function_id,json=existingFunctionId,proto3" json:"existing_function_id,omitempty"`
	// This flag tells the server to avoid doing updates in FunctionCreate that should now
	// be done in AppPublish. Provides a smoother migration onto atomic deployments with 0.64,
	// and can be deprecated once we no longer support ealier versions.
	DeferUpdates bool          `protobuf:"varint,8,opt,name=defer_updates,json=deferUpdates,proto3" json:"defer_updates,omitempty"`
	FunctionData *FunctionData `protobuf:"bytes,9,opt,name=function_data,json=functionData,proto3" json:"function_data,omitempty"` // supersedes 'function' field above
}

func (x *FunctionCreateRequest) Reset() {
	*x = FunctionCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCreateRequest) ProtoMessage() {}

func (x *FunctionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCreateRequest.ProtoReflect.Descriptor instead.
func (*FunctionCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{112}
}

func (x *FunctionCreateRequest) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *FunctionCreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *FunctionCreateRequest) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *FunctionCreateRequest) GetExistingFunctionId() string {
	if x != nil {
		return x.ExistingFunctionId
	}
	return ""
}

func (x *FunctionCreateRequest) GetDeferUpdates() bool {
	if x != nil {
		return x.DeferUpdates
	}
	return false
}

func (x *FunctionCreateRequest) GetFunctionData() *FunctionData {
	if x != nil {
		return x.FunctionData
	}
	return nil
}

type FunctionCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId string `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	// Deprecated: Marked as deprecated in pkg/modal/api.proto.
	XDeprecatedWebUrl string                  `protobuf:"bytes,2,opt,name=__deprecated_web_url,json=DeprecatedWebUrl,proto3" json:"__deprecated_web_url,omitempty"` // Used up until 0.62.212
	Function          *Function               `protobuf:"bytes,4,opt,name=function,proto3" json:"function,omitempty"`
	HandleMetadata    *FunctionHandleMetadata `protobuf:"bytes,5,opt,name=handle_metadata,json=handleMetadata,proto3" json:"handle_metadata,omitempty"`
}

func (x *FunctionCreateResponse) Reset() {
	*x = FunctionCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCreateResponse) ProtoMessage() {}

func (x *FunctionCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCreateResponse.ProtoReflect.Descriptor instead.
func (*FunctionCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{113}
}

func (x *FunctionCreateResponse) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/modal/api.proto.
func (x *FunctionCreateResponse) GetXDeprecatedWebUrl() string {
	if x != nil {
		return x.XDeprecatedWebUrl
	}
	return ""
}

func (x *FunctionCreateResponse) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *FunctionCreateResponse) GetHandleMetadata() *FunctionHandleMetadata {
	if x != nil {
		return x.HandleMetadata
	}
	return nil
}

type FunctionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName   string                `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	FunctionName string                `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	FunctionType Function_FunctionType `protobuf:"varint,3,opt,name=function_type,json=functionType,proto3,enum=modal.client.Function_FunctionType" json:"function_type,omitempty"`
	// Scheduling related fields.
	WarmPoolSize        uint32                         `protobuf:"varint,4,opt,name=warm_pool_size,json=warmPoolSize,proto3" json:"warm_pool_size,omitempty"`
	ConcurrencyLimit    uint32                         `protobuf:"varint,5,opt,name=concurrency_limit,json=concurrencyLimit,proto3" json:"concurrency_limit,omitempty"`
	TaskIdleTimeoutSecs uint32                         `protobuf:"varint,6,opt,name=task_idle_timeout_secs,json=taskIdleTimeoutSecs,proto3" json:"task_idle_timeout_secs,omitempty"`
	WorkerId            string                         `protobuf:"bytes,7,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"` // for internal debugging use only
	TimeoutSecs         uint32                         `protobuf:"varint,8,opt,name=timeout_secs,json=timeoutSecs,proto3" json:"timeout_secs,omitempty"`
	WebUrl              string                         `protobuf:"bytes,9,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	WebUrlInfo          *WebUrlInfo                    `protobuf:"bytes,10,opt,name=web_url_info,json=webUrlInfo,proto3" json:"web_url_info,omitempty"`
	WebhookConfig       *WebhookConfig                 `protobuf:"bytes,11,opt,name=webhook_config,json=webhookConfig,proto3" json:"webhook_config,omitempty"`
	CustomDomainInfo    []*CustomDomainInfo            `protobuf:"bytes,12,rep,name=custom_domain_info,json=customDomainInfo,proto3" json:"custom_domain_info,omitempty"`
	IsClass             bool                           `protobuf:"varint,13,opt,name=is_class,json=isClass,proto3" json:"is_class,omitempty"` // if "Function" is actually a class grouping multiple methods - applies across all underlying tasks
	ClassParameterInfo  *ClassParameterInfo            `protobuf:"bytes,14,opt,name=class_parameter_info,json=classParameterInfo,proto3" json:"class_parameter_info,omitempty"`
	IsMethod            bool                           `protobuf:"varint,15,opt,name=is_method,json=isMethod,proto3" json:"is_method,omitempty"`
	UseFunctionId       string                         `protobuf:"bytes,16,opt,name=use_function_id,json=useFunctionId,proto3" json:"use_function_id,omitempty"` // used for methods
	UseMethodName       string                         `protobuf:"bytes,17,opt,name=use_method_name,json=useMethodName,proto3" json:"use_method_name,omitempty"` // used for methods
	RankedFunctions     []*FunctionData_RankedFunction `protobuf:"bytes,18,rep,name=ranked_functions,json=rankedFunctions,proto3" json:"ranked_functions,omitempty"`
	// When the function is a "grouped" one, this records the # of tasks we want
	// to schedule in tandem.
	XExperimentalGroupSize uint32    `protobuf:"varint,19,opt,name=_experimental_group_size,json=ExperimentalGroupSize,proto3" json:"_experimental_group_size,omitempty"`
	Schedule               *Schedule `protobuf:"bytes,20,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *FunctionData) Reset() {
	*x = FunctionData{}
	mi := &file_pkg_modal_api_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionData) ProtoMessage() {}

func (x *FunctionData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionData.ProtoReflect.Descriptor instead.
func (*FunctionData) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{114}
}

func (x *FunctionData) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *FunctionData) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionData) GetFunctionType() Function_FunctionType {
	if x != nil {
		return x.FunctionType
	}
	return Function_FUNCTION_TYPE_UNSPECIFIED
}

func (x *FunctionData) GetWarmPoolSize() uint32 {
	if x != nil {
		return x.WarmPoolSize
	}
	return 0
}

func (x *FunctionData) GetConcurrencyLimit() uint32 {
	if x != nil {
		return x.ConcurrencyLimit
	}
	return 0
}

func (x *FunctionData) GetTaskIdleTimeoutSecs() uint32 {
	if x != nil {
		return x.TaskIdleTimeoutSecs
	}
	return 0
}

func (x *FunctionData) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *FunctionData) GetTimeoutSecs() uint32 {
	if x != nil {
		return x.TimeoutSecs
	}
	return 0
}

func (x *FunctionData) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *FunctionData) GetWebUrlInfo() *WebUrlInfo {
	if x != nil {
		return x.WebUrlInfo
	}
	return nil
}

func (x *FunctionData) GetWebhookConfig() *WebhookConfig {
	if x != nil {
		return x.WebhookConfig
	}
	return nil
}

func (x *FunctionData) GetCustomDomainInfo() []*CustomDomainInfo {
	if x != nil {
		return x.CustomDomainInfo
	}
	return nil
}

func (x *FunctionData) GetIsClass() bool {
	if x != nil {
		return x.IsClass
	}
	return false
}

func (x *FunctionData) GetClassParameterInfo() *ClassParameterInfo {
	if x != nil {
		return x.ClassParameterInfo
	}
	return nil
}

func (x *FunctionData) GetIsMethod() bool {
	if x != nil {
		return x.IsMethod
	}
	return false
}

func (x *FunctionData) GetUseFunctionId() string {
	if x != nil {
		return x.UseFunctionId
	}
	return ""
}

func (x *FunctionData) GetUseMethodName() string {
	if x != nil {
		return x.UseMethodName
	}
	return ""
}

func (x *FunctionData) GetRankedFunctions() []*FunctionData_RankedFunction {
	if x != nil {
		return x.RankedFunctions
	}
	return nil
}

func (x *FunctionData) GetXExperimentalGroupSize() uint32 {
	if x != nil {
		return x.XExperimentalGroupSize
	}
	return 0
}

func (x *FunctionData) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type FunctionExtended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeIdentifier uint32 `protobuf:"varint,1,opt,name=type_identifier,json=typeIdentifier,proto3" json:"type_identifier,omitempty"`
	// FunctionExtended is a union type that exists while we migrate between
	// storage of FunctionData vs. Functions, internally. Once migrated at the
	// storage level, we can get rid of this union type and replace with access
	// that expects FunctionData only.
	//
	// Types that are assignable to FunctionExtended:
	//
	//	*FunctionExtended_FunctionSingleton
	//	*FunctionExtended_FunctionData
	FunctionExtended isFunctionExtended_FunctionExtended `protobuf_oneof:"function_extended"`
}

func (x *FunctionExtended) Reset() {
	*x = FunctionExtended{}
	mi := &file_pkg_modal_api_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionExtended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionExtended) ProtoMessage() {}

func (x *FunctionExtended) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionExtended.ProtoReflect.Descriptor instead.
func (*FunctionExtended) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{115}
}

func (x *FunctionExtended) GetTypeIdentifier() uint32 {
	if x != nil {
		return x.TypeIdentifier
	}
	return 0
}

func (m *FunctionExtended) GetFunctionExtended() isFunctionExtended_FunctionExtended {
	if m != nil {
		return m.FunctionExtended
	}
	return nil
}

func (x *FunctionExtended) GetFunctionSingleton() *Function {
	if x, ok := x.GetFunctionExtended().(*FunctionExtended_FunctionSingleton); ok {
		return x.FunctionSingleton
	}
	return nil
}

func (x *FunctionExtended) GetFunctionData() *FunctionData {
	if x, ok := x.GetFunctionExtended().(*FunctionExtended_FunctionData); ok {
		return x.FunctionData
	}
	return nil
}

type isFunctionExtended_FunctionExtended interface {
	isFunctionExtended_FunctionExtended()
}

type FunctionExtended_FunctionSingleton struct {
	FunctionSingleton *Function `protobuf:"bytes,2,opt,name=function_singleton,json=functionSingleton,proto3,oneof"`
}

type FunctionExtended_FunctionData struct {
	FunctionData *FunctionData `protobuf:"bytes,3,opt,name=function_data,json=functionData,proto3,oneof"`
}

func (*FunctionExtended_FunctionSingleton) isFunctionExtended_FunctionExtended() {}

func (*FunctionExtended_FunctionData) isFunctionExtended_FunctionExtended() {}

type FunctionGetCallGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: use input_id once we switch client submit API to return those.
	FunctionCallId string `protobuf:"bytes,2,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
}

func (x *FunctionGetCallGraphRequest) Reset() {
	*x = FunctionGetCallGraphRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetCallGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetCallGraphRequest) ProtoMessage() {}

func (x *FunctionGetCallGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetCallGraphRequest.ProtoReflect.Descriptor instead.
func (*FunctionGetCallGraphRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{116}
}

func (x *FunctionGetCallGraphRequest) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

type FunctionGetCallGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs        []*InputCallGraphInfo        `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	FunctionCalls []*FunctionCallCallGraphInfo `protobuf:"bytes,2,rep,name=function_calls,json=functionCalls,proto3" json:"function_calls,omitempty"`
}

func (x *FunctionGetCallGraphResponse) Reset() {
	*x = FunctionGetCallGraphResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetCallGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetCallGraphResponse) ProtoMessage() {}

func (x *FunctionGetCallGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetCallGraphResponse.ProtoReflect.Descriptor instead.
func (*FunctionGetCallGraphResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{117}
}

func (x *FunctionGetCallGraphResponse) GetInputs() []*InputCallGraphInfo {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *FunctionGetCallGraphResponse) GetFunctionCalls() []*FunctionCallCallGraphInfo {
	if x != nil {
		return x.FunctionCalls
	}
	return nil
}

type FunctionGetCurrentStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId string `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
}

func (x *FunctionGetCurrentStatsRequest) Reset() {
	*x = FunctionGetCurrentStatsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetCurrentStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetCurrentStatsRequest) ProtoMessage() {}

func (x *FunctionGetCurrentStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetCurrentStatsRequest.ProtoReflect.Descriptor instead.
func (*FunctionGetCurrentStatsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{118}
}

func (x *FunctionGetCurrentStatsRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

type FunctionGetDynamicConcurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId        string `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	TargetConcurrency uint32 `protobuf:"varint,2,opt,name=target_concurrency,json=targetConcurrency,proto3" json:"target_concurrency,omitempty"`
	MaxConcurrency    uint32 `protobuf:"varint,3,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
}

func (x *FunctionGetDynamicConcurrencyRequest) Reset() {
	*x = FunctionGetDynamicConcurrencyRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetDynamicConcurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetDynamicConcurrencyRequest) ProtoMessage() {}

func (x *FunctionGetDynamicConcurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetDynamicConcurrencyRequest.ProtoReflect.Descriptor instead.
func (*FunctionGetDynamicConcurrencyRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{119}
}

func (x *FunctionGetDynamicConcurrencyRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *FunctionGetDynamicConcurrencyRequest) GetTargetConcurrency() uint32 {
	if x != nil {
		return x.TargetConcurrency
	}
	return 0
}

func (x *FunctionGetDynamicConcurrencyRequest) GetMaxConcurrency() uint32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

type FunctionGetDynamicConcurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concurrency uint32 `protobuf:"varint,1,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
}

func (x *FunctionGetDynamicConcurrencyResponse) Reset() {
	*x = FunctionGetDynamicConcurrencyResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetDynamicConcurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetDynamicConcurrencyResponse) ProtoMessage() {}

func (x *FunctionGetDynamicConcurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetDynamicConcurrencyResponse.ProtoReflect.Descriptor instead.
func (*FunctionGetDynamicConcurrencyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{120}
}

func (x *FunctionGetDynamicConcurrencyResponse) GetConcurrency() uint32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

type FunctionGetInputsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputId        string         `protobuf:"bytes,1,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	Input          *FunctionInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	KillSwitch     bool           `protobuf:"varint,3,opt,name=kill_switch,json=killSwitch,proto3" json:"kill_switch,omitempty"`
	FunctionCallId string         `protobuf:"bytes,5,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
}

func (x *FunctionGetInputsItem) Reset() {
	*x = FunctionGetInputsItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetInputsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetInputsItem) ProtoMessage() {}

func (x *FunctionGetInputsItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetInputsItem.ProtoReflect.Descriptor instead.
func (*FunctionGetInputsItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{121}
}

func (x *FunctionGetInputsItem) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *FunctionGetInputsItem) GetInput() *FunctionInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *FunctionGetInputsItem) GetKillSwitch() bool {
	if x != nil {
		return x.KillSwitch
	}
	return false
}

func (x *FunctionGetInputsItem) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

type FunctionGetInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId       string  `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	MaxValues        int32   `protobuf:"varint,3,opt,name=max_values,json=maxValues,proto3" json:"max_values,omitempty"`
	AverageCallTime  float32 `protobuf:"fixed32,5,opt,name=average_call_time,json=averageCallTime,proto3" json:"average_call_time,omitempty"`
	InputConcurrency int32   `protobuf:"varint,6,opt,name=input_concurrency,json=inputConcurrency,proto3" json:"input_concurrency,omitempty"` // Container aims to fetch multiple inputs at the same time
	BatchMaxSize     uint32  `protobuf:"varint,11,opt,name=batch_max_size,json=batchMaxSize,proto3" json:"batch_max_size,omitempty"`          // Maximum number of inputs to fetch at once
	BatchLingerMs    uint64  `protobuf:"varint,12,opt,name=batch_linger_ms,json=batchLingerMs,proto3" json:"batch_linger_ms,omitempty"`       // Miliseconds to block before a response is needed
}

func (x *FunctionGetInputsRequest) Reset() {
	*x = FunctionGetInputsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetInputsRequest) ProtoMessage() {}

func (x *FunctionGetInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetInputsRequest.ProtoReflect.Descriptor instead.
func (*FunctionGetInputsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{122}
}

func (x *FunctionGetInputsRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *FunctionGetInputsRequest) GetMaxValues() int32 {
	if x != nil {
		return x.MaxValues
	}
	return 0
}

func (x *FunctionGetInputsRequest) GetAverageCallTime() float32 {
	if x != nil {
		return x.AverageCallTime
	}
	return 0
}

func (x *FunctionGetInputsRequest) GetInputConcurrency() int32 {
	if x != nil {
		return x.InputConcurrency
	}
	return 0
}

func (x *FunctionGetInputsRequest) GetBatchMaxSize() uint32 {
	if x != nil {
		return x.BatchMaxSize
	}
	return 0
}

func (x *FunctionGetInputsRequest) GetBatchLingerMs() uint64 {
	if x != nil {
		return x.BatchLingerMs
	}
	return 0
}

type FunctionGetInputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs                 []*FunctionGetInputsItem `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	RateLimitSleepDuration float32                  `protobuf:"fixed32,4,opt,name=rate_limit_sleep_duration,json=rateLimitSleepDuration,proto3" json:"rate_limit_sleep_duration,omitempty"` // How long to sleep before requesting another input.
}

func (x *FunctionGetInputsResponse) Reset() {
	*x = FunctionGetInputsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetInputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetInputsResponse) ProtoMessage() {}

func (x *FunctionGetInputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetInputsResponse.ProtoReflect.Descriptor instead.
func (*FunctionGetInputsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{123}
}

func (x *FunctionGetInputsResponse) GetInputs() []*FunctionGetInputsItem {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *FunctionGetInputsResponse) GetRateLimitSleepDuration() float32 {
	if x != nil {
		return x.RateLimitSleepDuration
	}
	return 0
}

type FunctionGetOutputsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result          *GenericResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Idx             int32          `protobuf:"varint,2,opt,name=idx,proto3" json:"idx,omitempty"`
	InputId         string         `protobuf:"bytes,3,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	GenIndex        int32          `protobuf:"varint,4,opt,name=gen_index,json=genIndex,proto3" json:"gen_index,omitempty"`                                    // Deprecated, only used in client version <0.57
	DataFormat      DataFormat     `protobuf:"varint,5,opt,name=data_format,json=dataFormat,proto3,enum=modal.client.DataFormat" json:"data_format,omitempty"` // for result.data_oneof
	TaskId          string         `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	InputStartedAt  float64        `protobuf:"fixed64,7,opt,name=input_started_at,json=inputStartedAt,proto3" json:"input_started_at,omitempty"`
	OutputCreatedAt float64        `protobuf:"fixed64,8,opt,name=output_created_at,json=outputCreatedAt,proto3" json:"output_created_at,omitempty"`
}

func (x *FunctionGetOutputsItem) Reset() {
	*x = FunctionGetOutputsItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetOutputsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetOutputsItem) ProtoMessage() {}

func (x *FunctionGetOutputsItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetOutputsItem.ProtoReflect.Descriptor instead.
func (*FunctionGetOutputsItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{124}
}

func (x *FunctionGetOutputsItem) GetResult() *GenericResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *FunctionGetOutputsItem) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *FunctionGetOutputsItem) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *FunctionGetOutputsItem) GetGenIndex() int32 {
	if x != nil {
		return x.GenIndex
	}
	return 0
}

func (x *FunctionGetOutputsItem) GetDataFormat() DataFormat {
	if x != nil {
		return x.DataFormat
	}
	return DataFormat_DATA_FORMAT_UNSPECIFIED
}

func (x *FunctionGetOutputsItem) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *FunctionGetOutputsItem) GetInputStartedAt() float64 {
	if x != nil {
		return x.InputStartedAt
	}
	return 0
}

func (x *FunctionGetOutputsItem) GetOutputCreatedAt() float64 {
	if x != nil {
		return x.OutputCreatedAt
	}
	return 0
}

type FunctionGetOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCallId string  `protobuf:"bytes,1,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	MaxValues      int32   `protobuf:"varint,2,opt,name=max_values,json=maxValues,proto3" json:"max_values,omitempty"`
	Timeout        float32 `protobuf:"fixed32,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	LastEntryId    string  `protobuf:"bytes,6,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
	ClearOnSuccess bool    `protobuf:"varint,7,opt,name=clear_on_success,json=clearOnSuccess,proto3" json:"clear_on_success,omitempty"` // expires *any* remaining outputs soon after this call, not just the returned ones
	RequestedAt    float64 `protobuf:"fixed64,8,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`           // Used for waypoints.
}

func (x *FunctionGetOutputsRequest) Reset() {
	*x = FunctionGetOutputsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetOutputsRequest) ProtoMessage() {}

func (x *FunctionGetOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetOutputsRequest.ProtoReflect.Descriptor instead.
func (*FunctionGetOutputsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{125}
}

func (x *FunctionGetOutputsRequest) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *FunctionGetOutputsRequest) GetMaxValues() int32 {
	if x != nil {
		return x.MaxValues
	}
	return 0
}

func (x *FunctionGetOutputsRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *FunctionGetOutputsRequest) GetLastEntryId() string {
	if x != nil {
		return x.LastEntryId
	}
	return ""
}

func (x *FunctionGetOutputsRequest) GetClearOnSuccess() bool {
	if x != nil {
		return x.ClearOnSuccess
	}
	return false
}

func (x *FunctionGetOutputsRequest) GetRequestedAt() float64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

type FunctionGetOutputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idxs                []int32                   `protobuf:"varint,3,rep,packed,name=idxs,proto3" json:"idxs,omitempty"`
	Outputs             []*FunctionGetOutputsItem `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	LastEntryId         string                    `protobuf:"bytes,5,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
	NumUnfinishedInputs int32                     `protobuf:"varint,6,opt,name=num_unfinished_inputs,json=numUnfinishedInputs,proto3" json:"num_unfinished_inputs,omitempty"`
}

func (x *FunctionGetOutputsResponse) Reset() {
	*x = FunctionGetOutputsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetOutputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetOutputsResponse) ProtoMessage() {}

func (x *FunctionGetOutputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetOutputsResponse.ProtoReflect.Descriptor instead.
func (*FunctionGetOutputsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{126}
}

func (x *FunctionGetOutputsResponse) GetIdxs() []int32 {
	if x != nil {
		return x.Idxs
	}
	return nil
}

func (x *FunctionGetOutputsResponse) GetOutputs() []*FunctionGetOutputsItem {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *FunctionGetOutputsResponse) GetLastEntryId() string {
	if x != nil {
		return x.LastEntryId
	}
	return ""
}

func (x *FunctionGetOutputsResponse) GetNumUnfinishedInputs() int32 {
	if x != nil {
		return x.NumUnfinishedInputs
	}
	return 0
}

type FunctionGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName         string              `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	ObjectTag       string              `protobuf:"bytes,2,opt,name=object_tag,json=objectTag,proto3" json:"object_tag,omitempty"`
	Namespace       DeploymentNamespace `protobuf:"varint,3,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName string              `protobuf:"bytes,4,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *FunctionGetRequest) Reset() {
	*x = FunctionGetRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetRequest) ProtoMessage() {}

func (x *FunctionGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetRequest.ProtoReflect.Descriptor instead.
func (*FunctionGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{127}
}

func (x *FunctionGetRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *FunctionGetRequest) GetObjectTag() string {
	if x != nil {
		return x.ObjectTag
	}
	return ""
}

func (x *FunctionGetRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *FunctionGetRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type FunctionGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId     string                  `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	HandleMetadata *FunctionHandleMetadata `protobuf:"bytes,2,opt,name=handle_metadata,json=handleMetadata,proto3" json:"handle_metadata,omitempty"`
}

func (x *FunctionGetResponse) Reset() {
	*x = FunctionGetResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetResponse) ProtoMessage() {}

func (x *FunctionGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetResponse.ProtoReflect.Descriptor instead.
func (*FunctionGetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{128}
}

func (x *FunctionGetResponse) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *FunctionGetResponse) GetHandleMetadata() *FunctionHandleMetadata {
	if x != nil {
		return x.HandleMetadata
	}
	return nil
}

type FunctionGetSerializedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId string `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
}

func (x *FunctionGetSerializedRequest) Reset() {
	*x = FunctionGetSerializedRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetSerializedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetSerializedRequest) ProtoMessage() {}

func (x *FunctionGetSerializedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetSerializedRequest.ProtoReflect.Descriptor instead.
func (*FunctionGetSerializedRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{129}
}

func (x *FunctionGetSerializedRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

type FunctionGetSerializedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionSerialized []byte `protobuf:"bytes,1,opt,name=function_serialized,json=functionSerialized,proto3" json:"function_serialized,omitempty"`
	ClassSerialized    []byte `protobuf:"bytes,2,opt,name=class_serialized,json=classSerialized,proto3" json:"class_serialized,omitempty"`
}

func (x *FunctionGetSerializedResponse) Reset() {
	*x = FunctionGetSerializedResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionGetSerializedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionGetSerializedResponse) ProtoMessage() {}

func (x *FunctionGetSerializedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionGetSerializedResponse.ProtoReflect.Descriptor instead.
func (*FunctionGetSerializedResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{130}
}

func (x *FunctionGetSerializedResponse) GetFunctionSerialized() []byte {
	if x != nil {
		return x.FunctionSerialized
	}
	return nil
}

func (x *FunctionGetSerializedResponse) GetClassSerialized() []byte {
	if x != nil {
		return x.ClassSerialized
	}
	return nil
}

type FunctionHandleMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Should be a subset and use IDs/types from `Function` above
	FunctionName       string                `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	FunctionType       Function_FunctionType `protobuf:"varint,8,opt,name=function_type,json=functionType,proto3,enum=modal.client.Function_FunctionType" json:"function_type,omitempty"`
	WebUrl             string                `protobuf:"bytes,28,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	IsMethod           bool                  `protobuf:"varint,39,opt,name=is_method,json=isMethod,proto3" json:"is_method,omitempty"`
	UseFunctionId      string                `protobuf:"bytes,40,opt,name=use_function_id,json=useFunctionId,proto3" json:"use_function_id,omitempty"` // used for methods
	UseMethodName      string                `protobuf:"bytes,41,opt,name=use_method_name,json=useMethodName,proto3" json:"use_method_name,omitempty"` // used for methods
	DefinitionId       string                `protobuf:"bytes,42,opt,name=definition_id,json=definitionId,proto3" json:"definition_id,omitempty"`
	ClassParameterInfo *ClassParameterInfo   `protobuf:"bytes,43,opt,name=class_parameter_info,json=classParameterInfo,proto3" json:"class_parameter_info,omitempty"`
}

func (x *FunctionHandleMetadata) Reset() {
	*x = FunctionHandleMetadata{}
	mi := &file_pkg_modal_api_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionHandleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionHandleMetadata) ProtoMessage() {}

func (x *FunctionHandleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionHandleMetadata.ProtoReflect.Descriptor instead.
func (*FunctionHandleMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{131}
}

func (x *FunctionHandleMetadata) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionHandleMetadata) GetFunctionType() Function_FunctionType {
	if x != nil {
		return x.FunctionType
	}
	return Function_FUNCTION_TYPE_UNSPECIFIED
}

func (x *FunctionHandleMetadata) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *FunctionHandleMetadata) GetIsMethod() bool {
	if x != nil {
		return x.IsMethod
	}
	return false
}

func (x *FunctionHandleMetadata) GetUseFunctionId() string {
	if x != nil {
		return x.UseFunctionId
	}
	return ""
}

func (x *FunctionHandleMetadata) GetUseMethodName() string {
	if x != nil {
		return x.UseMethodName
	}
	return ""
}

func (x *FunctionHandleMetadata) GetDefinitionId() string {
	if x != nil {
		return x.DefinitionId
	}
	return ""
}

func (x *FunctionHandleMetadata) GetClassParameterInfo() *ClassParameterInfo {
	if x != nil {
		return x.ClassParameterInfo
	}
	return nil
}

type FunctionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// serialized (args, kwargs).
	//
	// Types that are assignable to ArgsOneof:
	//
	//	*FunctionInput_Args
	//	*FunctionInput_ArgsBlobId
	ArgsOneof  isFunctionInput_ArgsOneof `protobuf_oneof:"args_oneof"`
	FinalInput bool                      `protobuf:"varint,9,opt,name=final_input,json=finalInput,proto3" json:"final_input,omitempty"`
	DataFormat DataFormat                `protobuf:"varint,10,opt,name=data_format,json=dataFormat,proto3,enum=modal.client.DataFormat" json:"data_format,omitempty"` // For args_oneof.
	MethodName *string                   `protobuf:"bytes,11,opt,name=method_name,json=methodName,proto3,oneof" json:"method_name,omitempty"`                         // specifies which method to call when calling a class/object function
}

func (x *FunctionInput) Reset() {
	*x = FunctionInput{}
	mi := &file_pkg_modal_api_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionInput) ProtoMessage() {}

func (x *FunctionInput) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionInput.ProtoReflect.Descriptor instead.
func (*FunctionInput) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{132}
}

func (m *FunctionInput) GetArgsOneof() isFunctionInput_ArgsOneof {
	if m != nil {
		return m.ArgsOneof
	}
	return nil
}

func (x *FunctionInput) GetArgs() []byte {
	if x, ok := x.GetArgsOneof().(*FunctionInput_Args); ok {
		return x.Args
	}
	return nil
}

func (x *FunctionInput) GetArgsBlobId() string {
	if x, ok := x.GetArgsOneof().(*FunctionInput_ArgsBlobId); ok {
		return x.ArgsBlobId
	}
	return ""
}

func (x *FunctionInput) GetFinalInput() bool {
	if x != nil {
		return x.FinalInput
	}
	return false
}

func (x *FunctionInput) GetDataFormat() DataFormat {
	if x != nil {
		return x.DataFormat
	}
	return DataFormat_DATA_FORMAT_UNSPECIFIED
}

func (x *FunctionInput) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

type isFunctionInput_ArgsOneof interface {
	isFunctionInput_ArgsOneof()
}

type FunctionInput_Args struct {
	Args []byte `protobuf:"bytes,1,opt,name=args,proto3,oneof"`
}

type FunctionInput_ArgsBlobId struct {
	ArgsBlobId string `protobuf:"bytes,7,opt,name=args_blob_id,json=argsBlobId,proto3,oneof"`
}

func (*FunctionInput_Args) isFunctionInput_ArgsOneof() {}

func (*FunctionInput_ArgsBlobId) isFunctionInput_ArgsOneof() {}

type FunctionMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId                 string                     `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	ParentInputId              string                     `protobuf:"bytes,2,opt,name=parent_input_id,json=parentInputId,proto3" json:"parent_input_id,omitempty"`
	ReturnExceptions           bool                       `protobuf:"varint,3,opt,name=return_exceptions,json=returnExceptions,proto3" json:"return_exceptions,omitempty"`
	FunctionCallType           FunctionCallType           `protobuf:"varint,4,opt,name=function_call_type,json=functionCallType,proto3,enum=modal.client.FunctionCallType" json:"function_call_type,omitempty"`
	PipelinedInputs            []*FunctionPutInputsItem   `protobuf:"bytes,5,rep,name=pipelined_inputs,json=pipelinedInputs,proto3" json:"pipelined_inputs,omitempty"`
	FunctionCallInvocationType FunctionCallInvocationType `protobuf:"varint,6,opt,name=function_call_invocation_type,json=functionCallInvocationType,proto3,enum=modal.client.FunctionCallInvocationType" json:"function_call_invocation_type,omitempty"`
}

func (x *FunctionMapRequest) Reset() {
	*x = FunctionMapRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMapRequest) ProtoMessage() {}

func (x *FunctionMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMapRequest.ProtoReflect.Descriptor instead.
func (*FunctionMapRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{133}
}

func (x *FunctionMapRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *FunctionMapRequest) GetParentInputId() string {
	if x != nil {
		return x.ParentInputId
	}
	return ""
}

func (x *FunctionMapRequest) GetReturnExceptions() bool {
	if x != nil {
		return x.ReturnExceptions
	}
	return false
}

func (x *FunctionMapRequest) GetFunctionCallType() FunctionCallType {
	if x != nil {
		return x.FunctionCallType
	}
	return FunctionCallType_FUNCTION_CALL_TYPE_UNSPECIFIED
}

func (x *FunctionMapRequest) GetPipelinedInputs() []*FunctionPutInputsItem {
	if x != nil {
		return x.PipelinedInputs
	}
	return nil
}

func (x *FunctionMapRequest) GetFunctionCallInvocationType() FunctionCallInvocationType {
	if x != nil {
		return x.FunctionCallInvocationType
	}
	return FunctionCallInvocationType_FUNCTION_CALL_INVOCATION_TYPE_UNSPECIFIED
}

type FunctionMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionCallId  string                           `protobuf:"bytes,1,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	PipelinedInputs []*FunctionPutInputsResponseItem `protobuf:"bytes,2,rep,name=pipelined_inputs,json=pipelinedInputs,proto3" json:"pipelined_inputs,omitempty"`
}

func (x *FunctionMapResponse) Reset() {
	*x = FunctionMapResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMapResponse) ProtoMessage() {}

func (x *FunctionMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMapResponse.ProtoReflect.Descriptor instead.
func (*FunctionMapResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{134}
}

func (x *FunctionMapResponse) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *FunctionMapResponse) GetPipelinedInputs() []*FunctionPutInputsResponseItem {
	if x != nil {
		return x.PipelinedInputs
	}
	return nil
}

type FunctionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretIds              []string             `protobuf:"bytes,1,rep,name=secret_ids,json=secretIds,proto3" json:"secret_ids,omitempty"`
	MountIds               []string             `protobuf:"bytes,2,rep,name=mount_ids,json=mountIds,proto3" json:"mount_ids,omitempty"` // Currently not supported
	Resources              *Resources           `protobuf:"bytes,3,opt,name=resources,proto3,oneof" json:"resources,omitempty"`
	RetryPolicy            *FunctionRetryPolicy `protobuf:"bytes,4,opt,name=retry_policy,json=retryPolicy,proto3,oneof" json:"retry_policy,omitempty"`
	ConcurrencyLimit       *uint32              `protobuf:"varint,5,opt,name=concurrency_limit,json=concurrencyLimit,proto3,oneof" json:"concurrency_limit,omitempty"`
	TimeoutSecs            *uint32              `protobuf:"varint,6,opt,name=timeout_secs,json=timeoutSecs,proto3,oneof" json:"timeout_secs,omitempty"`
	TaskIdleTimeoutSecs    *uint32              `protobuf:"varint,7,opt,name=task_idle_timeout_secs,json=taskIdleTimeoutSecs,proto3,oneof" json:"task_idle_timeout_secs,omitempty"`
	WarmPoolSize           *uint32              `protobuf:"varint,8,opt,name=warm_pool_size,json=warmPoolSize,proto3,oneof" json:"warm_pool_size,omitempty"`
	VolumeMounts           []*VolumeMount       `protobuf:"bytes,9,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	TargetConcurrentInputs *uint32              `protobuf:"varint,10,opt,name=target_concurrent_inputs,json=targetConcurrentInputs,proto3,oneof" json:"target_concurrent_inputs,omitempty"`
	ReplaceVolumeMounts    bool                 `protobuf:"varint,11,opt,name=replace_volume_mounts,json=replaceVolumeMounts,proto3" json:"replace_volume_mounts,omitempty"`
	ReplaceSecretIds       bool                 `protobuf:"varint,12,opt,name=replace_secret_ids,json=replaceSecretIds,proto3" json:"replace_secret_ids,omitempty"`
}

func (x *FunctionOptions) Reset() {
	*x = FunctionOptions{}
	mi := &file_pkg_modal_api_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionOptions) ProtoMessage() {}

func (x *FunctionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionOptions.ProtoReflect.Descriptor instead.
func (*FunctionOptions) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{135}
}

func (x *FunctionOptions) GetSecretIds() []string {
	if x != nil {
		return x.SecretIds
	}
	return nil
}

func (x *FunctionOptions) GetMountIds() []string {
	if x != nil {
		return x.MountIds
	}
	return nil
}

func (x *FunctionOptions) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *FunctionOptions) GetRetryPolicy() *FunctionRetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *FunctionOptions) GetConcurrencyLimit() uint32 {
	if x != nil && x.ConcurrencyLimit != nil {
		return *x.ConcurrencyLimit
	}
	return 0
}

func (x *FunctionOptions) GetTimeoutSecs() uint32 {
	if x != nil && x.TimeoutSecs != nil {
		return *x.TimeoutSecs
	}
	return 0
}

func (x *FunctionOptions) GetTaskIdleTimeoutSecs() uint32 {
	if x != nil && x.TaskIdleTimeoutSecs != nil {
		return *x.TaskIdleTimeoutSecs
	}
	return 0
}

func (x *FunctionOptions) GetWarmPoolSize() uint32 {
	if x != nil && x.WarmPoolSize != nil {
		return *x.WarmPoolSize
	}
	return 0
}

func (x *FunctionOptions) GetVolumeMounts() []*VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *FunctionOptions) GetTargetConcurrentInputs() uint32 {
	if x != nil && x.TargetConcurrentInputs != nil {
		return *x.TargetConcurrentInputs
	}
	return 0
}

func (x *FunctionOptions) GetReplaceVolumeMounts() bool {
	if x != nil {
		return x.ReplaceVolumeMounts
	}
	return false
}

func (x *FunctionOptions) GetReplaceSecretIds() bool {
	if x != nil {
		return x.ReplaceSecretIds
	}
	return false
}

type FunctionPrecreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              string                `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	FunctionName       string                `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	ExistingFunctionId string                `protobuf:"bytes,3,opt,name=existing_function_id,json=existingFunctionId,proto3" json:"existing_function_id,omitempty"`
	FunctionType       Function_FunctionType `protobuf:"varint,4,opt,name=function_type,json=functionType,proto3,enum=modal.client.Function_FunctionType" json:"function_type,omitempty"`
	WebhookConfig      *WebhookConfig        `protobuf:"bytes,5,opt,name=webhook_config,json=webhookConfig,proto3" json:"webhook_config,omitempty"`
	UseFunctionId      string                `protobuf:"bytes,6,opt,name=use_function_id,json=useFunctionId,proto3" json:"use_function_id,omitempty"` // for class methods - use this function id instead for invocations - the *referenced* function should have is_class=True
	UseMethodName      string                `protobuf:"bytes,7,opt,name=use_method_name,json=useMethodName,proto3" json:"use_method_name,omitempty"` // for class methods - this method name needs to be included in the FunctionInput
}

func (x *FunctionPrecreateRequest) Reset() {
	*x = FunctionPrecreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionPrecreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionPrecreateRequest) ProtoMessage() {}

func (x *FunctionPrecreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionPrecreateRequest.ProtoReflect.Descriptor instead.
func (*FunctionPrecreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{136}
}

func (x *FunctionPrecreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *FunctionPrecreateRequest) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionPrecreateRequest) GetExistingFunctionId() string {
	if x != nil {
		return x.ExistingFunctionId
	}
	return ""
}

func (x *FunctionPrecreateRequest) GetFunctionType() Function_FunctionType {
	if x != nil {
		return x.FunctionType
	}
	return Function_FUNCTION_TYPE_UNSPECIFIED
}

func (x *FunctionPrecreateRequest) GetWebhookConfig() *WebhookConfig {
	if x != nil {
		return x.WebhookConfig
	}
	return nil
}

func (x *FunctionPrecreateRequest) GetUseFunctionId() string {
	if x != nil {
		return x.UseFunctionId
	}
	return ""
}

func (x *FunctionPrecreateRequest) GetUseMethodName() string {
	if x != nil {
		return x.UseMethodName
	}
	return ""
}

type FunctionPrecreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId     string                  `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	HandleMetadata *FunctionHandleMetadata `protobuf:"bytes,2,opt,name=handle_metadata,json=handleMetadata,proto3" json:"handle_metadata,omitempty"`
}

func (x *FunctionPrecreateResponse) Reset() {
	*x = FunctionPrecreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionPrecreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionPrecreateResponse) ProtoMessage() {}

func (x *FunctionPrecreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionPrecreateResponse.ProtoReflect.Descriptor instead.
func (*FunctionPrecreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{137}
}

func (x *FunctionPrecreateResponse) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *FunctionPrecreateResponse) GetHandleMetadata() *FunctionHandleMetadata {
	if x != nil {
		return x.HandleMetadata
	}
	return nil
}

type FunctionPutInputsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx   int32          `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Input *FunctionInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *FunctionPutInputsItem) Reset() {
	*x = FunctionPutInputsItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionPutInputsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionPutInputsItem) ProtoMessage() {}

func (x *FunctionPutInputsItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionPutInputsItem.ProtoReflect.Descriptor instead.
func (*FunctionPutInputsItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{138}
}

func (x *FunctionPutInputsItem) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *FunctionPutInputsItem) GetInput() *FunctionInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type FunctionPutInputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId     string                   `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	FunctionCallId string                   `protobuf:"bytes,3,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	Inputs         []*FunctionPutInputsItem `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *FunctionPutInputsRequest) Reset() {
	*x = FunctionPutInputsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionPutInputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionPutInputsRequest) ProtoMessage() {}

func (x *FunctionPutInputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionPutInputsRequest.ProtoReflect.Descriptor instead.
func (*FunctionPutInputsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{139}
}

func (x *FunctionPutInputsRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *FunctionPutInputsRequest) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *FunctionPutInputsRequest) GetInputs() []*FunctionPutInputsItem {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type FunctionPutInputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs []*FunctionPutInputsResponseItem `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *FunctionPutInputsResponse) Reset() {
	*x = FunctionPutInputsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionPutInputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionPutInputsResponse) ProtoMessage() {}

func (x *FunctionPutInputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionPutInputsResponse.ProtoReflect.Descriptor instead.
func (*FunctionPutInputsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{140}
}

func (x *FunctionPutInputsResponse) GetInputs() []*FunctionPutInputsResponseItem {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type FunctionPutInputsResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx     int32  `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	InputId string `protobuf:"bytes,2,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *FunctionPutInputsResponseItem) Reset() {
	*x = FunctionPutInputsResponseItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionPutInputsResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionPutInputsResponseItem) ProtoMessage() {}

func (x *FunctionPutInputsResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionPutInputsResponseItem.ProtoReflect.Descriptor instead.
func (*FunctionPutInputsResponseItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{141}
}

func (x *FunctionPutInputsResponseItem) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *FunctionPutInputsResponseItem) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

type FunctionPutOutputsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputId         string         `protobuf:"bytes,1,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	Result          *GenericResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	InputStartedAt  float64        `protobuf:"fixed64,3,opt,name=input_started_at,json=inputStartedAt,proto3" json:"input_started_at,omitempty"`
	OutputCreatedAt float64        `protobuf:"fixed64,4,opt,name=output_created_at,json=outputCreatedAt,proto3" json:"output_created_at,omitempty"`
	GenIndex        int32          `protobuf:"varint,6,opt,name=gen_index,json=genIndex,proto3" json:"gen_index,omitempty"`                                    // Deprecated, only used in client version <0.57
	DataFormat      DataFormat     `protobuf:"varint,7,opt,name=data_format,json=dataFormat,proto3,enum=modal.client.DataFormat" json:"data_format,omitempty"` // for result.data_oneof
}

func (x *FunctionPutOutputsItem) Reset() {
	*x = FunctionPutOutputsItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionPutOutputsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionPutOutputsItem) ProtoMessage() {}

func (x *FunctionPutOutputsItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionPutOutputsItem.ProtoReflect.Descriptor instead.
func (*FunctionPutOutputsItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{142}
}

func (x *FunctionPutOutputsItem) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *FunctionPutOutputsItem) GetResult() *GenericResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *FunctionPutOutputsItem) GetInputStartedAt() float64 {
	if x != nil {
		return x.InputStartedAt
	}
	return 0
}

func (x *FunctionPutOutputsItem) GetOutputCreatedAt() float64 {
	if x != nil {
		return x.OutputCreatedAt
	}
	return 0
}

func (x *FunctionPutOutputsItem) GetGenIndex() int32 {
	if x != nil {
		return x.GenIndex
	}
	return 0
}

func (x *FunctionPutOutputsItem) GetDataFormat() DataFormat {
	if x != nil {
		return x.DataFormat
	}
	return DataFormat_DATA_FORMAT_UNSPECIFIED
}

type FunctionPutOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs     []*FunctionPutOutputsItem `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	RequestedAt float64                   `protobuf:"fixed64,5,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"` // Used for waypoints.
}

func (x *FunctionPutOutputsRequest) Reset() {
	*x = FunctionPutOutputsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionPutOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionPutOutputsRequest) ProtoMessage() {}

func (x *FunctionPutOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionPutOutputsRequest.ProtoReflect.Descriptor instead.
func (*FunctionPutOutputsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{143}
}

func (x *FunctionPutOutputsRequest) GetOutputs() []*FunctionPutOutputsItem {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *FunctionPutOutputsRequest) GetRequestedAt() float64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

type FunctionRetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackoffCoefficient float32 `protobuf:"fixed32,1,opt,name=backoff_coefficient,json=backoffCoefficient,proto3" json:"backoff_coefficient,omitempty"`
	InitialDelayMs     uint32  `protobuf:"varint,2,opt,name=initial_delay_ms,json=initialDelayMs,proto3" json:"initial_delay_ms,omitempty"`
	MaxDelayMs         uint32  `protobuf:"varint,3,opt,name=max_delay_ms,json=maxDelayMs,proto3" json:"max_delay_ms,omitempty"`
	// NOTE: two-byte field number not used for special reason. copy-paste error. Ref: PR #2542
	Retries uint32 `protobuf:"varint,18,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (x *FunctionRetryPolicy) Reset() {
	*x = FunctionRetryPolicy{}
	mi := &file_pkg_modal_api_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionRetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionRetryPolicy) ProtoMessage() {}

func (x *FunctionRetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionRetryPolicy.ProtoReflect.Descriptor instead.
func (*FunctionRetryPolicy) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{144}
}

func (x *FunctionRetryPolicy) GetBackoffCoefficient() float32 {
	if x != nil {
		return x.BackoffCoefficient
	}
	return 0
}

func (x *FunctionRetryPolicy) GetInitialDelayMs() uint32 {
	if x != nil {
		return x.InitialDelayMs
	}
	return 0
}

func (x *FunctionRetryPolicy) GetMaxDelayMs() uint32 {
	if x != nil {
		return x.MaxDelayMs
	}
	return 0
}

func (x *FunctionRetryPolicy) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

type FunctionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backlog        uint32 `protobuf:"varint,1,opt,name=backlog,proto3" json:"backlog,omitempty"`
	NumActiveTasks uint32 `protobuf:"varint,2,opt,name=num_active_tasks,json=numActiveTasks,proto3" json:"num_active_tasks,omitempty"`
	NumTotalTasks  uint32 `protobuf:"varint,3,opt,name=num_total_tasks,json=numTotalTasks,proto3" json:"num_total_tasks,omitempty"`
}

func (x *FunctionStats) Reset() {
	*x = FunctionStats{}
	mi := &file_pkg_modal_api_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionStats) ProtoMessage() {}

func (x *FunctionStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionStats.ProtoReflect.Descriptor instead.
func (*FunctionStats) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{145}
}

func (x *FunctionStats) GetBacklog() uint32 {
	if x != nil {
		return x.Backlog
	}
	return 0
}

func (x *FunctionStats) GetNumActiveTasks() uint32 {
	if x != nil {
		return x.NumActiveTasks
	}
	return 0
}

func (x *FunctionStats) GetNumTotalTasks() uint32 {
	if x != nil {
		return x.NumTotalTasks
	}
	return 0
}

type FunctionUpdateSchedulingParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionId           string `protobuf:"bytes,1,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	WarmPoolSizeOverride uint32 `protobuf:"varint,2,opt,name=warm_pool_size_override,json=warmPoolSizeOverride,proto3" json:"warm_pool_size_override,omitempty"`
}

func (x *FunctionUpdateSchedulingParamsRequest) Reset() {
	*x = FunctionUpdateSchedulingParamsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionUpdateSchedulingParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionUpdateSchedulingParamsRequest) ProtoMessage() {}

func (x *FunctionUpdateSchedulingParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionUpdateSchedulingParamsRequest.ProtoReflect.Descriptor instead.
func (*FunctionUpdateSchedulingParamsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{146}
}

func (x *FunctionUpdateSchedulingParamsRequest) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *FunctionUpdateSchedulingParamsRequest) GetWarmPoolSizeOverride() uint32 {
	if x != nil {
		return x.WarmPoolSizeOverride
	}
	return 0
}

type FunctionUpdateSchedulingParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FunctionUpdateSchedulingParamsResponse) Reset() {
	*x = FunctionUpdateSchedulingParamsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionUpdateSchedulingParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionUpdateSchedulingParamsResponse) ProtoMessage() {}

func (x *FunctionUpdateSchedulingParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionUpdateSchedulingParamsResponse.ProtoReflect.Descriptor instead.
func (*FunctionUpdateSchedulingParamsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{147}
}

type GPUConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   GPUType `protobuf:"varint,1,opt,name=type,proto3,enum=modal.client.GPUType" json:"type,omitempty"`
	Count  uint32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Memory uint32  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *GPUConfig) Reset() {
	*x = GPUConfig{}
	mi := &file_pkg_modal_api_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPUConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUConfig) ProtoMessage() {}

func (x *GPUConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUConfig.ProtoReflect.Descriptor instead.
func (*GPUConfig) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{148}
}

func (x *GPUConfig) GetType() GPUType {
	if x != nil {
		return x.Type
	}
	return GPUType_GPU_TYPE_UNSPECIFIED
}

func (x *GPUConfig) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GPUConfig) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type GeneratorDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemsTotal uint64 `protobuf:"varint,1,opt,name=items_total,json=itemsTotal,proto3" json:"items_total,omitempty"`
}

func (x *GeneratorDone) Reset() {
	*x = GeneratorDone{}
	mi := &file_pkg_modal_api_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratorDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratorDone) ProtoMessage() {}

func (x *GeneratorDone) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratorDone.ProtoReflect.Descriptor instead.
func (*GeneratorDone) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{149}
}

func (x *GeneratorDone) GetItemsTotal() uint64 {
	if x != nil {
		return x.ItemsTotal
	}
	return 0
}

type GenericResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       GenericResult_GenericStatus `protobuf:"varint,1,opt,name=status,proto3,enum=modal.client.GenericResult_GenericStatus" json:"status,omitempty"` // Status of the task or function output.
	Exception    string                      `protobuf:"bytes,2,opt,name=exception,proto3" json:"exception,omitempty"`                                          // Exception message for failures, if available.
	Exitcode     int32                       `protobuf:"varint,3,opt,name=exitcode,proto3" json:"exitcode,omitempty"`                                           // Status code of the container entrypoint or builder process if it terminates unexpectedly.
	Traceback    string                      `protobuf:"bytes,4,opt,name=traceback,proto3" json:"traceback,omitempty"`                                          // String value of the Python traceback.
	SerializedTb []byte                      `protobuf:"bytes,11,opt,name=serialized_tb,json=serializedTb,proto3" json:"serialized_tb,omitempty"`               // Pickled traceback object.
	TbLineCache  []byte                      `protobuf:"bytes,12,opt,name=tb_line_cache,json=tbLineCache,proto3" json:"tb_line_cache,omitempty"`                // Pickled line cache for traceback object.
	// Types that are assignable to DataOneof:
	//
	//	*GenericResult_Data
	//	*GenericResult_DataBlobId
	DataOneof         isGenericResult_DataOneof     `protobuf_oneof:"data_oneof"`
	GenStatus         GenericResult_GeneratorStatus `protobuf:"varint,7,opt,name=gen_status,json=genStatus,proto3,enum=modal.client.GenericResult_GeneratorStatus" json:"gen_status,omitempty"` // Deprecated, only used in client version <0.57
	PropagationReason string                        `protobuf:"bytes,13,opt,name=propagation_reason,json=propagationReason,proto3" json:"propagation_reason,omitempty"`                         // (?)
}

func (x *GenericResult) Reset() {
	*x = GenericResult{}
	mi := &file_pkg_modal_api_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResult) ProtoMessage() {}

func (x *GenericResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResult.ProtoReflect.Descriptor instead.
func (*GenericResult) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{150}
}

func (x *GenericResult) GetStatus() GenericResult_GenericStatus {
	if x != nil {
		return x.Status
	}
	return GenericResult_GENERIC_STATUS_UNSPECIFIED
}

func (x *GenericResult) GetException() string {
	if x != nil {
		return x.Exception
	}
	return ""
}

func (x *GenericResult) GetExitcode() int32 {
	if x != nil {
		return x.Exitcode
	}
	return 0
}

func (x *GenericResult) GetTraceback() string {
	if x != nil {
		return x.Traceback
	}
	return ""
}

func (x *GenericResult) GetSerializedTb() []byte {
	if x != nil {
		return x.SerializedTb
	}
	return nil
}

func (x *GenericResult) GetTbLineCache() []byte {
	if x != nil {
		return x.TbLineCache
	}
	return nil
}

func (m *GenericResult) GetDataOneof() isGenericResult_DataOneof {
	if m != nil {
		return m.DataOneof
	}
	return nil
}

func (x *GenericResult) GetData() []byte {
	if x, ok := x.GetDataOneof().(*GenericResult_Data); ok {
		return x.Data
	}
	return nil
}

func (x *GenericResult) GetDataBlobId() string {
	if x, ok := x.GetDataOneof().(*GenericResult_DataBlobId); ok {
		return x.DataBlobId
	}
	return ""
}

func (x *GenericResult) GetGenStatus() GenericResult_GeneratorStatus {
	if x != nil {
		return x.GenStatus
	}
	return GenericResult_GENERATOR_STATUS_UNSPECIFIED
}

func (x *GenericResult) GetPropagationReason() string {
	if x != nil {
		return x.PropagationReason
	}
	return ""
}

type isGenericResult_DataOneof interface {
	isGenericResult_DataOneof()
}

type GenericResult_Data struct {
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3,oneof"` // Inline data of the result.
}

type GenericResult_DataBlobId struct {
	DataBlobId string `protobuf:"bytes,10,opt,name=data_blob_id,json=dataBlobId,proto3,oneof"` // Blob ID for large data.
}

func (*GenericResult_Data) isGenericResult_DataOneof() {}

func (*GenericResult_DataBlobId) isGenericResult_DataOneof() {}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseImages         []*BaseImage        `protobuf:"bytes,5,rep,name=base_images,json=baseImages,proto3" json:"base_images,omitempty"`
	DockerfileCommands []string            `protobuf:"bytes,6,rep,name=dockerfile_commands,json=dockerfileCommands,proto3" json:"dockerfile_commands,omitempty"`
	ContextFiles       []*ImageContextFile `protobuf:"bytes,7,rep,name=context_files,json=contextFiles,proto3" json:"context_files,omitempty"`
	Version            string              `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
	SecretIds          []string            `protobuf:"bytes,12,rep,name=secret_ids,json=secretIds,proto3" json:"secret_ids,omitempty"`
	// Part of Image definition, because presence of GPU drivers
	// affects the image that's built.
	// Note: field 13 is getting replaced field 16. The client now sends both fields,
	// but the server still only reads field 13.
	Gpu                  bool                 `protobuf:"varint,13,opt,name=gpu,proto3" json:"gpu,omitempty"`
	ContextMountId       string               `protobuf:"bytes,15,opt,name=context_mount_id,json=contextMountId,proto3" json:"context_mount_id,omitempty"`
	GpuConfig            *GPUConfig           `protobuf:"bytes,16,opt,name=gpu_config,json=gpuConfig,proto3" json:"gpu_config,omitempty"`
	ImageRegistryConfig  *ImageRegistryConfig `protobuf:"bytes,17,opt,name=image_registry_config,json=imageRegistryConfig,proto3" json:"image_registry_config,omitempty"`
	BuildFunctionDef     string               `protobuf:"bytes,14,opt,name=build_function_def,json=buildFunctionDef,proto3" json:"build_function_def,omitempty"`             // deprecated after 0.58.96
	BuildFunctionGlobals []byte               `protobuf:"bytes,18,opt,name=build_function_globals,json=buildFunctionGlobals,proto3" json:"build_function_globals,omitempty"` // deprecated after 0.58.96
	// If set, overrides the runtime used by the function. Specify either "runc" or "gvisor".
	Runtime string `protobuf:"bytes,19,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// Not included in image definition checksum as debug features do not affect built image.
	RuntimeDebug  bool           `protobuf:"varint,20,opt,name=runtime_debug,json=runtimeDebug,proto3" json:"runtime_debug,omitempty"`
	BuildFunction *BuildFunction `protobuf:"bytes,21,opt,name=build_function,json=buildFunction,proto3" json:"build_function,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_pkg_modal_api_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{151}
}

func (x *Image) GetBaseImages() []*BaseImage {
	if x != nil {
		return x.BaseImages
	}
	return nil
}

func (x *Image) GetDockerfileCommands() []string {
	if x != nil {
		return x.DockerfileCommands
	}
	return nil
}

func (x *Image) GetContextFiles() []*ImageContextFile {
	if x != nil {
		return x.ContextFiles
	}
	return nil
}

func (x *Image) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Image) GetSecretIds() []string {
	if x != nil {
		return x.SecretIds
	}
	return nil
}

func (x *Image) GetGpu() bool {
	if x != nil {
		return x.Gpu
	}
	return false
}

func (x *Image) GetContextMountId() string {
	if x != nil {
		return x.ContextMountId
	}
	return ""
}

func (x *Image) GetGpuConfig() *GPUConfig {
	if x != nil {
		return x.GpuConfig
	}
	return nil
}

func (x *Image) GetImageRegistryConfig() *ImageRegistryConfig {
	if x != nil {
		return x.ImageRegistryConfig
	}
	return nil
}

func (x *Image) GetBuildFunctionDef() string {
	if x != nil {
		return x.BuildFunctionDef
	}
	return ""
}

func (x *Image) GetBuildFunctionGlobals() []byte {
	if x != nil {
		return x.BuildFunctionGlobals
	}
	return nil
}

func (x *Image) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *Image) GetRuntimeDebug() bool {
	if x != nil {
		return x.RuntimeDebug
	}
	return false
}

func (x *Image) GetBuildFunction() *BuildFunction {
	if x != nil {
		return x.BuildFunction
	}
	return nil
}

type ImageContextFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ImageContextFile) Reset() {
	*x = ImageContextFile{}
	mi := &file_pkg_modal_api_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageContextFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageContextFile) ProtoMessage() {}

func (x *ImageContextFile) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageContextFile.ProtoReflect.Descriptor instead.
func (*ImageContextFile) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{152}
}

func (x *ImageContextFile) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ImageContextFile) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImageGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image           *Image              `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	AppId           string              `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ExistingImageId string              `protobuf:"bytes,5,opt,name=existing_image_id,json=existingImageId,proto3" json:"existing_image_id,omitempty"` // ignored
	BuildFunctionId string              `protobuf:"bytes,6,opt,name=build_function_id,json=buildFunctionId,proto3" json:"build_function_id,omitempty"`
	ForceBuild      bool                `protobuf:"varint,7,opt,name=force_build,json=forceBuild,proto3" json:"force_build,omitempty"`
	Namespace       DeploymentNamespace `protobuf:"varint,8,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	BuilderVersion  string              `protobuf:"bytes,9,opt,name=builder_version,json=builderVersion,proto3" json:"builder_version,omitempty"`
	// Only admins can publish global images, but this provides an extra failsafe
	AllowGlobalDeployment bool `protobuf:"varint,10,opt,name=allow_global_deployment,json=allowGlobalDeployment,proto3" json:"allow_global_deployment,omitempty"`
}

func (x *ImageGetOrCreateRequest) Reset() {
	*x = ImageGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageGetOrCreateRequest) ProtoMessage() {}

func (x *ImageGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*ImageGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{153}
}

func (x *ImageGetOrCreateRequest) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ImageGetOrCreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ImageGetOrCreateRequest) GetExistingImageId() string {
	if x != nil {
		return x.ExistingImageId
	}
	return ""
}

func (x *ImageGetOrCreateRequest) GetBuildFunctionId() string {
	if x != nil {
		return x.BuildFunctionId
	}
	return ""
}

func (x *ImageGetOrCreateRequest) GetForceBuild() bool {
	if x != nil {
		return x.ForceBuild
	}
	return false
}

func (x *ImageGetOrCreateRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *ImageGetOrCreateRequest) GetBuilderVersion() string {
	if x != nil {
		return x.BuilderVersion
	}
	return ""
}

func (x *ImageGetOrCreateRequest) GetAllowGlobalDeployment() bool {
	if x != nil {
		return x.AllowGlobalDeployment
	}
	return false
}

type ImageGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *ImageGetOrCreateResponse) Reset() {
	*x = ImageGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageGetOrCreateResponse) ProtoMessage() {}

func (x *ImageGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*ImageGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{154}
}

func (x *ImageGetOrCreateResponse) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type ImageJoinStreamingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId                string  `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Timeout                float32 `protobuf:"fixed32,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	LastEntryId            string  `protobuf:"bytes,3,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
	IncludeLogsForFinished bool    `protobuf:"varint,4,opt,name=include_logs_for_finished,json=includeLogsForFinished,proto3" json:"include_logs_for_finished,omitempty"`
}

func (x *ImageJoinStreamingRequest) Reset() {
	*x = ImageJoinStreamingRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageJoinStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageJoinStreamingRequest) ProtoMessage() {}

func (x *ImageJoinStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageJoinStreamingRequest.ProtoReflect.Descriptor instead.
func (*ImageJoinStreamingRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{155}
}

func (x *ImageJoinStreamingRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ImageJoinStreamingRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ImageJoinStreamingRequest) GetLastEntryId() string {
	if x != nil {
		return x.LastEntryId
	}
	return ""
}

func (x *ImageJoinStreamingRequest) GetIncludeLogsForFinished() bool {
	if x != nil {
		return x.IncludeLogsForFinished
	}
	return false
}

type ImageJoinStreamingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *GenericResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	TaskLogs []*TaskLogs    `protobuf:"bytes,2,rep,name=task_logs,json=taskLogs,proto3" json:"task_logs,omitempty"`
	EntryId  string         `protobuf:"bytes,3,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	Eof      bool           `protobuf:"varint,4,opt,name=eof,proto3" json:"eof,omitempty"`
}

func (x *ImageJoinStreamingResponse) Reset() {
	*x = ImageJoinStreamingResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageJoinStreamingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageJoinStreamingResponse) ProtoMessage() {}

func (x *ImageJoinStreamingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageJoinStreamingResponse.ProtoReflect.Descriptor instead.
func (*ImageJoinStreamingResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{156}
}

func (x *ImageJoinStreamingResponse) GetResult() *GenericResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ImageJoinStreamingResponse) GetTaskLogs() []*TaskLogs {
	if x != nil {
		return x.TaskLogs
	}
	return nil
}

func (x *ImageJoinStreamingResponse) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *ImageJoinStreamingResponse) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

type ImageRegistryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistryAuthType RegistryAuthType `protobuf:"varint,1,opt,name=registry_auth_type,json=registryAuthType,proto3,enum=modal.client.RegistryAuthType" json:"registry_auth_type,omitempty"`
	SecretId         string           `protobuf:"bytes,2,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
}

func (x *ImageRegistryConfig) Reset() {
	*x = ImageRegistryConfig{}
	mi := &file_pkg_modal_api_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageRegistryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRegistryConfig) ProtoMessage() {}

func (x *ImageRegistryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRegistryConfig.ProtoReflect.Descriptor instead.
func (*ImageRegistryConfig) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{157}
}

func (x *ImageRegistryConfig) GetRegistryAuthType() RegistryAuthType {
	if x != nil {
		return x.RegistryAuthType
	}
	return RegistryAuthType_REGISTRY_AUTH_TYPE_UNSPECIFIED
}

func (x *ImageRegistryConfig) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

type InputCallGraphInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputId        string                      `protobuf:"bytes,1,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	Status         GenericResult_GenericStatus `protobuf:"varint,2,opt,name=status,proto3,enum=modal.client.GenericResult_GenericStatus" json:"status,omitempty"`
	FunctionCallId string                      `protobuf:"bytes,3,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	TaskId         string                      `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *InputCallGraphInfo) Reset() {
	*x = InputCallGraphInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputCallGraphInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCallGraphInfo) ProtoMessage() {}

func (x *InputCallGraphInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCallGraphInfo.ProtoReflect.Descriptor instead.
func (*InputCallGraphInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{158}
}

func (x *InputCallGraphInfo) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *InputCallGraphInfo) GetStatus() GenericResult_GenericStatus {
	if x != nil {
		return x.Status
	}
	return GenericResult_GENERIC_STATUS_UNSPECIFIED
}

func (x *InputCallGraphInfo) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *InputCallGraphInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type InputCategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  int32        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Latest []*InputInfo `protobuf:"bytes,2,rep,name=latest,proto3" json:"latest,omitempty"`
}

func (x *InputCategoryInfo) Reset() {
	*x = InputCategoryInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputCategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputCategoryInfo) ProtoMessage() {}

func (x *InputCategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputCategoryInfo.ProtoReflect.Descriptor instead.
func (*InputCategoryInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{159}
}

func (x *InputCategoryInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *InputCategoryInfo) GetLatest() []*InputInfo {
	if x != nil {
		return x.Latest
	}
	return nil
}

type InputInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputId         string  `protobuf:"bytes,1,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	Idx             int32   `protobuf:"varint,2,opt,name=idx,proto3" json:"idx,omitempty"`
	TaskId          string  `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	StartedAt       float64 `protobuf:"fixed64,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt      float64 `protobuf:"fixed64,5,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	TaskStartupTime float64 `protobuf:"fixed64,6,opt,name=task_startup_time,json=taskStartupTime,proto3" json:"task_startup_time,omitempty"`
	TaskFirstInput  bool    `protobuf:"varint,7,opt,name=task_first_input,json=taskFirstInput,proto3" json:"task_first_input,omitempty"`
}

func (x *InputInfo) Reset() {
	*x = InputInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputInfo) ProtoMessage() {}

func (x *InputInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputInfo.ProtoReflect.Descriptor instead.
func (*InputInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{160}
}

func (x *InputInfo) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *InputInfo) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *InputInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *InputInfo) GetStartedAt() float64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *InputInfo) GetFinishedAt() float64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *InputInfo) GetTaskStartupTime() float64 {
	if x != nil {
		return x.TaskStartupTime
	}
	return 0
}

func (x *InputInfo) GetTaskFirstInput() bool {
	if x != nil {
		return x.TaskFirstInput
	}
	return false
}

type MountFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename  string  `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Sha256Hex string  `protobuf:"bytes,3,opt,name=sha256_hex,json=sha256Hex,proto3" json:"sha256_hex,omitempty"` // SHA-256 checksum of the file.
	Size      *uint64 `protobuf:"varint,4,opt,name=size,proto3,oneof" json:"size,omitempty"`                     // Size of the file in bytes — ignored in MountBuild().
	Mode      *uint32 `protobuf:"varint,5,opt,name=mode,proto3,oneof" json:"mode,omitempty"`                     // Unix file permission bits `st_mode`.
}

func (x *MountFile) Reset() {
	*x = MountFile{}
	mi := &file_pkg_modal_api_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountFile) ProtoMessage() {}

func (x *MountFile) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountFile.ProtoReflect.Descriptor instead.
func (*MountFile) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{161}
}

func (x *MountFile) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *MountFile) GetSha256Hex() string {
	if x != nil {
		return x.Sha256Hex
	}
	return ""
}

func (x *MountFile) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *MountFile) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type MountGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName     string              `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Namespace          DeploymentNamespace `protobuf:"varint,2,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName    string              `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	ObjectCreationType ObjectCreationType  `protobuf:"varint,4,opt,name=object_creation_type,json=objectCreationType,proto3,enum=modal.client.ObjectCreationType" json:"object_creation_type,omitempty"`
	Files              []*MountFile        `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	AppId              string              `protobuf:"bytes,6,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"` // only used with OBJECT_CREATION_TYPE_ANONYMOUS_OWNED_BY_APP
}

func (x *MountGetOrCreateRequest) Reset() {
	*x = MountGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountGetOrCreateRequest) ProtoMessage() {}

func (x *MountGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*MountGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{162}
}

func (x *MountGetOrCreateRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *MountGetOrCreateRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *MountGetOrCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *MountGetOrCreateRequest) GetObjectCreationType() ObjectCreationType {
	if x != nil {
		return x.ObjectCreationType
	}
	return ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED
}

func (x *MountGetOrCreateRequest) GetFiles() []*MountFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *MountGetOrCreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type MountGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountId        string               `protobuf:"bytes,1,opt,name=mount_id,json=mountId,proto3" json:"mount_id,omitempty"`
	HandleMetadata *MountHandleMetadata `protobuf:"bytes,2,opt,name=handle_metadata,json=handleMetadata,proto3" json:"handle_metadata,omitempty"`
}

func (x *MountGetOrCreateResponse) Reset() {
	*x = MountGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountGetOrCreateResponse) ProtoMessage() {}

func (x *MountGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*MountGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{163}
}

func (x *MountGetOrCreateResponse) GetMountId() string {
	if x != nil {
		return x.MountId
	}
	return ""
}

func (x *MountGetOrCreateResponse) GetHandleMetadata() *MountHandleMetadata {
	if x != nil {
		return x.HandleMetadata
	}
	return nil
}

type MountHandleMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentChecksumSha256Hex string `protobuf:"bytes,1,opt,name=content_checksum_sha256_hex,json=contentChecksumSha256Hex,proto3" json:"content_checksum_sha256_hex,omitempty"`
}

func (x *MountHandleMetadata) Reset() {
	*x = MountHandleMetadata{}
	mi := &file_pkg_modal_api_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountHandleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountHandleMetadata) ProtoMessage() {}

func (x *MountHandleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountHandleMetadata.ProtoReflect.Descriptor instead.
func (*MountHandleMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{164}
}

func (x *MountHandleMetadata) GetContentChecksumSha256Hex() string {
	if x != nil {
		return x.ContentChecksumSha256Hex
	}
	return ""
}

type MountPutFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256Hex string `protobuf:"bytes,2,opt,name=sha256_hex,json=sha256Hex,proto3" json:"sha256_hex,omitempty"`
	// Types that are assignable to DataOneof:
	//
	//	*MountPutFileRequest_Data
	//	*MountPutFileRequest_DataBlobId
	DataOneof isMountPutFileRequest_DataOneof `protobuf_oneof:"data_oneof"`
}

func (x *MountPutFileRequest) Reset() {
	*x = MountPutFileRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountPutFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPutFileRequest) ProtoMessage() {}

func (x *MountPutFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPutFileRequest.ProtoReflect.Descriptor instead.
func (*MountPutFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{165}
}

func (x *MountPutFileRequest) GetSha256Hex() string {
	if x != nil {
		return x.Sha256Hex
	}
	return ""
}

func (m *MountPutFileRequest) GetDataOneof() isMountPutFileRequest_DataOneof {
	if m != nil {
		return m.DataOneof
	}
	return nil
}

func (x *MountPutFileRequest) GetData() []byte {
	if x, ok := x.GetDataOneof().(*MountPutFileRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (x *MountPutFileRequest) GetDataBlobId() string {
	if x, ok := x.GetDataOneof().(*MountPutFileRequest_DataBlobId); ok {
		return x.DataBlobId
	}
	return ""
}

type isMountPutFileRequest_DataOneof interface {
	isMountPutFileRequest_DataOneof()
}

type MountPutFileRequest_Data struct {
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

type MountPutFileRequest_DataBlobId struct {
	DataBlobId string `protobuf:"bytes,5,opt,name=data_blob_id,json=dataBlobId,proto3,oneof"`
}

func (*MountPutFileRequest_Data) isMountPutFileRequest_DataOneof() {}

func (*MountPutFileRequest_DataBlobId) isMountPutFileRequest_DataOneof() {}

type MountPutFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *MountPutFileResponse) Reset() {
	*x = MountPutFileResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MountPutFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPutFileResponse) ProtoMessage() {}

func (x *MountPutFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPutFileResponse.ProtoReflect.Descriptor instead.
func (*MountPutFileResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{166}
}

func (x *MountPutFileResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type MultiPartUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartLength    int64    `protobuf:"varint,1,opt,name=part_length,json=partLength,proto3" json:"part_length,omitempty"` // split upload based on this part length - all except the last part must have this length
	UploadUrls    []string `protobuf:"bytes,2,rep,name=upload_urls,json=uploadUrls,proto3" json:"upload_urls,omitempty"`
	CompletionUrl string   `protobuf:"bytes,3,opt,name=completion_url,json=completionUrl,proto3" json:"completion_url,omitempty"`
}

func (x *MultiPartUpload) Reset() {
	*x = MultiPartUpload{}
	mi := &file_pkg_modal_api_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiPartUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiPartUpload) ProtoMessage() {}

func (x *MultiPartUpload) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiPartUpload.ProtoReflect.Descriptor instead.
func (*MultiPartUpload) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{167}
}

func (x *MultiPartUpload) GetPartLength() int64 {
	if x != nil {
		return x.PartLength
	}
	return 0
}

func (x *MultiPartUpload) GetUploadUrls() []string {
	if x != nil {
		return x.UploadUrls
	}
	return nil
}

func (x *MultiPartUpload) GetCompletionUrl() string {
	if x != nil {
		return x.CompletionUrl
	}
	return ""
}

type NetworkAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkAccessType NetworkAccess_NetworkAccessType `protobuf:"varint,1,opt,name=network_access_type,json=networkAccessType,proto3,enum=modal.client.NetworkAccess_NetworkAccessType" json:"network_access_type,omitempty"`
	AllowedCidrs      []string                        `protobuf:"bytes,2,rep,name=allowed_cidrs,json=allowedCidrs,proto3" json:"allowed_cidrs,omitempty"`
}

func (x *NetworkAccess) Reset() {
	*x = NetworkAccess{}
	mi := &file_pkg_modal_api_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkAccess) ProtoMessage() {}

func (x *NetworkAccess) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkAccess.ProtoReflect.Descriptor instead.
func (*NetworkAccess) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{168}
}

func (x *NetworkAccess) GetNetworkAccessType() NetworkAccess_NetworkAccessType {
	if x != nil {
		return x.NetworkAccessType
	}
	return NetworkAccess_UNSPECIFIED
}

func (x *NetworkAccess) GetAllowedCidrs() []string {
	if x != nil {
		return x.AllowedCidrs
	}
	return nil
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Types that are assignable to HandleMetadataOneof:
	//
	//	*Object_FunctionHandleMetadata
	//	*Object_MountHandleMetadata
	//	*Object_ClassHandleMetadata
	//	*Object_SandboxHandleMetadata
	HandleMetadataOneof isObject_HandleMetadataOneof `protobuf_oneof:"handle_metadata_oneof"`
}

func (x *Object) Reset() {
	*x = Object{}
	mi := &file_pkg_modal_api_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{169}
}

func (x *Object) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (m *Object) GetHandleMetadataOneof() isObject_HandleMetadataOneof {
	if m != nil {
		return m.HandleMetadataOneof
	}
	return nil
}

func (x *Object) GetFunctionHandleMetadata() *FunctionHandleMetadata {
	if x, ok := x.GetHandleMetadataOneof().(*Object_FunctionHandleMetadata); ok {
		return x.FunctionHandleMetadata
	}
	return nil
}

func (x *Object) GetMountHandleMetadata() *MountHandleMetadata {
	if x, ok := x.GetHandleMetadataOneof().(*Object_MountHandleMetadata); ok {
		return x.MountHandleMetadata
	}
	return nil
}

func (x *Object) GetClassHandleMetadata() *ClassHandleMetadata {
	if x, ok := x.GetHandleMetadataOneof().(*Object_ClassHandleMetadata); ok {
		return x.ClassHandleMetadata
	}
	return nil
}

func (x *Object) GetSandboxHandleMetadata() *SandboxHandleMetadata {
	if x, ok := x.GetHandleMetadataOneof().(*Object_SandboxHandleMetadata); ok {
		return x.SandboxHandleMetadata
	}
	return nil
}

type isObject_HandleMetadataOneof interface {
	isObject_HandleMetadataOneof()
}

type Object_FunctionHandleMetadata struct {
	FunctionHandleMetadata *FunctionHandleMetadata `protobuf:"bytes,3,opt,name=function_handle_metadata,json=functionHandleMetadata,proto3,oneof"`
}

type Object_MountHandleMetadata struct {
	MountHandleMetadata *MountHandleMetadata `protobuf:"bytes,4,opt,name=mount_handle_metadata,json=mountHandleMetadata,proto3,oneof"`
}

type Object_ClassHandleMetadata struct {
	ClassHandleMetadata *ClassHandleMetadata `protobuf:"bytes,5,opt,name=class_handle_metadata,json=classHandleMetadata,proto3,oneof"`
}

type Object_SandboxHandleMetadata struct {
	SandboxHandleMetadata *SandboxHandleMetadata `protobuf:"bytes,6,opt,name=sandbox_handle_metadata,json=sandboxHandleMetadata,proto3,oneof"`
}

func (*Object_FunctionHandleMetadata) isObject_HandleMetadataOneof() {}

func (*Object_MountHandleMetadata) isObject_HandleMetadataOneof() {}

func (*Object_ClassHandleMetadata) isObject_HandleMetadataOneof() {}

func (*Object_SandboxHandleMetadata) isObject_HandleMetadataOneof() {}

type ObjectDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *ObjectDependency) Reset() {
	*x = ObjectDependency{}
	mi := &file_pkg_modal_api_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDependency) ProtoMessage() {}

func (x *ObjectDependency) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDependency.ProtoReflect.Descriptor instead.
func (*ObjectDependency) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{170}
}

func (x *ObjectDependency) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type PTYInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled        bool            `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"` // Soon deprecated
	WinszRows      uint32          `protobuf:"varint,2,opt,name=winsz_rows,json=winszRows,proto3" json:"winsz_rows,omitempty"`
	WinszCols      uint32          `protobuf:"varint,3,opt,name=winsz_cols,json=winszCols,proto3" json:"winsz_cols,omitempty"`
	EnvTerm        string          `protobuf:"bytes,4,opt,name=env_term,json=envTerm,proto3" json:"env_term,omitempty"`
	EnvColorterm   string          `protobuf:"bytes,5,opt,name=env_colorterm,json=envColorterm,proto3" json:"env_colorterm,omitempty"`
	EnvTermProgram string          `protobuf:"bytes,6,opt,name=env_term_program,json=envTermProgram,proto3" json:"env_term_program,omitempty"`
	PtyType        PTYInfo_PTYType `protobuf:"varint,7,opt,name=pty_type,json=ptyType,proto3,enum=modal.client.PTYInfo_PTYType" json:"pty_type,omitempty"`
}

func (x *PTYInfo) Reset() {
	*x = PTYInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PTYInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTYInfo) ProtoMessage() {}

func (x *PTYInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTYInfo.ProtoReflect.Descriptor instead.
func (*PTYInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{171}
}

func (x *PTYInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PTYInfo) GetWinszRows() uint32 {
	if x != nil {
		return x.WinszRows
	}
	return 0
}

func (x *PTYInfo) GetWinszCols() uint32 {
	if x != nil {
		return x.WinszCols
	}
	return 0
}

func (x *PTYInfo) GetEnvTerm() string {
	if x != nil {
		return x.EnvTerm
	}
	return ""
}

func (x *PTYInfo) GetEnvColorterm() string {
	if x != nil {
		return x.EnvColorterm
	}
	return ""
}

func (x *PTYInfo) GetEnvTermProgram() string {
	if x != nil {
		return x.EnvTermProgram
	}
	return ""
}

func (x *PTYInfo) GetPtyType() PTYInfo_PTYType {
	if x != nil {
		return x.PtyType
	}
	return PTYInfo_PTY_TYPE_UNSPECIFIED
}

type PortSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port        uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Unencrypted bool   `protobuf:"varint,2,opt,name=unencrypted,proto3" json:"unencrypted,omitempty"`
}

func (x *PortSpec) Reset() {
	*x = PortSpec{}
	mi := &file_pkg_modal_api_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSpec) ProtoMessage() {}

func (x *PortSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSpec.ProtoReflect.Descriptor instead.
func (*PortSpec) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{172}
}

func (x *PortSpec) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PortSpec) GetUnencrypted() bool {
	if x != nil {
		return x.Unencrypted
	}
	return false
}

type PortSpecs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ports []*PortSpec `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *PortSpecs) Reset() {
	*x = PortSpecs{}
	mi := &file_pkg_modal_api_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortSpecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSpecs) ProtoMessage() {}

func (x *PortSpecs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSpecs.ProtoReflect.Descriptor instead.
func (*PortSpecs) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{173}
}

func (x *PortSpecs) GetPorts() []*PortSpec {
	if x != nil {
		return x.Ports
	}
	return nil
}

type ProxyGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName     string              `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Namespace          DeploymentNamespace `protobuf:"varint,2,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName    string              `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	ObjectCreationType ObjectCreationType  `protobuf:"varint,4,opt,name=object_creation_type,json=objectCreationType,proto3,enum=modal.client.ObjectCreationType" json:"object_creation_type,omitempty"` // must be UNSPECIFIED
}

func (x *ProxyGetOrCreateRequest) Reset() {
	*x = ProxyGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyGetOrCreateRequest) ProtoMessage() {}

func (x *ProxyGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*ProxyGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{174}
}

func (x *ProxyGetOrCreateRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *ProxyGetOrCreateRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *ProxyGetOrCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *ProxyGetOrCreateRequest) GetObjectCreationType() ObjectCreationType {
	if x != nil {
		return x.ObjectCreationType
	}
	return ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED
}

type ProxyGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyId string `protobuf:"bytes,1,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
}

func (x *ProxyGetOrCreateResponse) Reset() {
	*x = ProxyGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyGetOrCreateResponse) ProtoMessage() {}

func (x *ProxyGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*ProxyGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{175}
}

func (x *ProxyGetOrCreateResponse) GetProxyId() string {
	if x != nil {
		return x.ProxyId
	}
	return ""
}

type ProxyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElasticIp  string `protobuf:"bytes,1,opt,name=elastic_ip,json=elasticIp,proto3" json:"elastic_ip,omitempty"`
	ProxyKey   string `protobuf:"bytes,2,opt,name=proxy_key,json=proxyKey,proto3" json:"proxy_key,omitempty"`
	RemoteAddr string `protobuf:"bytes,3,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	RemotePort int32  `protobuf:"varint,4,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
}

func (x *ProxyInfo) Reset() {
	*x = ProxyInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyInfo) ProtoMessage() {}

func (x *ProxyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyInfo.ProtoReflect.Descriptor instead.
func (*ProxyInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{176}
}

func (x *ProxyInfo) GetElasticIp() string {
	if x != nil {
		return x.ElasticIp
	}
	return ""
}

func (x *ProxyInfo) GetProxyKey() string {
	if x != nil {
		return x.ProxyKey
	}
	return ""
}

func (x *ProxyInfo) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *ProxyInfo) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

type ProxyIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyIp   string        `protobuf:"bytes,1,opt,name=proxy_ip,json=proxyIp,proto3" json:"proxy_ip,omitempty"`
	Status    ProxyIpStatus `protobuf:"varint,2,opt,name=status,proto3,enum=modal.client.ProxyIpStatus" json:"status,omitempty"`
	CreatedAt float64       `protobuf:"fixed64,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ProxyIp) Reset() {
	*x = ProxyIp{}
	mi := &file_pkg_modal_api_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyIp) ProtoMessage() {}

func (x *ProxyIp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyIp.ProtoReflect.Descriptor instead.
func (*ProxyIp) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{177}
}

func (x *ProxyIp) GetProxyIp() string {
	if x != nil {
		return x.ProxyIp
	}
	return ""
}

func (x *ProxyIp) GetStatus() ProxyIpStatus {
	if x != nil {
		return x.Status
	}
	return ProxyIpStatus_PROXY_IP_STATUS_UNSPECIFIED
}

func (x *ProxyIp) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ProxyIpDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyIp string `protobuf:"bytes,1,opt,name=proxy_ip,json=proxyIp,proto3" json:"proxy_ip,omitempty"`
}

func (x *ProxyIpDeleteRequest) Reset() {
	*x = ProxyIpDeleteRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyIpDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyIpDeleteRequest) ProtoMessage() {}

func (x *ProxyIpDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyIpDeleteRequest.ProtoReflect.Descriptor instead.
func (*ProxyIpDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{178}
}

func (x *ProxyIpDeleteRequest) GetProxyIp() string {
	if x != nil {
		return x.ProxyIp
	}
	return ""
}

type ProxyIpGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyIp *string `protobuf:"bytes,1,opt,name=proxy_ip,json=proxyIp,proto3,oneof" json:"proxy_ip,omitempty"`
}

func (x *ProxyIpGetOrCreateRequest) Reset() {
	*x = ProxyIpGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyIpGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyIpGetOrCreateRequest) ProtoMessage() {}

func (x *ProxyIpGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyIpGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*ProxyIpGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{179}
}

func (x *ProxyIpGetOrCreateRequest) GetProxyIp() string {
	if x != nil && x.ProxyIp != nil {
		return *x.ProxyIp
	}
	return ""
}

type ProxyIpGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyIp string        `protobuf:"bytes,1,opt,name=proxy_ip,json=proxyIp,proto3" json:"proxy_ip,omitempty"`
	Status  ProxyIpStatus `protobuf:"varint,2,opt,name=status,proto3,enum=modal.client.ProxyIpStatus" json:"status,omitempty"`
}

func (x *ProxyIpGetOrCreateResponse) Reset() {
	*x = ProxyIpGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyIpGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyIpGetOrCreateResponse) ProtoMessage() {}

func (x *ProxyIpGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyIpGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*ProxyIpGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{180}
}

func (x *ProxyIpGetOrCreateResponse) GetProxyIp() string {
	if x != nil {
		return x.ProxyIp
	}
	return ""
}

func (x *ProxyIpGetOrCreateResponse) GetStatus() ProxyIpStatus {
	if x != nil {
		return x.Status
	}
	return ProxyIpStatus_PROXY_IP_STATUS_UNSPECIFIED
}

type ProxyIpListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyIps []*ProxyIp `protobuf:"bytes,1,rep,name=proxy_ips,json=proxyIps,proto3" json:"proxy_ips,omitempty"`
}

func (x *ProxyIpListResponse) Reset() {
	*x = ProxyIpListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyIpListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyIpListResponse) ProtoMessage() {}

func (x *ProxyIpListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyIpListResponse.ProtoReflect.Descriptor instead.
func (*ProxyIpListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{181}
}

func (x *ProxyIpListResponse) GetProxyIps() []*ProxyIp {
	if x != nil {
		return x.ProxyIps
	}
	return nil
}

type QueueClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId       string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	PartitionKey  []byte `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	AllPartitions bool   `protobuf:"varint,3,opt,name=all_partitions,json=allPartitions,proto3" json:"all_partitions,omitempty"`
}

func (x *QueueClearRequest) Reset() {
	*x = QueueClearRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueClearRequest) ProtoMessage() {}

func (x *QueueClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueClearRequest.ProtoReflect.Descriptor instead.
func (*QueueClearRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{182}
}

func (x *QueueClearRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *QueueClearRequest) GetPartitionKey() []byte {
	if x != nil {
		return x.PartitionKey
	}
	return nil
}

func (x *QueueClearRequest) GetAllPartitions() bool {
	if x != nil {
		return x.AllPartitions
	}
	return false
}

type QueueDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (x *QueueDeleteRequest) Reset() {
	*x = QueueDeleteRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDeleteRequest) ProtoMessage() {}

func (x *QueueDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDeleteRequest.ProtoReflect.Descriptor instead.
func (*QueueDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{183}
}

func (x *QueueDeleteRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

type QueueGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName     string              `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Namespace          DeploymentNamespace `protobuf:"varint,2,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName    string              `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	ObjectCreationType ObjectCreationType  `protobuf:"varint,4,opt,name=object_creation_type,json=objectCreationType,proto3,enum=modal.client.ObjectCreationType" json:"object_creation_type,omitempty"`
}

func (x *QueueGetOrCreateRequest) Reset() {
	*x = QueueGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGetOrCreateRequest) ProtoMessage() {}

func (x *QueueGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*QueueGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{184}
}

func (x *QueueGetOrCreateRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *QueueGetOrCreateRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *QueueGetOrCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *QueueGetOrCreateRequest) GetObjectCreationType() ObjectCreationType {
	if x != nil {
		return x.ObjectCreationType
	}
	return ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED
}

type QueueGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (x *QueueGetOrCreateResponse) Reset() {
	*x = QueueGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGetOrCreateResponse) ProtoMessage() {}

func (x *QueueGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*QueueGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{185}
}

func (x *QueueGetOrCreateResponse) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

type QueueGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId      string  `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Timeout      float32 `protobuf:"fixed32,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	NValues      int32   `protobuf:"varint,4,opt,name=n_values,json=nValues,proto3" json:"n_values,omitempty"`
	PartitionKey []byte  `protobuf:"bytes,5,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
}

func (x *QueueGetRequest) Reset() {
	*x = QueueGetRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGetRequest) ProtoMessage() {}

func (x *QueueGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGetRequest.ProtoReflect.Descriptor instead.
func (*QueueGetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{186}
}

func (x *QueueGetRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *QueueGetRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *QueueGetRequest) GetNValues() int32 {
	if x != nil {
		return x.NValues
	}
	return 0
}

func (x *QueueGetRequest) GetPartitionKey() []byte {
	if x != nil {
		return x.PartitionKey
	}
	return nil
}

type QueueGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *QueueGetResponse) Reset() {
	*x = QueueGetResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueGetResponse) ProtoMessage() {}

func (x *QueueGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueGetResponse.ProtoReflect.Descriptor instead.
func (*QueueGetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{187}
}

func (x *QueueGetResponse) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type QueueHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (x *QueueHeartbeatRequest) Reset() {
	*x = QueueHeartbeatRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueHeartbeatRequest) ProtoMessage() {}

func (x *QueueHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*QueueHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{188}
}

func (x *QueueHeartbeatRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

type QueueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	EntryId string `protobuf:"bytes,2,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
}

func (x *QueueItem) Reset() {
	*x = QueueItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueItem) ProtoMessage() {}

func (x *QueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueItem.ProtoReflect.Descriptor instead.
func (*QueueItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{189}
}

func (x *QueueItem) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *QueueItem) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

type QueueLenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId      string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	PartitionKey []byte `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	Total        bool   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *QueueLenRequest) Reset() {
	*x = QueueLenRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueLenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueLenRequest) ProtoMessage() {}

func (x *QueueLenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueLenRequest.ProtoReflect.Descriptor instead.
func (*QueueLenRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{190}
}

func (x *QueueLenRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *QueueLenRequest) GetPartitionKey() []byte {
	if x != nil {
		return x.PartitionKey
	}
	return nil
}

func (x *QueueLenRequest) GetTotal() bool {
	if x != nil {
		return x.Total
	}
	return false
}

type QueueLenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len int32 `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *QueueLenResponse) Reset() {
	*x = QueueLenResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueLenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueLenResponse) ProtoMessage() {}

func (x *QueueLenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueLenResponse.ProtoReflect.Descriptor instead.
func (*QueueLenResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{191}
}

func (x *QueueLenResponse) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type QueueListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentName string `protobuf:"bytes,1,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	// Allow client to report a bounded total size to reduce the number of partitions that need to be checked
	TotalSizeLimit int32 `protobuf:"varint,2,opt,name=total_size_limit,json=totalSizeLimit,proto3" json:"total_size_limit,omitempty"`
}

func (x *QueueListRequest) Reset() {
	*x = QueueListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListRequest) ProtoMessage() {}

func (x *QueueListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListRequest.ProtoReflect.Descriptor instead.
func (*QueueListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{192}
}

func (x *QueueListRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *QueueListRequest) GetTotalSizeLimit() int32 {
	if x != nil {
		return x.TotalSizeLimit
	}
	return 0
}

type QueueListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queues []*QueueListResponse_QueueInfo `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
}

func (x *QueueListResponse) Reset() {
	*x = QueueListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse) ProtoMessage() {}

func (x *QueueListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse.ProtoReflect.Descriptor instead.
func (*QueueListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{193}
}

func (x *QueueListResponse) GetQueues() []*QueueListResponse_QueueInfo {
	if x != nil {
		return x.Queues
	}
	return nil
}

type QueueNextItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId         string  `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	PartitionKey    []byte  `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	LastEntryId     string  `protobuf:"bytes,3,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
	ItemPollTimeout float32 `protobuf:"fixed32,4,opt,name=item_poll_timeout,json=itemPollTimeout,proto3" json:"item_poll_timeout,omitempty"` // seconds
}

func (x *QueueNextItemsRequest) Reset() {
	*x = QueueNextItemsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueNextItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueNextItemsRequest) ProtoMessage() {}

func (x *QueueNextItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueNextItemsRequest.ProtoReflect.Descriptor instead.
func (*QueueNextItemsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{194}
}

func (x *QueueNextItemsRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *QueueNextItemsRequest) GetPartitionKey() []byte {
	if x != nil {
		return x.PartitionKey
	}
	return nil
}

func (x *QueueNextItemsRequest) GetLastEntryId() string {
	if x != nil {
		return x.LastEntryId
	}
	return ""
}

func (x *QueueNextItemsRequest) GetItemPollTimeout() float32 {
	if x != nil {
		return x.ItemPollTimeout
	}
	return 0
}

type QueueNextItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*QueueItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QueueNextItemsResponse) Reset() {
	*x = QueueNextItemsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueNextItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueNextItemsResponse) ProtoMessage() {}

func (x *QueueNextItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueNextItemsResponse.ProtoReflect.Descriptor instead.
func (*QueueNextItemsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{195}
}

func (x *QueueNextItemsResponse) GetItems() []*QueueItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueuePutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId             string   `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Values              [][]byte `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	PartitionKey        []byte   `protobuf:"bytes,5,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	PartitionTtlSeconds int32    `protobuf:"varint,6,opt,name=partition_ttl_seconds,json=partitionTtlSeconds,proto3" json:"partition_ttl_seconds,omitempty"`
}

func (x *QueuePutRequest) Reset() {
	*x = QueuePutRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuePutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePutRequest) ProtoMessage() {}

func (x *QueuePutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePutRequest.ProtoReflect.Descriptor instead.
func (*QueuePutRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{196}
}

func (x *QueuePutRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *QueuePutRequest) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *QueuePutRequest) GetPartitionKey() []byte {
	if x != nil {
		return x.PartitionKey
	}
	return nil
}

func (x *QueuePutRequest) GetPartitionTtlSeconds() int32 {
	if x != nil {
		return x.PartitionTtlSeconds
	}
	return 0
}

type RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int32             `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Interval RateLimitInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=modal.client.RateLimitInterval" json:"interval,omitempty"`
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	mi := &file_pkg_modal_api_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{197}
}

func (x *RateLimit) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RateLimit) GetInterval() RateLimitInterval {
	if x != nil {
		return x.Interval
	}
	return RateLimitInterval_RATE_LIMIT_INTERVAL_UNSPECIFIED
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryMb        uint32     `protobuf:"varint,2,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"` // MiB
	MilliCpu        uint32     `protobuf:"varint,3,opt,name=milli_cpu,json=milliCpu,proto3" json:"milli_cpu,omitempty"` // milli CPU cores
	GpuConfig       *GPUConfig `protobuf:"bytes,4,opt,name=gpu_config,json=gpuConfig,proto3" json:"gpu_config,omitempty"`
	MemoryMbMax     uint32     `protobuf:"varint,5,opt,name=memory_mb_max,json=memoryMbMax,proto3" json:"memory_mb_max,omitempty"`             // MiB
	EphemeralDiskMb uint32     `protobuf:"varint,6,opt,name=ephemeral_disk_mb,json=ephemeralDiskMb,proto3" json:"ephemeral_disk_mb,omitempty"` // MiB
}

func (x *Resources) Reset() {
	*x = Resources{}
	mi := &file_pkg_modal_api_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{198}
}

func (x *Resources) GetMemoryMb() uint32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *Resources) GetMilliCpu() uint32 {
	if x != nil {
		return x.MilliCpu
	}
	return 0
}

func (x *Resources) GetGpuConfig() *GPUConfig {
	if x != nil {
		return x.GpuConfig
	}
	return nil
}

func (x *Resources) GetMemoryMbMax() uint32 {
	if x != nil {
		return x.MemoryMbMax
	}
	return 0
}

func (x *Resources) GetEphemeralDiskMb() uint32 {
	if x != nil {
		return x.EphemeralDiskMb
	}
	return 0
}

type RuntimeInputMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	MessageIndex uint64 `protobuf:"varint,2,opt,name=message_index,json=messageIndex,proto3" json:"message_index,omitempty"`
	Eof          bool   `protobuf:"varint,3,opt,name=eof,proto3" json:"eof,omitempty"`
}

func (x *RuntimeInputMessage) Reset() {
	*x = RuntimeInputMessage{}
	mi := &file_pkg_modal_api_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeInputMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeInputMessage) ProtoMessage() {}

func (x *RuntimeInputMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeInputMessage.ProtoReflect.Descriptor instead.
func (*RuntimeInputMessage) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{199}
}

func (x *RuntimeInputMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *RuntimeInputMessage) GetMessageIndex() uint64 {
	if x != nil {
		return x.MessageIndex
	}
	return 0
}

func (x *RuntimeInputMessage) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

type RuntimeOutputBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*RuntimeOutputMessage `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	BatchIndex uint64                  `protobuf:"varint,2,opt,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
	// if an exit code is given, this is the final message that will be sent.
	ExitCode *int32 `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3,oneof" json:"exit_code,omitempty"`
}

func (x *RuntimeOutputBatch) Reset() {
	*x = RuntimeOutputBatch{}
	mi := &file_pkg_modal_api_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeOutputBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeOutputBatch) ProtoMessage() {}

func (x *RuntimeOutputBatch) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeOutputBatch.ProtoReflect.Descriptor instead.
func (*RuntimeOutputBatch) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{200}
}

func (x *RuntimeOutputBatch) GetItems() []*RuntimeOutputMessage {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RuntimeOutputBatch) GetBatchIndex() uint64 {
	if x != nil {
		return x.BatchIndex
	}
	return 0
}

func (x *RuntimeOutputBatch) GetExitCode() int32 {
	if x != nil && x.ExitCode != nil {
		return *x.ExitCode
	}
	return 0
}

// Used for `modal container exec`
type RuntimeOutputMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// only stdout / stderr is used
	FileDescriptor FileDescriptor `protobuf:"varint,1,opt,name=file_descriptor,json=fileDescriptor,proto3,enum=modal.client.FileDescriptor" json:"file_descriptor,omitempty"`
	Message        string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RuntimeOutputMessage) Reset() {
	*x = RuntimeOutputMessage{}
	mi := &file_pkg_modal_api_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeOutputMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeOutputMessage) ProtoMessage() {}

func (x *RuntimeOutputMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeOutputMessage.ProtoReflect.Descriptor instead.
func (*RuntimeOutputMessage) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{201}
}

func (x *RuntimeOutputMessage) GetFileDescriptor() FileDescriptor {
	if x != nil {
		return x.FileDescriptor
	}
	return FileDescriptor_FILE_DESCRIPTOR_UNSPECIFIED
}

func (x *RuntimeOutputMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type S3Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName          string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	MountPath           string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	CredentialsSecretId string `protobuf:"bytes,3,opt,name=credentials_secret_id,json=credentialsSecretId,proto3" json:"credentials_secret_id,omitempty"`
	ReadOnly            bool   `protobuf:"varint,4,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
}

func (x *S3Mount) Reset() {
	*x = S3Mount{}
	mi := &file_pkg_modal_api_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Mount) ProtoMessage() {}

func (x *S3Mount) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Mount.ProtoReflect.Descriptor instead.
func (*S3Mount) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{202}
}

func (x *S3Mount) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3Mount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *S3Mount) GetCredentialsSecretId() string {
	if x != nil {
		return x.CredentialsSecretId
	}
	return ""
}

func (x *S3Mount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type Sandbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntrypointArgs     []string             `protobuf:"bytes,1,rep,name=entrypoint_args,json=entrypointArgs,proto3" json:"entrypoint_args,omitempty"`
	MountIds           []string             `protobuf:"bytes,2,rep,name=mount_ids,json=mountIds,proto3" json:"mount_ids,omitempty"`
	ImageId            string               `protobuf:"bytes,3,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	SecretIds          []string             `protobuf:"bytes,4,rep,name=secret_ids,json=secretIds,proto3" json:"secret_ids,omitempty"`
	Resources          *Resources           `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"`
	CloudProvider      CloudProvider        `protobuf:"varint,6,opt,name=cloud_provider,json=cloudProvider,proto3,enum=modal.client.CloudProvider" json:"cloud_provider,omitempty"`
	TimeoutSecs        uint32               `protobuf:"varint,7,opt,name=timeout_secs,json=timeoutSecs,proto3" json:"timeout_secs,omitempty"`
	Workdir            *string              `protobuf:"bytes,8,opt,name=workdir,proto3,oneof" json:"workdir,omitempty"`
	NfsMounts          []*SharedVolumeMount `protobuf:"bytes,9,rep,name=nfs_mounts,json=nfsMounts,proto3" json:"nfs_mounts,omitempty"`
	RuntimeDebug       bool                 `protobuf:"varint,10,opt,name=runtime_debug,json=runtimeDebug,proto3" json:"runtime_debug,omitempty"` // For internal debugging use only.
	BlockNetwork       bool                 `protobuf:"varint,11,opt,name=block_network,json=blockNetwork,proto3" json:"block_network,omitempty"`
	S3Mounts           []*S3Mount           `protobuf:"bytes,12,rep,name=s3_mounts,json=s3Mounts,proto3" json:"s3_mounts,omitempty"`
	CloudBucketMounts  []*CloudBucketMount  `protobuf:"bytes,14,rep,name=cloud_bucket_mounts,json=cloudBucketMounts,proto3" json:"cloud_bucket_mounts,omitempty"`
	VolumeMounts       []*VolumeMount       `protobuf:"bytes,13,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty"`
	PtyInfo            *PTYInfo             `protobuf:"bytes,15,opt,name=pty_info,json=ptyInfo,proto3" json:"pty_info,omitempty"`
	SchedulerPlacement *SchedulerPlacement  `protobuf:"bytes,17,opt,name=scheduler_placement,json=schedulerPlacement,proto3,oneof" json:"scheduler_placement,omitempty"`
	WorkerId           string               `protobuf:"bytes,19,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"` // for internal debugging use only
	// Types that are assignable to OpenPortsOneof:
	//
	//	*Sandbox_OpenPorts
	OpenPortsOneof isSandbox_OpenPortsOneof `protobuf_oneof:"open_ports_oneof"`
	I6PnEnabled    bool                     `protobuf:"varint,21,opt,name=i6pn_enabled,json=i6pnEnabled,proto3" json:"i6pn_enabled,omitempty"`
	// Network access configuration beyond simple allow/block.
	NetworkAccess *NetworkAccess `protobuf:"bytes,22,opt,name=network_access,json=networkAccess,proto3" json:"network_access,omitempty"`
}

func (x *Sandbox) Reset() {
	*x = Sandbox{}
	mi := &file_pkg_modal_api_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sandbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sandbox) ProtoMessage() {}

func (x *Sandbox) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sandbox.ProtoReflect.Descriptor instead.
func (*Sandbox) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{203}
}

func (x *Sandbox) GetEntrypointArgs() []string {
	if x != nil {
		return x.EntrypointArgs
	}
	return nil
}

func (x *Sandbox) GetMountIds() []string {
	if x != nil {
		return x.MountIds
	}
	return nil
}

func (x *Sandbox) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *Sandbox) GetSecretIds() []string {
	if x != nil {
		return x.SecretIds
	}
	return nil
}

func (x *Sandbox) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Sandbox) GetCloudProvider() CloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return CloudProvider_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *Sandbox) GetTimeoutSecs() uint32 {
	if x != nil {
		return x.TimeoutSecs
	}
	return 0
}

func (x *Sandbox) GetWorkdir() string {
	if x != nil && x.Workdir != nil {
		return *x.Workdir
	}
	return ""
}

func (x *Sandbox) GetNfsMounts() []*SharedVolumeMount {
	if x != nil {
		return x.NfsMounts
	}
	return nil
}

func (x *Sandbox) GetRuntimeDebug() bool {
	if x != nil {
		return x.RuntimeDebug
	}
	return false
}

func (x *Sandbox) GetBlockNetwork() bool {
	if x != nil {
		return x.BlockNetwork
	}
	return false
}

func (x *Sandbox) GetS3Mounts() []*S3Mount {
	if x != nil {
		return x.S3Mounts
	}
	return nil
}

func (x *Sandbox) GetCloudBucketMounts() []*CloudBucketMount {
	if x != nil {
		return x.CloudBucketMounts
	}
	return nil
}

func (x *Sandbox) GetVolumeMounts() []*VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *Sandbox) GetPtyInfo() *PTYInfo {
	if x != nil {
		return x.PtyInfo
	}
	return nil
}

func (x *Sandbox) GetSchedulerPlacement() *SchedulerPlacement {
	if x != nil {
		return x.SchedulerPlacement
	}
	return nil
}

func (x *Sandbox) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (m *Sandbox) GetOpenPortsOneof() isSandbox_OpenPortsOneof {
	if m != nil {
		return m.OpenPortsOneof
	}
	return nil
}

func (x *Sandbox) GetOpenPorts() *PortSpecs {
	if x, ok := x.GetOpenPortsOneof().(*Sandbox_OpenPorts); ok {
		return x.OpenPorts
	}
	return nil
}

func (x *Sandbox) GetI6PnEnabled() bool {
	if x != nil {
		return x.I6PnEnabled
	}
	return false
}

func (x *Sandbox) GetNetworkAccess() *NetworkAccess {
	if x != nil {
		return x.NetworkAccess
	}
	return nil
}

type isSandbox_OpenPortsOneof interface {
	isSandbox_OpenPortsOneof()
}

type Sandbox_OpenPorts struct {
	OpenPorts *PortSpecs `protobuf:"bytes,20,opt,name=open_ports,json=openPorts,proto3,oneof"`
}

func (*Sandbox_OpenPorts) isSandbox_OpenPortsOneof() {}

type SandboxCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string   `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Definition      *Sandbox `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	EnvironmentName string   `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *SandboxCreateRequest) Reset() {
	*x = SandboxCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxCreateRequest) ProtoMessage() {}

func (x *SandboxCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxCreateRequest.ProtoReflect.Descriptor instead.
func (*SandboxCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{204}
}

func (x *SandboxCreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SandboxCreateRequest) GetDefinition() *Sandbox {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *SandboxCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type SandboxCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SandboxId string `protobuf:"bytes,1,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
}

func (x *SandboxCreateResponse) Reset() {
	*x = SandboxCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxCreateResponse) ProtoMessage() {}

func (x *SandboxCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxCreateResponse.ProtoReflect.Descriptor instead.
func (*SandboxCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{205}
}

func (x *SandboxCreateResponse) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

type SandboxGetLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SandboxId      string         `protobuf:"bytes,1,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
	FileDescriptor FileDescriptor `protobuf:"varint,2,opt,name=file_descriptor,json=fileDescriptor,proto3,enum=modal.client.FileDescriptor" json:"file_descriptor,omitempty"`
	Timeout        float32        `protobuf:"fixed32,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	LastEntryId    string         `protobuf:"bytes,4,opt,name=last_entry_id,json=lastEntryId,proto3" json:"last_entry_id,omitempty"`
}

func (x *SandboxGetLogsRequest) Reset() {
	*x = SandboxGetLogsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxGetLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxGetLogsRequest) ProtoMessage() {}

func (x *SandboxGetLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxGetLogsRequest.ProtoReflect.Descriptor instead.
func (*SandboxGetLogsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{206}
}

func (x *SandboxGetLogsRequest) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

func (x *SandboxGetLogsRequest) GetFileDescriptor() FileDescriptor {
	if x != nil {
		return x.FileDescriptor
	}
	return FileDescriptor_FILE_DESCRIPTOR_UNSPECIFIED
}

func (x *SandboxGetLogsRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SandboxGetLogsRequest) GetLastEntryId() string {
	if x != nil {
		return x.LastEntryId
	}
	return ""
}

type SandboxGetTaskIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SandboxId string `protobuf:"bytes,1,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
}

func (x *SandboxGetTaskIdRequest) Reset() {
	*x = SandboxGetTaskIdRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxGetTaskIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxGetTaskIdRequest) ProtoMessage() {}

func (x *SandboxGetTaskIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxGetTaskIdRequest.ProtoReflect.Descriptor instead.
func (*SandboxGetTaskIdRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{207}
}

func (x *SandboxGetTaskIdRequest) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

type SandboxGetTaskIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *SandboxGetTaskIdResponse) Reset() {
	*x = SandboxGetTaskIdResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxGetTaskIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxGetTaskIdResponse) ProtoMessage() {}

func (x *SandboxGetTaskIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxGetTaskIdResponse.ProtoReflect.Descriptor instead.
func (*SandboxGetTaskIdResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{208}
}

func (x *SandboxGetTaskIdResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type SandboxGetTunnelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SandboxId string  `protobuf:"bytes,1,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
	Timeout   float32 `protobuf:"fixed32,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *SandboxGetTunnelsRequest) Reset() {
	*x = SandboxGetTunnelsRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxGetTunnelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxGetTunnelsRequest) ProtoMessage() {}

func (x *SandboxGetTunnelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxGetTunnelsRequest.ProtoReflect.Descriptor instead.
func (*SandboxGetTunnelsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{209}
}

func (x *SandboxGetTunnelsRequest) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

func (x *SandboxGetTunnelsRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type SandboxGetTunnelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *GenericResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Tunnels []*TunnelData  `protobuf:"bytes,2,rep,name=tunnels,proto3" json:"tunnels,omitempty"`
}

func (x *SandboxGetTunnelsResponse) Reset() {
	*x = SandboxGetTunnelsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxGetTunnelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxGetTunnelsResponse) ProtoMessage() {}

func (x *SandboxGetTunnelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxGetTunnelsResponse.ProtoReflect.Descriptor instead.
func (*SandboxGetTunnelsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{210}
}

func (x *SandboxGetTunnelsResponse) GetResult() *GenericResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SandboxGetTunnelsResponse) GetTunnels() []*TunnelData {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

type SandboxHandleMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GenericResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SandboxHandleMetadata) Reset() {
	*x = SandboxHandleMetadata{}
	mi := &file_pkg_modal_api_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxHandleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxHandleMetadata) ProtoMessage() {}

func (x *SandboxHandleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxHandleMetadata.ProtoReflect.Descriptor instead.
func (*SandboxHandleMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{211}
}

func (x *SandboxHandleMetadata) GetResult() *GenericResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type SandboxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt float64   `protobuf:"fixed64,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	TaskInfo  *TaskInfo `protobuf:"bytes,4,opt,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (x *SandboxInfo) Reset() {
	*x = SandboxInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxInfo) ProtoMessage() {}

func (x *SandboxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxInfo.ProtoReflect.Descriptor instead.
func (*SandboxInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{212}
}

func (x *SandboxInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SandboxInfo) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SandboxInfo) GetTaskInfo() *TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type SandboxListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string        `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	BeforeTimestamp float64       `protobuf:"fixed64,2,opt,name=before_timestamp,json=beforeTimestamp,proto3" json:"before_timestamp,omitempty"`
	EnvironmentName string        `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	IncludeFinished bool          `protobuf:"varint,4,opt,name=include_finished,json=includeFinished,proto3" json:"include_finished,omitempty"`
	Tags            []*SandboxTag `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *SandboxListRequest) Reset() {
	*x = SandboxListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxListRequest) ProtoMessage() {}

func (x *SandboxListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxListRequest.ProtoReflect.Descriptor instead.
func (*SandboxListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{213}
}

func (x *SandboxListRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SandboxListRequest) GetBeforeTimestamp() float64 {
	if x != nil {
		return x.BeforeTimestamp
	}
	return 0
}

func (x *SandboxListRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *SandboxListRequest) GetIncludeFinished() bool {
	if x != nil {
		return x.IncludeFinished
	}
	return false
}

func (x *SandboxListRequest) GetTags() []*SandboxTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SandboxListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sandboxes []*SandboxInfo `protobuf:"bytes,1,rep,name=sandboxes,proto3" json:"sandboxes,omitempty"`
}

func (x *SandboxListResponse) Reset() {
	*x = SandboxListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxListResponse) ProtoMessage() {}

func (x *SandboxListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxListResponse.ProtoReflect.Descriptor instead.
func (*SandboxListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{214}
}

func (x *SandboxListResponse) GetSandboxes() []*SandboxInfo {
	if x != nil {
		return x.Sandboxes
	}
	return nil
}

type SandboxStdinWriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SandboxId string `protobuf:"bytes,1,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
	Input     []byte `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Index     uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Eof       bool   `protobuf:"varint,4,opt,name=eof,proto3" json:"eof,omitempty"`
}

func (x *SandboxStdinWriteRequest) Reset() {
	*x = SandboxStdinWriteRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxStdinWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxStdinWriteRequest) ProtoMessage() {}

func (x *SandboxStdinWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxStdinWriteRequest.ProtoReflect.Descriptor instead.
func (*SandboxStdinWriteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{215}
}

func (x *SandboxStdinWriteRequest) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

func (x *SandboxStdinWriteRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SandboxStdinWriteRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SandboxStdinWriteRequest) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

type SandboxStdinWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SandboxStdinWriteResponse) Reset() {
	*x = SandboxStdinWriteResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxStdinWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxStdinWriteResponse) ProtoMessage() {}

func (x *SandboxStdinWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxStdinWriteResponse.ProtoReflect.Descriptor instead.
func (*SandboxStdinWriteResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{216}
}

type SandboxTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName  string `protobuf:"bytes,1,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	TagValue string `protobuf:"bytes,2,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
}

func (x *SandboxTag) Reset() {
	*x = SandboxTag{}
	mi := &file_pkg_modal_api_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxTag) ProtoMessage() {}

func (x *SandboxTag) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxTag.ProtoReflect.Descriptor instead.
func (*SandboxTag) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{217}
}

func (x *SandboxTag) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *SandboxTag) GetTagValue() string {
	if x != nil {
		return x.TagValue
	}
	return ""
}

type SandboxTagsSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentName string        `protobuf:"bytes,1,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	SandboxId       string        `protobuf:"bytes,2,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
	Tags            []*SandboxTag `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *SandboxTagsSetRequest) Reset() {
	*x = SandboxTagsSetRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxTagsSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxTagsSetRequest) ProtoMessage() {}

func (x *SandboxTagsSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxTagsSetRequest.ProtoReflect.Descriptor instead.
func (*SandboxTagsSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{218}
}

func (x *SandboxTagsSetRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *SandboxTagsSetRequest) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

func (x *SandboxTagsSetRequest) GetTags() []*SandboxTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SandboxTerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SandboxId string `protobuf:"bytes,1,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
}

func (x *SandboxTerminateRequest) Reset() {
	*x = SandboxTerminateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxTerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxTerminateRequest) ProtoMessage() {}

func (x *SandboxTerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxTerminateRequest.ProtoReflect.Descriptor instead.
func (*SandboxTerminateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{219}
}

func (x *SandboxTerminateRequest) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

type SandboxTerminateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingResult *GenericResult `protobuf:"bytes,1,opt,name=existing_result,json=existingResult,proto3" json:"existing_result,omitempty"`
}

func (x *SandboxTerminateResponse) Reset() {
	*x = SandboxTerminateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxTerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxTerminateResponse) ProtoMessage() {}

func (x *SandboxTerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxTerminateResponse.ProtoReflect.Descriptor instead.
func (*SandboxTerminateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{220}
}

func (x *SandboxTerminateResponse) GetExistingResult() *GenericResult {
	if x != nil {
		return x.ExistingResult
	}
	return nil
}

type SandboxWaitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SandboxId string  `protobuf:"bytes,1,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
	Timeout   float32 `protobuf:"fixed32,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *SandboxWaitRequest) Reset() {
	*x = SandboxWaitRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxWaitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxWaitRequest) ProtoMessage() {}

func (x *SandboxWaitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxWaitRequest.ProtoReflect.Descriptor instead.
func (*SandboxWaitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{221}
}

func (x *SandboxWaitRequest) GetSandboxId() string {
	if x != nil {
		return x.SandboxId
	}
	return ""
}

func (x *SandboxWaitRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type SandboxWaitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GenericResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SandboxWaitResponse) Reset() {
	*x = SandboxWaitResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SandboxWaitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandboxWaitResponse) ProtoMessage() {}

func (x *SandboxWaitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandboxWaitResponse.ProtoReflect.Descriptor instead.
func (*SandboxWaitResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{222}
}

func (x *SandboxWaitResponse) GetResult() *GenericResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ScheduleOneof:
	//
	//	*Schedule_Cron_
	//	*Schedule_Period_
	ScheduleOneof isSchedule_ScheduleOneof `protobuf_oneof:"schedule_oneof"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	mi := &file_pkg_modal_api_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{223}
}

func (m *Schedule) GetScheduleOneof() isSchedule_ScheduleOneof {
	if m != nil {
		return m.ScheduleOneof
	}
	return nil
}

func (x *Schedule) GetCron() *Schedule_Cron {
	if x, ok := x.GetScheduleOneof().(*Schedule_Cron_); ok {
		return x.Cron
	}
	return nil
}

func (x *Schedule) GetPeriod() *Schedule_Period {
	if x, ok := x.GetScheduleOneof().(*Schedule_Period_); ok {
		return x.Period
	}
	return nil
}

type isSchedule_ScheduleOneof interface {
	isSchedule_ScheduleOneof()
}

type Schedule_Cron_ struct {
	Cron *Schedule_Cron `protobuf:"bytes,1,opt,name=cron,proto3,oneof"`
}

type Schedule_Period_ struct {
	Period *Schedule_Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

func (*Schedule_Cron_) isSchedule_ScheduleOneof() {}

func (*Schedule_Period_) isSchedule_ScheduleOneof() {}

type SchedulerPlacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []string `protobuf:"bytes,4,rep,name=regions,proto3" json:"regions,omitempty"`
	// TODO(irfansharif): Make these two repeated.
	XZone          *string  `protobuf:"bytes,2,opt,name=_zone,json=Zone,proto3,oneof" json:"_zone,omitempty"`                        // admin-only
	XLifecycle     *string  `protobuf:"bytes,3,opt,name=_lifecycle,json=Lifecycle,proto3,oneof" json:"_lifecycle,omitempty"`         // admin-only, "on-demand" or "spot", else ignored
	XInstanceTypes []string `protobuf:"bytes,5,rep,name=_instance_types,json=InstanceTypes,proto3" json:"_instance_types,omitempty"` // admin-only
}

func (x *SchedulerPlacement) Reset() {
	*x = SchedulerPlacement{}
	mi := &file_pkg_modal_api_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulerPlacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerPlacement) ProtoMessage() {}

func (x *SchedulerPlacement) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerPlacement.ProtoReflect.Descriptor instead.
func (*SchedulerPlacement) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{224}
}

func (x *SchedulerPlacement) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *SchedulerPlacement) GetXZone() string {
	if x != nil && x.XZone != nil {
		return *x.XZone
	}
	return ""
}

func (x *SchedulerPlacement) GetXLifecycle() string {
	if x != nil && x.XLifecycle != nil {
		return *x.XLifecycle
	}
	return ""
}

func (x *SchedulerPlacement) GetXInstanceTypes() []string {
	if x != nil {
		return x.XInstanceTypes
	}
	return nil
}

type SecretCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvDict          map[string]string `protobuf:"bytes,1,rep,name=env_dict,json=envDict,proto3" json:"env_dict,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AppId            string            `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TemplateType     string            `protobuf:"bytes,3,opt,name=template_type,json=templateType,proto3" json:"template_type,omitempty"` // todo: not used?
	ExistingSecretId string            `protobuf:"bytes,4,opt,name=existing_secret_id,json=existingSecretId,proto3" json:"existing_secret_id,omitempty"`
}

func (x *SecretCreateRequest) Reset() {
	*x = SecretCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretCreateRequest) ProtoMessage() {}

func (x *SecretCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretCreateRequest.ProtoReflect.Descriptor instead.
func (*SecretCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{225}
}

func (x *SecretCreateRequest) GetEnvDict() map[string]string {
	if x != nil {
		return x.EnvDict
	}
	return nil
}

func (x *SecretCreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SecretCreateRequest) GetTemplateType() string {
	if x != nil {
		return x.TemplateType
	}
	return ""
}

func (x *SecretCreateRequest) GetExistingSecretId() string {
	if x != nil {
		return x.ExistingSecretId
	}
	return ""
}

type SecretCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
}

func (x *SecretCreateResponse) Reset() {
	*x = SecretCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretCreateResponse) ProtoMessage() {}

func (x *SecretCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretCreateResponse.ProtoReflect.Descriptor instead.
func (*SecretCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{226}
}

func (x *SecretCreateResponse) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

type SecretDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
}

func (x *SecretDeleteRequest) Reset() {
	*x = SecretDeleteRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretDeleteRequest) ProtoMessage() {}

func (x *SecretDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretDeleteRequest.ProtoReflect.Descriptor instead.
func (*SecretDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{227}
}

func (x *SecretDeleteRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

type SecretGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName     string              `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Namespace          DeploymentNamespace `protobuf:"varint,2,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName    string              `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	ObjectCreationType ObjectCreationType  `protobuf:"varint,4,opt,name=object_creation_type,json=objectCreationType,proto3,enum=modal.client.ObjectCreationType" json:"object_creation_type,omitempty"` // Not used atm
	EnvDict            map[string]string   `protobuf:"bytes,5,rep,name=env_dict,json=envDict,proto3" json:"env_dict,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AppId              string              `protobuf:"bytes,6,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"` // only used with OBJECT_CREATION_TYPE_ANONYMOUS_OWNED_BY_APP
	RequiredKeys       []string            `protobuf:"bytes,7,rep,name=required_keys,json=requiredKeys,proto3" json:"required_keys,omitempty"`
}

func (x *SecretGetOrCreateRequest) Reset() {
	*x = SecretGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretGetOrCreateRequest) ProtoMessage() {}

func (x *SecretGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*SecretGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{228}
}

func (x *SecretGetOrCreateRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *SecretGetOrCreateRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *SecretGetOrCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *SecretGetOrCreateRequest) GetObjectCreationType() ObjectCreationType {
	if x != nil {
		return x.ObjectCreationType
	}
	return ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED
}

func (x *SecretGetOrCreateRequest) GetEnvDict() map[string]string {
	if x != nil {
		return x.EnvDict
	}
	return nil
}

func (x *SecretGetOrCreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SecretGetOrCreateRequest) GetRequiredKeys() []string {
	if x != nil {
		return x.RequiredKeys
	}
	return nil
}

type SecretGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
}

func (x *SecretGetOrCreateResponse) Reset() {
	*x = SecretGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretGetOrCreateResponse) ProtoMessage() {}

func (x *SecretGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*SecretGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{229}
}

func (x *SecretGetOrCreateResponse) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

type SecretListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label           string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	CreatedAt       float64 `protobuf:"fixed64,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastUsedAt      float64 `protobuf:"fixed64,3,opt,name=last_used_at,json=lastUsedAt,proto3" json:"last_used_at,omitempty"`
	EnvironmentName string  `protobuf:"bytes,4,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	SecretId        string  `protobuf:"bytes,5,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
}

func (x *SecretListItem) Reset() {
	*x = SecretListItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretListItem) ProtoMessage() {}

func (x *SecretListItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretListItem.ProtoReflect.Descriptor instead.
func (*SecretListItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{230}
}

func (x *SecretListItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SecretListItem) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SecretListItem) GetLastUsedAt() float64 {
	if x != nil {
		return x.LastUsedAt
	}
	return 0
}

func (x *SecretListItem) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *SecretListItem) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

type SecretListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentName string `protobuf:"bytes,1,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"` // leaving empty will assume a singular environment
}

func (x *SecretListRequest) Reset() {
	*x = SecretListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretListRequest) ProtoMessage() {}

func (x *SecretListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretListRequest.ProtoReflect.Descriptor instead.
func (*SecretListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{231}
}

func (x *SecretListRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type SecretListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items           []*SecretListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	EnvironmentName string            `protobuf:"bytes,2,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"` // the environment that was listed (useful when relying on "default" logic)
}

func (x *SecretListResponse) Reset() {
	*x = SecretListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretListResponse) ProtoMessage() {}

func (x *SecretListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretListResponse.ProtoReflect.Descriptor instead.
func (*SecretListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{232}
}

func (x *SecretListResponse) GetItems() []*SecretListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SecretListResponse) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type SharedVolumeGetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedVolumeId string `protobuf:"bytes,1,opt,name=shared_volume_id,json=sharedVolumeId,proto3" json:"shared_volume_id,omitempty"`
	Path           string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *SharedVolumeGetFileRequest) Reset() {
	*x = SharedVolumeGetFileRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeGetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeGetFileRequest) ProtoMessage() {}

func (x *SharedVolumeGetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeGetFileRequest.ProtoReflect.Descriptor instead.
func (*SharedVolumeGetFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{233}
}

func (x *SharedVolumeGetFileRequest) GetSharedVolumeId() string {
	if x != nil {
		return x.SharedVolumeId
	}
	return ""
}

func (x *SharedVolumeGetFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SharedVolumeGetFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataOneof:
	//
	//	*SharedVolumeGetFileResponse_Data
	//	*SharedVolumeGetFileResponse_DataBlobId
	DataOneof isSharedVolumeGetFileResponse_DataOneof `protobuf_oneof:"data_oneof"`
}

func (x *SharedVolumeGetFileResponse) Reset() {
	*x = SharedVolumeGetFileResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeGetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeGetFileResponse) ProtoMessage() {}

func (x *SharedVolumeGetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeGetFileResponse.ProtoReflect.Descriptor instead.
func (*SharedVolumeGetFileResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{234}
}

func (m *SharedVolumeGetFileResponse) GetDataOneof() isSharedVolumeGetFileResponse_DataOneof {
	if m != nil {
		return m.DataOneof
	}
	return nil
}

func (x *SharedVolumeGetFileResponse) GetData() []byte {
	if x, ok := x.GetDataOneof().(*SharedVolumeGetFileResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *SharedVolumeGetFileResponse) GetDataBlobId() string {
	if x, ok := x.GetDataOneof().(*SharedVolumeGetFileResponse_DataBlobId); ok {
		return x.DataBlobId
	}
	return ""
}

type isSharedVolumeGetFileResponse_DataOneof interface {
	isSharedVolumeGetFileResponse_DataOneof()
}

type SharedVolumeGetFileResponse_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type SharedVolumeGetFileResponse_DataBlobId struct {
	DataBlobId string `protobuf:"bytes,2,opt,name=data_blob_id,json=dataBlobId,proto3,oneof"`
}

func (*SharedVolumeGetFileResponse_Data) isSharedVolumeGetFileResponse_DataOneof() {}

func (*SharedVolumeGetFileResponse_DataBlobId) isSharedVolumeGetFileResponse_DataOneof() {}

type SharedVolumeGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName     string              `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Namespace          DeploymentNamespace `protobuf:"varint,2,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName    string              `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	ObjectCreationType ObjectCreationType  `protobuf:"varint,4,opt,name=object_creation_type,json=objectCreationType,proto3,enum=modal.client.ObjectCreationType" json:"object_creation_type,omitempty"`
	AppId              string              `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"` // only used with OBJECT_CREATION_TYPE_ANONYMOUS_OWNED_BY_APP
}

func (x *SharedVolumeGetOrCreateRequest) Reset() {
	*x = SharedVolumeGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeGetOrCreateRequest) ProtoMessage() {}

func (x *SharedVolumeGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*SharedVolumeGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{235}
}

func (x *SharedVolumeGetOrCreateRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *SharedVolumeGetOrCreateRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *SharedVolumeGetOrCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *SharedVolumeGetOrCreateRequest) GetObjectCreationType() ObjectCreationType {
	if x != nil {
		return x.ObjectCreationType
	}
	return ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED
}

func (x *SharedVolumeGetOrCreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type SharedVolumeGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedVolumeId string `protobuf:"bytes,1,opt,name=shared_volume_id,json=sharedVolumeId,proto3" json:"shared_volume_id,omitempty"`
}

func (x *SharedVolumeGetOrCreateResponse) Reset() {
	*x = SharedVolumeGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeGetOrCreateResponse) ProtoMessage() {}

func (x *SharedVolumeGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*SharedVolumeGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{236}
}

func (x *SharedVolumeGetOrCreateResponse) GetSharedVolumeId() string {
	if x != nil {
		return x.SharedVolumeId
	}
	return ""
}

type SharedVolumeHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedVolumeId string `protobuf:"bytes,1,opt,name=shared_volume_id,json=sharedVolumeId,proto3" json:"shared_volume_id,omitempty"`
}

func (x *SharedVolumeHeartbeatRequest) Reset() {
	*x = SharedVolumeHeartbeatRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeHeartbeatRequest) ProtoMessage() {}

func (x *SharedVolumeHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*SharedVolumeHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{237}
}

func (x *SharedVolumeHeartbeatRequest) GetSharedVolumeId() string {
	if x != nil {
		return x.SharedVolumeId
	}
	return ""
}

type SharedVolumeListFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedVolumeId string `protobuf:"bytes,1,opt,name=shared_volume_id,json=sharedVolumeId,proto3" json:"shared_volume_id,omitempty"`
	Path           string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *SharedVolumeListFilesRequest) Reset() {
	*x = SharedVolumeListFilesRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeListFilesRequest) ProtoMessage() {}

func (x *SharedVolumeListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeListFilesRequest.ProtoReflect.Descriptor instead.
func (*SharedVolumeListFilesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{238}
}

func (x *SharedVolumeListFilesRequest) GetSharedVolumeId() string {
	if x != nil {
		return x.SharedVolumeId
	}
	return ""
}

func (x *SharedVolumeListFilesRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SharedVolumeListFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*FileEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *SharedVolumeListFilesResponse) Reset() {
	*x = SharedVolumeListFilesResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeListFilesResponse) ProtoMessage() {}

func (x *SharedVolumeListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeListFilesResponse.ProtoReflect.Descriptor instead.
func (*SharedVolumeListFilesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{239}
}

func (x *SharedVolumeListFilesResponse) GetEntries() []*FileEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type SharedVolumeListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label          string        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"` // app name of object entity app
	SharedVolumeId string        `protobuf:"bytes,2,opt,name=shared_volume_id,json=sharedVolumeId,proto3" json:"shared_volume_id,omitempty"`
	CreatedAt      float64       `protobuf:"fixed64,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CloudProvider  CloudProvider `protobuf:"varint,4,opt,name=cloud_provider,json=cloudProvider,proto3,enum=modal.client.CloudProvider" json:"cloud_provider,omitempty"`
}

func (x *SharedVolumeListItem) Reset() {
	*x = SharedVolumeListItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeListItem) ProtoMessage() {}

func (x *SharedVolumeListItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeListItem.ProtoReflect.Descriptor instead.
func (*SharedVolumeListItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{240}
}

func (x *SharedVolumeListItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SharedVolumeListItem) GetSharedVolumeId() string {
	if x != nil {
		return x.SharedVolumeId
	}
	return ""
}

func (x *SharedVolumeListItem) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SharedVolumeListItem) GetCloudProvider() CloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return CloudProvider_CLOUD_PROVIDER_UNSPECIFIED
}

type SharedVolumeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentName string `protobuf:"bytes,1,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *SharedVolumeListRequest) Reset() {
	*x = SharedVolumeListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeListRequest) ProtoMessage() {}

func (x *SharedVolumeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeListRequest.ProtoReflect.Descriptor instead.
func (*SharedVolumeListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{241}
}

func (x *SharedVolumeListRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type SharedVolumeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items           []*SharedVolumeListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	EnvironmentName string                  `protobuf:"bytes,2,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *SharedVolumeListResponse) Reset() {
	*x = SharedVolumeListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeListResponse) ProtoMessage() {}

func (x *SharedVolumeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeListResponse.ProtoReflect.Descriptor instead.
func (*SharedVolumeListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{242}
}

func (x *SharedVolumeListResponse) GetItems() []*SharedVolumeListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedVolumeListResponse) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type SharedVolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPath        string        `protobuf:"bytes,1,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	SharedVolumeId   string        `protobuf:"bytes,2,opt,name=shared_volume_id,json=sharedVolumeId,proto3" json:"shared_volume_id,omitempty"`
	CloudProvider    CloudProvider `protobuf:"varint,3,opt,name=cloud_provider,json=cloudProvider,proto3,enum=modal.client.CloudProvider" json:"cloud_provider,omitempty"`
	AllowCrossRegion bool          `protobuf:"varint,4,opt,name=allow_cross_region,json=allowCrossRegion,proto3" json:"allow_cross_region,omitempty"`
}

func (x *SharedVolumeMount) Reset() {
	*x = SharedVolumeMount{}
	mi := &file_pkg_modal_api_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeMount) ProtoMessage() {}

func (x *SharedVolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeMount.ProtoReflect.Descriptor instead.
func (*SharedVolumeMount) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{243}
}

func (x *SharedVolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *SharedVolumeMount) GetSharedVolumeId() string {
	if x != nil {
		return x.SharedVolumeId
	}
	return ""
}

func (x *SharedVolumeMount) GetCloudProvider() CloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return CloudProvider_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *SharedVolumeMount) GetAllowCrossRegion() bool {
	if x != nil {
		return x.AllowCrossRegion
	}
	return false
}

type SharedVolumePutFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedVolumeId string `protobuf:"bytes,1,opt,name=shared_volume_id,json=sharedVolumeId,proto3" json:"shared_volume_id,omitempty"`
	Path           string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Sha256Hex      string `protobuf:"bytes,3,opt,name=sha256_hex,json=sha256Hex,proto3" json:"sha256_hex,omitempty"`
	// Types that are assignable to DataOneof:
	//
	//	*SharedVolumePutFileRequest_Data
	//	*SharedVolumePutFileRequest_DataBlobId
	DataOneof isSharedVolumePutFileRequest_DataOneof `protobuf_oneof:"data_oneof"`
	Resumable bool                                   `protobuf:"varint,6,opt,name=resumable,proto3" json:"resumable,omitempty"` // remove when required client version >= 47
}

func (x *SharedVolumePutFileRequest) Reset() {
	*x = SharedVolumePutFileRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumePutFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumePutFileRequest) ProtoMessage() {}

func (x *SharedVolumePutFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumePutFileRequest.ProtoReflect.Descriptor instead.
func (*SharedVolumePutFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{244}
}

func (x *SharedVolumePutFileRequest) GetSharedVolumeId() string {
	if x != nil {
		return x.SharedVolumeId
	}
	return ""
}

func (x *SharedVolumePutFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SharedVolumePutFileRequest) GetSha256Hex() string {
	if x != nil {
		return x.Sha256Hex
	}
	return ""
}

func (m *SharedVolumePutFileRequest) GetDataOneof() isSharedVolumePutFileRequest_DataOneof {
	if m != nil {
		return m.DataOneof
	}
	return nil
}

func (x *SharedVolumePutFileRequest) GetData() []byte {
	if x, ok := x.GetDataOneof().(*SharedVolumePutFileRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (x *SharedVolumePutFileRequest) GetDataBlobId() string {
	if x, ok := x.GetDataOneof().(*SharedVolumePutFileRequest_DataBlobId); ok {
		return x.DataBlobId
	}
	return ""
}

func (x *SharedVolumePutFileRequest) GetResumable() bool {
	if x != nil {
		return x.Resumable
	}
	return false
}

type isSharedVolumePutFileRequest_DataOneof interface {
	isSharedVolumePutFileRequest_DataOneof()
}

type SharedVolumePutFileRequest_Data struct {
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3,oneof"`
}

type SharedVolumePutFileRequest_DataBlobId struct {
	DataBlobId string `protobuf:"bytes,5,opt,name=data_blob_id,json=dataBlobId,proto3,oneof"`
}

func (*SharedVolumePutFileRequest_Data) isSharedVolumePutFileRequest_DataOneof() {}

func (*SharedVolumePutFileRequest_DataBlobId) isSharedVolumePutFileRequest_DataOneof() {}

type SharedVolumePutFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *SharedVolumePutFileResponse) Reset() {
	*x = SharedVolumePutFileResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumePutFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumePutFileResponse) ProtoMessage() {}

func (x *SharedVolumePutFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumePutFileResponse.ProtoReflect.Descriptor instead.
func (*SharedVolumePutFileResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{245}
}

func (x *SharedVolumePutFileResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type SharedVolumeRemoveFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedVolumeId string `protobuf:"bytes,1,opt,name=shared_volume_id,json=sharedVolumeId,proto3" json:"shared_volume_id,omitempty"`
	Path           string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Recursive      bool   `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *SharedVolumeRemoveFileRequest) Reset() {
	*x = SharedVolumeRemoveFileRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedVolumeRemoveFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedVolumeRemoveFileRequest) ProtoMessage() {}

func (x *SharedVolumeRemoveFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedVolumeRemoveFileRequest.ProtoReflect.Descriptor instead.
func (*SharedVolumeRemoveFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{246}
}

func (x *SharedVolumeRemoveFileRequest) GetSharedVolumeId() string {
	if x != nil {
		return x.SharedVolumeId
	}
	return ""
}

func (x *SharedVolumeRemoveFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SharedVolumeRemoveFileRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type TaskCurrentInputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputIds []string `protobuf:"bytes,1,rep,name=input_ids,json=inputIds,proto3" json:"input_ids,omitempty"`
}

func (x *TaskCurrentInputsResponse) Reset() {
	*x = TaskCurrentInputsResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCurrentInputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCurrentInputsResponse) ProtoMessage() {}

func (x *TaskCurrentInputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCurrentInputsResponse.ProtoReflect.Descriptor instead.
func (*TaskCurrentInputsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{247}
}

func (x *TaskCurrentInputsResponse) GetInputIds() []string {
	if x != nil {
		return x.InputIds
	}
	return nil
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartedAt  float64        `protobuf:"fixed64,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt float64        `protobuf:"fixed64,3,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	Result     *GenericResult `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	EnqueuedAt float64        `protobuf:"fixed64,5,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"enqueued_at,omitempty"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{248}
}

func (x *TaskInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskInfo) GetStartedAt() float64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *TaskInfo) GetFinishedAt() float64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *TaskInfo) GetResult() *GenericResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TaskInfo) GetEnqueuedAt() float64 {
	if x != nil {
		return x.EnqueuedAt
	}
	return 0
}

type TaskListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskListRequest) Reset() {
	*x = TaskListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListRequest) ProtoMessage() {}

func (x *TaskListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListRequest.ProtoReflect.Descriptor instead.
func (*TaskListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{249}
}

type TaskListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*TaskStats `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *TaskListResponse) Reset() {
	*x = TaskListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskListResponse) ProtoMessage() {}

func (x *TaskListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskListResponse.ProtoReflect.Descriptor instead.
func (*TaskListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{250}
}

func (x *TaskListResponse) GetTasks() []*TaskStats {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type TaskLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           string         `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TaskState      TaskState      `protobuf:"varint,6,opt,name=task_state,json=taskState,proto3,enum=modal.client.TaskState" json:"task_state,omitempty"`
	Timestamp      float64        `protobuf:"fixed64,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FileDescriptor FileDescriptor `protobuf:"varint,8,opt,name=file_descriptor,json=fileDescriptor,proto3,enum=modal.client.FileDescriptor" json:"file_descriptor,omitempty"`
	TaskProgress   *TaskProgress  `protobuf:"bytes,9,opt,name=task_progress,json=taskProgress,proto3" json:"task_progress,omitempty"`
	FunctionCallId string         `protobuf:"bytes,10,opt,name=function_call_id,json=functionCallId,proto3" json:"function_call_id,omitempty"`
	InputId        string         `protobuf:"bytes,11,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
}

func (x *TaskLogs) Reset() {
	*x = TaskLogs{}
	mi := &file_pkg_modal_api_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogs) ProtoMessage() {}

func (x *TaskLogs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogs.ProtoReflect.Descriptor instead.
func (*TaskLogs) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{251}
}

func (x *TaskLogs) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskLogs) GetTaskState() TaskState {
	if x != nil {
		return x.TaskState
	}
	return TaskState_TASK_STATE_UNSPECIFIED
}

func (x *TaskLogs) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TaskLogs) GetFileDescriptor() FileDescriptor {
	if x != nil {
		return x.FileDescriptor
	}
	return FileDescriptor_FILE_DESCRIPTOR_UNSPECIFIED
}

func (x *TaskLogs) GetTaskProgress() *TaskProgress {
	if x != nil {
		return x.TaskProgress
	}
	return nil
}

func (x *TaskLogs) GetFunctionCallId() string {
	if x != nil {
		return x.FunctionCallId
	}
	return ""
}

func (x *TaskLogs) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

type TaskLogsBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string      `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Items      []*TaskLogs `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	EntryId    string      `protobuf:"bytes,5,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	AppDone    bool        `protobuf:"varint,10,opt,name=app_done,json=appDone,proto3" json:"app_done,omitempty"`
	FunctionId string      `protobuf:"bytes,11,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	InputId    string      `protobuf:"bytes,12,opt,name=input_id,json=inputId,proto3" json:"input_id,omitempty"`
	ImageId    string      `protobuf:"bytes,13,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"` // Used for image logs
	Eof        bool        `protobuf:"varint,14,opt,name=eof,proto3" json:"eof,omitempty"`
	PtyExecId  string      `protobuf:"bytes,15,opt,name=pty_exec_id,json=ptyExecId,proto3" json:"pty_exec_id,omitempty"` // Used for interactive functions
}

func (x *TaskLogsBatch) Reset() {
	*x = TaskLogsBatch{}
	mi := &file_pkg_modal_api_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskLogsBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogsBatch) ProtoMessage() {}

func (x *TaskLogsBatch) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogsBatch.ProtoReflect.Descriptor instead.
func (*TaskLogsBatch) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{252}
}

func (x *TaskLogsBatch) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskLogsBatch) GetItems() []*TaskLogs {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *TaskLogsBatch) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *TaskLogsBatch) GetAppDone() bool {
	if x != nil {
		return x.AppDone
	}
	return false
}

func (x *TaskLogsBatch) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *TaskLogsBatch) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *TaskLogsBatch) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *TaskLogsBatch) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

func (x *TaskLogsBatch) GetPtyExecId() string {
	if x != nil {
		return x.PtyExecId
	}
	return ""
}

type TaskProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len          uint64       `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	Pos          uint64       `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	ProgressType ProgressType `protobuf:"varint,3,opt,name=progress_type,json=progressType,proto3,enum=modal.client.ProgressType" json:"progress_type,omitempty"`
	Description  string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *TaskProgress) Reset() {
	*x = TaskProgress{}
	mi := &file_pkg_modal_api_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgress) ProtoMessage() {}

func (x *TaskProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgress.ProtoReflect.Descriptor instead.
func (*TaskProgress) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{253}
}

func (x *TaskProgress) GetLen() uint64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *TaskProgress) GetPos() uint64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *TaskProgress) GetProgressType() ProgressType {
	if x != nil {
		return x.ProgressType
	}
	return ProgressType_IMAGE_SNAPSHOT_UPLOAD
}

func (x *TaskProgress) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type TaskResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *GenericResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TaskResultRequest) Reset() {
	*x = TaskResultRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResultRequest) ProtoMessage() {}

func (x *TaskResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResultRequest.ProtoReflect.Descriptor instead.
func (*TaskResultRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{254}
}

func (x *TaskResultRequest) GetResult() *GenericResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type TaskStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	AppId          string  `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppDescription string  `protobuf:"bytes,3,opt,name=app_description,json=appDescription,proto3" json:"app_description,omitempty"`
	StartedAt      float64 `protobuf:"fixed64,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
}

func (x *TaskStats) Reset() {
	*x = TaskStats{}
	mi := &file_pkg_modal_api_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStats) ProtoMessage() {}

func (x *TaskStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStats.ProtoReflect.Descriptor instead.
func (*TaskStats) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{255}
}

func (x *TaskStats) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskStats) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *TaskStats) GetAppDescription() string {
	if x != nil {
		return x.AppDescription
	}
	return ""
}

func (x *TaskStats) GetStartedAt() float64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

type TaskTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                   uint32     `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Resources              *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	TargetConcurrentInputs uint32     `protobuf:"varint,3,opt,name=target_concurrent_inputs,json=targetConcurrentInputs,proto3" json:"target_concurrent_inputs,omitempty"`
	MaxConcurrentInputs    uint32     `protobuf:"varint,4,opt,name=max_concurrent_inputs,json=maxConcurrentInputs,proto3" json:"max_concurrent_inputs,omitempty"`
	// TODO(irfansharif): Just move this into a column in the task table instead?
	// Deprecate all above fields and get rid of this message altogether
	Index uint32 `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"` // pointer into FunctionData, if using that as the underlying definition type
}

func (x *TaskTemplate) Reset() {
	*x = TaskTemplate{}
	mi := &file_pkg_modal_api_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTemplate) ProtoMessage() {}

func (x *TaskTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTemplate.ProtoReflect.Descriptor instead.
func (*TaskTemplate) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{256}
}

func (x *TaskTemplate) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *TaskTemplate) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TaskTemplate) GetTargetConcurrentInputs() uint32 {
	if x != nil {
		return x.TargetConcurrentInputs
	}
	return 0
}

func (x *TaskTemplate) GetMaxConcurrentInputs() uint32 {
	if x != nil {
		return x.MaxConcurrentInputs
	}
	return 0
}

func (x *TaskTemplate) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type TokenFlowCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtmSource     string `protobuf:"bytes,3,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	LocalhostPort int32  `protobuf:"varint,4,opt,name=localhost_port,json=localhostPort,proto3" json:"localhost_port,omitempty"`
	NextUrl       string `protobuf:"bytes,5,opt,name=next_url,json=nextUrl,proto3" json:"next_url,omitempty"`
}

func (x *TokenFlowCreateRequest) Reset() {
	*x = TokenFlowCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenFlowCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFlowCreateRequest) ProtoMessage() {}

func (x *TokenFlowCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFlowCreateRequest.ProtoReflect.Descriptor instead.
func (*TokenFlowCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{257}
}

func (x *TokenFlowCreateRequest) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *TokenFlowCreateRequest) GetLocalhostPort() int32 {
	if x != nil {
		return x.LocalhostPort
	}
	return 0
}

func (x *TokenFlowCreateRequest) GetNextUrl() string {
	if x != nil {
		return x.NextUrl
	}
	return ""
}

type TokenFlowCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenFlowId string `protobuf:"bytes,1,opt,name=token_flow_id,json=tokenFlowId,proto3" json:"token_flow_id,omitempty"`
	WebUrl      string `protobuf:"bytes,2,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	Code        string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	WaitSecret  string `protobuf:"bytes,4,opt,name=wait_secret,json=waitSecret,proto3" json:"wait_secret,omitempty"`
}

func (x *TokenFlowCreateResponse) Reset() {
	*x = TokenFlowCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenFlowCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFlowCreateResponse) ProtoMessage() {}

func (x *TokenFlowCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFlowCreateResponse.ProtoReflect.Descriptor instead.
func (*TokenFlowCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{258}
}

func (x *TokenFlowCreateResponse) GetTokenFlowId() string {
	if x != nil {
		return x.TokenFlowId
	}
	return ""
}

func (x *TokenFlowCreateResponse) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *TokenFlowCreateResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TokenFlowCreateResponse) GetWaitSecret() string {
	if x != nil {
		return x.WaitSecret
	}
	return ""
}

type TokenFlowWaitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout     float32 `protobuf:"fixed32,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	TokenFlowId string  `protobuf:"bytes,2,opt,name=token_flow_id,json=tokenFlowId,proto3" json:"token_flow_id,omitempty"`
	WaitSecret  string  `protobuf:"bytes,3,opt,name=wait_secret,json=waitSecret,proto3" json:"wait_secret,omitempty"`
}

func (x *TokenFlowWaitRequest) Reset() {
	*x = TokenFlowWaitRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenFlowWaitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFlowWaitRequest) ProtoMessage() {}

func (x *TokenFlowWaitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFlowWaitRequest.ProtoReflect.Descriptor instead.
func (*TokenFlowWaitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{259}
}

func (x *TokenFlowWaitRequest) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TokenFlowWaitRequest) GetTokenFlowId() string {
	if x != nil {
		return x.TokenFlowId
	}
	return ""
}

func (x *TokenFlowWaitRequest) GetWaitSecret() string {
	if x != nil {
		return x.WaitSecret
	}
	return ""
}

type TokenFlowWaitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId           string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenSecret       string `protobuf:"bytes,2,opt,name=token_secret,json=tokenSecret,proto3" json:"token_secret,omitempty"`
	Timeout           bool   `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	WorkspaceUsername string `protobuf:"bytes,4,opt,name=workspace_username,json=workspaceUsername,proto3" json:"workspace_username,omitempty"`
}

func (x *TokenFlowWaitResponse) Reset() {
	*x = TokenFlowWaitResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenFlowWaitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenFlowWaitResponse) ProtoMessage() {}

func (x *TokenFlowWaitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenFlowWaitResponse.ProtoReflect.Descriptor instead.
func (*TokenFlowWaitResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{260}
}

func (x *TokenFlowWaitResponse) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *TokenFlowWaitResponse) GetTokenSecret() string {
	if x != nil {
		return x.TokenSecret
	}
	return ""
}

func (x *TokenFlowWaitResponse) GetTimeout() bool {
	if x != nil {
		return x.Timeout
	}
	return false
}

func (x *TokenFlowWaitResponse) GetWorkspaceUsername() string {
	if x != nil {
		return x.WorkspaceUsername
	}
	return ""
}

type TunnelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host            string  `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port            uint32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	UnencryptedHost *string `protobuf:"bytes,3,opt,name=unencrypted_host,json=unencryptedHost,proto3,oneof" json:"unencrypted_host,omitempty"`
	UnencryptedPort *uint32 `protobuf:"varint,4,opt,name=unencrypted_port,json=unencryptedPort,proto3,oneof" json:"unencrypted_port,omitempty"`
	ContainerPort   uint32  `protobuf:"varint,5,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
}

func (x *TunnelData) Reset() {
	*x = TunnelData{}
	mi := &file_pkg_modal_api_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelData) ProtoMessage() {}

func (x *TunnelData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelData.ProtoReflect.Descriptor instead.
func (*TunnelData) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{261}
}

func (x *TunnelData) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TunnelData) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TunnelData) GetUnencryptedHost() string {
	if x != nil && x.UnencryptedHost != nil {
		return *x.UnencryptedHost
	}
	return ""
}

func (x *TunnelData) GetUnencryptedPort() uint32 {
	if x != nil && x.UnencryptedPort != nil {
		return *x.UnencryptedPort
	}
	return 0
}

func (x *TunnelData) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

type TunnelStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port        uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Unencrypted bool   `protobuf:"varint,2,opt,name=unencrypted,proto3" json:"unencrypted,omitempty"`
}

func (x *TunnelStartRequest) Reset() {
	*x = TunnelStartRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelStartRequest) ProtoMessage() {}

func (x *TunnelStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelStartRequest.ProtoReflect.Descriptor instead.
func (*TunnelStartRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{262}
}

func (x *TunnelStartRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TunnelStartRequest) GetUnencrypted() bool {
	if x != nil {
		return x.Unencrypted
	}
	return false
}

type TunnelStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host            string  `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port            uint32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	UnencryptedHost *string `protobuf:"bytes,3,opt,name=unencrypted_host,json=unencryptedHost,proto3,oneof" json:"unencrypted_host,omitempty"`
	UnencryptedPort *uint32 `protobuf:"varint,4,opt,name=unencrypted_port,json=unencryptedPort,proto3,oneof" json:"unencrypted_port,omitempty"`
}

func (x *TunnelStartResponse) Reset() {
	*x = TunnelStartResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelStartResponse) ProtoMessage() {}

func (x *TunnelStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelStartResponse.ProtoReflect.Descriptor instead.
func (*TunnelStartResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{263}
}

func (x *TunnelStartResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TunnelStartResponse) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TunnelStartResponse) GetUnencryptedHost() string {
	if x != nil && x.UnencryptedHost != nil {
		return *x.UnencryptedHost
	}
	return ""
}

func (x *TunnelStartResponse) GetUnencryptedPort() uint32 {
	if x != nil && x.UnencryptedPort != nil {
		return *x.UnencryptedPort
	}
	return 0
}

type TunnelStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TunnelStopRequest) Reset() {
	*x = TunnelStopRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelStopRequest) ProtoMessage() {}

func (x *TunnelStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelStopRequest.ProtoReflect.Descriptor instead.
func (*TunnelStopRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{264}
}

func (x *TunnelStopRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type TunnelStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *TunnelStopResponse) Reset() {
	*x = TunnelStopResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelStopResponse) ProtoMessage() {}

func (x *TunnelStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelStopResponse.ProtoReflect.Descriptor instead.
func (*TunnelStopResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{265}
}

func (x *TunnelStopResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type VolumeCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE(staffan): Mounting a volume in multiple locations is not supported, so volume_id alone uniquely identifies
	// a volume mount.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *VolumeCommitRequest) Reset() {
	*x = VolumeCommitRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCommitRequest) ProtoMessage() {}

func (x *VolumeCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCommitRequest.ProtoReflect.Descriptor instead.
func (*VolumeCommitRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{266}
}

func (x *VolumeCommitRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

type VolumeCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipReload bool `protobuf:"varint,1,opt,name=skip_reload,json=skipReload,proto3" json:"skip_reload,omitempty"`
}

func (x *VolumeCommitResponse) Reset() {
	*x = VolumeCommitResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCommitResponse) ProtoMessage() {}

func (x *VolumeCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCommitResponse.ProtoReflect.Descriptor instead.
func (*VolumeCommitResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{267}
}

func (x *VolumeCommitResponse) GetSkipReload() bool {
	if x != nil {
		return x.SkipReload
	}
	return false
}

type VolumeCopyFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId  string   `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	SrcPaths  []string `protobuf:"bytes,2,rep,name=src_paths,json=srcPaths,proto3" json:"src_paths,omitempty"`
	DstPath   string   `protobuf:"bytes,3,opt,name=dst_path,json=dstPath,proto3" json:"dst_path,omitempty"`
	Recursive bool     `protobuf:"varint,4,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *VolumeCopyFilesRequest) Reset() {
	*x = VolumeCopyFilesRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCopyFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCopyFilesRequest) ProtoMessage() {}

func (x *VolumeCopyFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCopyFilesRequest.ProtoReflect.Descriptor instead.
func (*VolumeCopyFilesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{268}
}

func (x *VolumeCopyFilesRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeCopyFilesRequest) GetSrcPaths() []string {
	if x != nil {
		return x.SrcPaths
	}
	return nil
}

func (x *VolumeCopyFilesRequest) GetDstPath() string {
	if x != nil {
		return x.DstPath
	}
	return ""
}

func (x *VolumeCopyFilesRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type VolumeDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// Deprecated: Marked as deprecated in pkg/modal/api.proto.
	EnvironmentName string `protobuf:"bytes,2,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *VolumeDeleteRequest) Reset() {
	*x = VolumeDeleteRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeDeleteRequest) ProtoMessage() {}

func (x *VolumeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeDeleteRequest.ProtoReflect.Descriptor instead.
func (*VolumeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{269}
}

func (x *VolumeDeleteRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

// Deprecated: Marked as deprecated in pkg/modal/api.proto.
func (x *VolumeDeleteRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type VolumeGetFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Start    uint64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	Len      uint64 `protobuf:"varint,4,opt,name=len,proto3" json:"len,omitempty"` // 0 is interpreted as 'read to end'
}

func (x *VolumeGetFileRequest) Reset() {
	*x = VolumeGetFileRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeGetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGetFileRequest) ProtoMessage() {}

func (x *VolumeGetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGetFileRequest.ProtoReflect.Descriptor instead.
func (*VolumeGetFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{270}
}

func (x *VolumeGetFileRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeGetFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VolumeGetFileRequest) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *VolumeGetFileRequest) GetLen() uint64 {
	if x != nil {
		return x.Len
	}
	return 0
}

type VolumeGetFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataOneof:
	//
	//	*VolumeGetFileResponse_Data
	//	*VolumeGetFileResponse_DataBlobId
	DataOneof isVolumeGetFileResponse_DataOneof `protobuf_oneof:"data_oneof"`
	Size      uint64                            `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`   // total file size
	Start     uint64                            `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"` // file position of first byte returned
	Len       uint64                            `protobuf:"varint,5,opt,name=len,proto3" json:"len,omitempty"`     // number of bytes returned
}

func (x *VolumeGetFileResponse) Reset() {
	*x = VolumeGetFileResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeGetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGetFileResponse) ProtoMessage() {}

func (x *VolumeGetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGetFileResponse.ProtoReflect.Descriptor instead.
func (*VolumeGetFileResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{271}
}

func (m *VolumeGetFileResponse) GetDataOneof() isVolumeGetFileResponse_DataOneof {
	if m != nil {
		return m.DataOneof
	}
	return nil
}

func (x *VolumeGetFileResponse) GetData() []byte {
	if x, ok := x.GetDataOneof().(*VolumeGetFileResponse_Data); ok {
		return x.Data
	}
	return nil
}

func (x *VolumeGetFileResponse) GetDataBlobId() string {
	if x, ok := x.GetDataOneof().(*VolumeGetFileResponse_DataBlobId); ok {
		return x.DataBlobId
	}
	return ""
}

func (x *VolumeGetFileResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VolumeGetFileResponse) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *VolumeGetFileResponse) GetLen() uint64 {
	if x != nil {
		return x.Len
	}
	return 0
}

type isVolumeGetFileResponse_DataOneof interface {
	isVolumeGetFileResponse_DataOneof()
}

type VolumeGetFileResponse_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type VolumeGetFileResponse_DataBlobId struct {
	DataBlobId string `protobuf:"bytes,2,opt,name=data_blob_id,json=dataBlobId,proto3,oneof"`
}

func (*VolumeGetFileResponse_Data) isVolumeGetFileResponse_DataOneof() {}

func (*VolumeGetFileResponse_DataBlobId) isVolumeGetFileResponse_DataOneof() {}

type VolumeGetOrCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentName     string              `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	Namespace          DeploymentNamespace `protobuf:"varint,2,opt,name=namespace,proto3,enum=modal.client.DeploymentNamespace" json:"namespace,omitempty"`
	EnvironmentName    string              `protobuf:"bytes,3,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	ObjectCreationType ObjectCreationType  `protobuf:"varint,4,opt,name=object_creation_type,json=objectCreationType,proto3,enum=modal.client.ObjectCreationType" json:"object_creation_type,omitempty"`
	AppId              string              `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"` // only used with OBJECT_CREATION_TYPE_ANONYMOUS_OWNED_BY_APP
	Version            VolumeFsVersion     `protobuf:"varint,6,opt,name=version,proto3,enum=modal.client.VolumeFsVersion" json:"version,omitempty"`
}

func (x *VolumeGetOrCreateRequest) Reset() {
	*x = VolumeGetOrCreateRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeGetOrCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGetOrCreateRequest) ProtoMessage() {}

func (x *VolumeGetOrCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGetOrCreateRequest.ProtoReflect.Descriptor instead.
func (*VolumeGetOrCreateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{272}
}

func (x *VolumeGetOrCreateRequest) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *VolumeGetOrCreateRequest) GetNamespace() DeploymentNamespace {
	if x != nil {
		return x.Namespace
	}
	return DeploymentNamespace_DEPLOYMENT_NAMESPACE_UNSPECIFIED
}

func (x *VolumeGetOrCreateRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *VolumeGetOrCreateRequest) GetObjectCreationType() ObjectCreationType {
	if x != nil {
		return x.ObjectCreationType
	}
	return ObjectCreationType_OBJECT_CREATION_TYPE_UNSPECIFIED
}

func (x *VolumeGetOrCreateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *VolumeGetOrCreateRequest) GetVersion() VolumeFsVersion {
	if x != nil {
		return x.Version
	}
	return VolumeFsVersion_UNSPECIFIED
}

type VolumeGetOrCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId string          `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	Version  VolumeFsVersion `protobuf:"varint,2,opt,name=version,proto3,enum=modal.client.VolumeFsVersion" json:"version,omitempty"`
}

func (x *VolumeGetOrCreateResponse) Reset() {
	*x = VolumeGetOrCreateResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeGetOrCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGetOrCreateResponse) ProtoMessage() {}

func (x *VolumeGetOrCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGetOrCreateResponse.ProtoReflect.Descriptor instead.
func (*VolumeGetOrCreateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{273}
}

func (x *VolumeGetOrCreateResponse) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeGetOrCreateResponse) GetVersion() VolumeFsVersion {
	if x != nil {
		return x.Version
	}
	return VolumeFsVersion_UNSPECIFIED
}

type VolumeHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *VolumeHeartbeatRequest) Reset() {
	*x = VolumeHeartbeatRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeHeartbeatRequest) ProtoMessage() {}

func (x *VolumeHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*VolumeHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{274}
}

func (x *VolumeHeartbeatRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

type VolumeListFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId   string  `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	Path       string  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Recursive  bool    `protobuf:"varint,4,opt,name=recursive,proto3" json:"recursive,omitempty"`
	MaxEntries *uint32 `protobuf:"varint,3,opt,name=max_entries,json=maxEntries,proto3,oneof" json:"max_entries,omitempty"`
}

func (x *VolumeListFilesRequest) Reset() {
	*x = VolumeListFilesRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeListFilesRequest) ProtoMessage() {}

func (x *VolumeListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeListFilesRequest.ProtoReflect.Descriptor instead.
func (*VolumeListFilesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{275}
}

func (x *VolumeListFilesRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeListFilesRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VolumeListFilesRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *VolumeListFilesRequest) GetMaxEntries() uint32 {
	if x != nil && x.MaxEntries != nil {
		return *x.MaxEntries
	}
	return 0
}

type VolumeListFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*FileEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *VolumeListFilesResponse) Reset() {
	*x = VolumeListFilesResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeListFilesResponse) ProtoMessage() {}

func (x *VolumeListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeListFilesResponse.ProtoReflect.Descriptor instead.
func (*VolumeListFilesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{276}
}

func (x *VolumeListFilesResponse) GetEntries() []*FileEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type VolumeListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label     string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"` // app name of object entity app
	VolumeId  string  `protobuf:"bytes,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	CreatedAt float64 `protobuf:"fixed64,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *VolumeListItem) Reset() {
	*x = VolumeListItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeListItem) ProtoMessage() {}

func (x *VolumeListItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeListItem.ProtoReflect.Descriptor instead.
func (*VolumeListItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{277}
}

func (x *VolumeListItem) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *VolumeListItem) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeListItem) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type VolumeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvironmentName string `protobuf:"bytes,1,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *VolumeListRequest) Reset() {
	*x = VolumeListRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeListRequest) ProtoMessage() {}

func (x *VolumeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeListRequest.ProtoReflect.Descriptor instead.
func (*VolumeListRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{278}
}

func (x *VolumeListRequest) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type VolumeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items           []*VolumeListItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	EnvironmentName string            `protobuf:"bytes,2,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
}

func (x *VolumeListResponse) Reset() {
	*x = VolumeListResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeListResponse) ProtoMessage() {}

func (x *VolumeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeListResponse.ProtoReflect.Descriptor instead.
func (*VolumeListResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{279}
}

func (x *VolumeListResponse) GetItems() []*VolumeListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *VolumeListResponse) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

type VolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId               string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	MountPath              string `protobuf:"bytes,2,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	AllowBackgroundCommits bool   `protobuf:"varint,3,opt,name=allow_background_commits,json=allowBackgroundCommits,proto3" json:"allow_background_commits,omitempty"`
}

func (x *VolumeMount) Reset() {
	*x = VolumeMount{}
	mi := &file_pkg_modal_api_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeMount) ProtoMessage() {}

func (x *VolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeMount.ProtoReflect.Descriptor instead.
func (*VolumeMount) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{280}
}

func (x *VolumeMount) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *VolumeMount) GetAllowBackgroundCommits() bool {
	if x != nil {
		return x.AllowBackgroundCommits
	}
	return false
}

type VolumePutFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// TODO(staffan): This is obviously unfortunately named, but provides what we need - consider renaming.
	Files []*MountFile `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	// If set to true, prevent overwriting existing files. (Note that we don't allow overwriting
	// existing directories with uploaded files regardless.)
	DisallowOverwriteExistingFiles bool `protobuf:"varint,3,opt,name=disallow_overwrite_existing_files,json=disallowOverwriteExistingFiles,proto3" json:"disallow_overwrite_existing_files,omitempty"`
}

func (x *VolumePutFilesRequest) Reset() {
	*x = VolumePutFilesRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumePutFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumePutFilesRequest) ProtoMessage() {}

func (x *VolumePutFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumePutFilesRequest.ProtoReflect.Descriptor instead.
func (*VolumePutFilesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{281}
}

func (x *VolumePutFilesRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumePutFilesRequest) GetFiles() []*MountFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *VolumePutFilesRequest) GetDisallowOverwriteExistingFiles() bool {
	if x != nil {
		return x.DisallowOverwriteExistingFiles
	}
	return false
}

type VolumeReloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE(staffan): Mounting a volume in multiple locations is not supported, so volume_id alone uniquely identifies
	// a volume mount.
	VolumeId string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *VolumeReloadRequest) Reset() {
	*x = VolumeReloadRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeReloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeReloadRequest) ProtoMessage() {}

func (x *VolumeReloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeReloadRequest.ProtoReflect.Descriptor instead.
func (*VolumeReloadRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{282}
}

func (x *VolumeReloadRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

type VolumeRemoveFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId  string `protobuf:"bytes,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	Path      string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Recursive bool   `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *VolumeRemoveFileRequest) Reset() {
	*x = VolumeRemoveFileRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeRemoveFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRemoveFileRequest) ProtoMessage() {}

func (x *VolumeRemoveFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRemoveFileRequest.ProtoReflect.Descriptor instead.
func (*VolumeRemoveFileRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{283}
}

func (x *VolumeRemoveFileRequest) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

func (x *VolumeRemoveFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *VolumeRemoveFileRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type WebUrlInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Truncated bool `protobuf:"varint,1,opt,name=truncated,proto3" json:"truncated,omitempty"`
	// Deprecated: Marked as deprecated in pkg/modal/api.proto.
	HasUniqueHash bool `protobuf:"varint,2,opt,name=has_unique_hash,json=hasUniqueHash,proto3" json:"has_unique_hash,omitempty"`
	LabelStolen   bool `protobuf:"varint,3,opt,name=label_stolen,json=labelStolen,proto3" json:"label_stolen,omitempty"`
}

func (x *WebUrlInfo) Reset() {
	*x = WebUrlInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebUrlInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebUrlInfo) ProtoMessage() {}

func (x *WebUrlInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebUrlInfo.ProtoReflect.Descriptor instead.
func (*WebUrlInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{284}
}

func (x *WebUrlInfo) GetTruncated() bool {
	if x != nil {
		return x.Truncated
	}
	return false
}

// Deprecated: Marked as deprecated in pkg/modal/api.proto.
func (x *WebUrlInfo) GetHasUniqueHash() bool {
	if x != nil {
		return x.HasUniqueHash
	}
	return false
}

func (x *WebUrlInfo) GetLabelStolen() bool {
	if x != nil {
		return x.LabelStolen
	}
	return false
}

type WebhookConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    WebhookType           `protobuf:"varint,1,opt,name=type,proto3,enum=modal.client.WebhookType" json:"type,omitempty"`
	Method                  string                `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	RequestedSuffix         string                `protobuf:"bytes,4,opt,name=requested_suffix,json=requestedSuffix,proto3" json:"requested_suffix,omitempty"`
	AsyncMode               WebhookAsyncMode      `protobuf:"varint,5,opt,name=async_mode,json=asyncMode,proto3,enum=modal.client.WebhookAsyncMode" json:"async_mode,omitempty"`
	CustomDomains           []*CustomDomainConfig `protobuf:"bytes,6,rep,name=custom_domains,json=customDomains,proto3" json:"custom_domains,omitempty"`
	WebServerPort           uint32                `protobuf:"varint,7,opt,name=web_server_port,json=webServerPort,proto3" json:"web_server_port,omitempty"`
	WebServerStartupTimeout float32               `protobuf:"fixed32,8,opt,name=web_server_startup_timeout,json=webServerStartupTimeout,proto3" json:"web_server_startup_timeout,omitempty"`
	WebEndpointDocs         bool                  `protobuf:"varint,9,opt,name=web_endpoint_docs,json=webEndpointDocs,proto3" json:"web_endpoint_docs,omitempty"`
}

func (x *WebhookConfig) Reset() {
	*x = WebhookConfig{}
	mi := &file_pkg_modal_api_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebhookConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookConfig) ProtoMessage() {}

func (x *WebhookConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookConfig.ProtoReflect.Descriptor instead.
func (*WebhookConfig) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{285}
}

func (x *WebhookConfig) GetType() WebhookType {
	if x != nil {
		return x.Type
	}
	return WebhookType_WEBHOOK_TYPE_UNSPECIFIED
}

func (x *WebhookConfig) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *WebhookConfig) GetRequestedSuffix() string {
	if x != nil {
		return x.RequestedSuffix
	}
	return ""
}

func (x *WebhookConfig) GetAsyncMode() WebhookAsyncMode {
	if x != nil {
		return x.AsyncMode
	}
	return WebhookAsyncMode_WEBHOOK_ASYNC_MODE_UNSPECIFIED
}

func (x *WebhookConfig) GetCustomDomains() []*CustomDomainConfig {
	if x != nil {
		return x.CustomDomains
	}
	return nil
}

func (x *WebhookConfig) GetWebServerPort() uint32 {
	if x != nil {
		return x.WebServerPort
	}
	return 0
}

func (x *WebhookConfig) GetWebServerStartupTimeout() float32 {
	if x != nil {
		return x.WebServerStartupTimeout
	}
	return 0
}

func (x *WebhookConfig) GetWebEndpointDocs() bool {
	if x != nil {
		return x.WebEndpointDocs
	}
	return false
}

type WorkspaceNameLookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in pkg/modal/api.proto.
	WorkspaceName string `protobuf:"bytes,1,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	Username      string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *WorkspaceNameLookupResponse) Reset() {
	*x = WorkspaceNameLookupResponse{}
	mi := &file_pkg_modal_api_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkspaceNameLookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceNameLookupResponse) ProtoMessage() {}

func (x *WorkspaceNameLookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceNameLookupResponse.ProtoReflect.Descriptor instead.
func (*WorkspaceNameLookupResponse) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{286}
}

// Deprecated: Marked as deprecated in pkg/modal/api.proto.
func (x *WorkspaceNameLookupResponse) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *WorkspaceNameLookupResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type PayloadValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(erikbern): Merge with ClassParameterValue
	Type ParameterType `protobuf:"varint,1,opt,name=type,proto3,enum=modal.client.ParameterType" json:"type,omitempty"`
	// Types that are assignable to DefaultOneof:
	//
	//	*PayloadValue_StrValue
	//	*PayloadValue_IntValue
	//	*PayloadValue_BoolValue
	//	*PayloadValue_FloatValue
	//	*PayloadValue_BytesValue
	//	*PayloadValue_ListValue
	//	*PayloadValue_DictValue
	//	*PayloadValue_PickleValue
	DefaultOneof isPayloadValue_DefaultOneof `protobuf_oneof:"default_oneof"`
}

func (x *PayloadValue) Reset() {
	*x = PayloadValue{}
	mi := &file_pkg_modal_api_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayloadValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadValue) ProtoMessage() {}

func (x *PayloadValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadValue.ProtoReflect.Descriptor instead.
func (*PayloadValue) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{287}
}

func (x *PayloadValue) GetType() ParameterType {
	if x != nil {
		return x.Type
	}
	return ParameterType_PARAM_TYPE_UNSPECIFIED
}

func (m *PayloadValue) GetDefaultOneof() isPayloadValue_DefaultOneof {
	if m != nil {
		return m.DefaultOneof
	}
	return nil
}

func (x *PayloadValue) GetStrValue() string {
	if x, ok := x.GetDefaultOneof().(*PayloadValue_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (x *PayloadValue) GetIntValue() int64 {
	if x, ok := x.GetDefaultOneof().(*PayloadValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *PayloadValue) GetBoolValue() bool {
	if x, ok := x.GetDefaultOneof().(*PayloadValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *PayloadValue) GetFloatValue() float32 {
	if x, ok := x.GetDefaultOneof().(*PayloadValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *PayloadValue) GetBytesValue() []byte {
	if x, ok := x.GetDefaultOneof().(*PayloadValue_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *PayloadValue) GetListValue() *PayloadListValue {
	if x, ok := x.GetDefaultOneof().(*PayloadValue_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (x *PayloadValue) GetDictValue() *PayloadDictValue {
	if x, ok := x.GetDefaultOneof().(*PayloadValue_DictValue); ok {
		return x.DictValue
	}
	return nil
}

func (x *PayloadValue) GetPickleValue() []byte {
	if x, ok := x.GetDefaultOneof().(*PayloadValue_PickleValue); ok {
		return x.PickleValue
	}
	return nil
}

type isPayloadValue_DefaultOneof interface {
	isPayloadValue_DefaultOneof()
}

type PayloadValue_StrValue struct {
	StrValue string `protobuf:"bytes,2,opt,name=str_value,json=strValue,proto3,oneof"`
}

type PayloadValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type PayloadValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type PayloadValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type PayloadValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,6,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type PayloadValue_ListValue struct {
	ListValue *PayloadListValue `protobuf:"bytes,7,opt,name=list_value,json=listValue,proto3,oneof"`
}

type PayloadValue_DictValue struct {
	DictValue *PayloadDictValue `protobuf:"bytes,8,opt,name=dict_value,json=dictValue,proto3,oneof"`
}

type PayloadValue_PickleValue struct {
	PickleValue []byte `protobuf:"bytes,9,opt,name=pickle_value,json=pickleValue,proto3,oneof"`
}

func (*PayloadValue_StrValue) isPayloadValue_DefaultOneof() {}

func (*PayloadValue_IntValue) isPayloadValue_DefaultOneof() {}

func (*PayloadValue_BoolValue) isPayloadValue_DefaultOneof() {}

func (*PayloadValue_FloatValue) isPayloadValue_DefaultOneof() {}

func (*PayloadValue_BytesValue) isPayloadValue_DefaultOneof() {}

func (*PayloadValue_ListValue) isPayloadValue_DefaultOneof() {}

func (*PayloadValue_DictValue) isPayloadValue_DefaultOneof() {}

func (*PayloadValue_PickleValue) isPayloadValue_DefaultOneof() {}

type PayloadListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*PayloadValue `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PayloadListValue) Reset() {
	*x = PayloadListValue{}
	mi := &file_pkg_modal_api_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayloadListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadListValue) ProtoMessage() {}

func (x *PayloadListValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadListValue.ProtoReflect.Descriptor instead.
func (*PayloadListValue) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{288}
}

func (x *PayloadListValue) GetItems() []*PayloadValue {
	if x != nil {
		return x.Items
	}
	return nil
}

type PayloadDictValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys   []string        `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Values []*PayloadValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PayloadDictValue) Reset() {
	*x = PayloadDictValue{}
	mi := &file_pkg_modal_api_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayloadDictValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadDictValue) ProtoMessage() {}

func (x *PayloadDictValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadDictValue.ProtoReflect.Descriptor instead.
func (*PayloadDictValue) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{289}
}

func (x *PayloadDictValue) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PayloadDictValue) GetValues() []*PayloadValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type AppListResponse_AppListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         string   `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Description   string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State         AppState `protobuf:"varint,4,opt,name=state,proto3,enum=modal.client.AppState" json:"state,omitempty"`
	CreatedAt     float64  `protobuf:"fixed64,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StoppedAt     float64  `protobuf:"fixed64,6,opt,name=stopped_at,json=stoppedAt,proto3" json:"stopped_at,omitempty"`
	NRunningTasks int32    `protobuf:"varint,8,opt,name=n_running_tasks,json=nRunningTasks,proto3" json:"n_running_tasks,omitempty"`
	Name          string   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AppListResponse_AppListItem) Reset() {
	*x = AppListResponse_AppListItem{}
	mi := &file_pkg_modal_api_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppListResponse_AppListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppListResponse_AppListItem) ProtoMessage() {}

func (x *AppListResponse_AppListItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppListResponse_AppListItem.ProtoReflect.Descriptor instead.
func (*AppListResponse_AppListItem) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{20, 0}
}

func (x *AppListResponse_AppListItem) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppListResponse_AppListItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AppListResponse_AppListItem) GetState() AppState {
	if x != nil {
		return x.State
	}
	return AppState_APP_STATE_UNSPECIFIED
}

func (x *AppListResponse_AppListItem) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AppListResponse_AppListItem) GetStoppedAt() float64 {
	if x != nil {
		return x.StoppedAt
	}
	return 0
}

func (x *AppListResponse_AppListItem) GetNRunningTasks() int32 {
	if x != nil {
		return x.NRunningTasks
	}
	return 0
}

func (x *AppListResponse_AppListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Message of type "http" (connection scope)
type Asgi_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpVersion string   `protobuf:"bytes,1,opt,name=http_version,json=httpVersion,proto3" json:"http_version,omitempty"`
	Method      string   `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Scheme      string   `protobuf:"bytes,3,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Path        string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	QueryString []byte   `protobuf:"bytes,5,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
	Headers     [][]byte `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"` // Flat list of alternating header names and values
	ClientHost  *string  `protobuf:"bytes,7,opt,name=client_host,json=clientHost,proto3,oneof" json:"client_host,omitempty"`
	ClientPort  *uint32  `protobuf:"varint,8,opt,name=client_port,json=clientPort,proto3,oneof" json:"client_port,omitempty"`
}

func (x *Asgi_Http) Reset() {
	*x = Asgi_Http{}
	mi := &file_pkg_modal_api_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_Http) ProtoMessage() {}

func (x *Asgi_Http) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_Http.ProtoReflect.Descriptor instead.
func (*Asgi_Http) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 0}
}

func (x *Asgi_Http) GetHttpVersion() string {
	if x != nil {
		return x.HttpVersion
	}
	return ""
}

func (x *Asgi_Http) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Asgi_Http) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Asgi_Http) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Asgi_Http) GetQueryString() []byte {
	if x != nil {
		return x.QueryString
	}
	return nil
}

func (x *Asgi_Http) GetHeaders() [][]byte {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Asgi_Http) GetClientHost() string {
	if x != nil && x.ClientHost != nil {
		return *x.ClientHost
	}
	return ""
}

func (x *Asgi_Http) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

// Message of type "http.request"
type Asgi_HttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body     []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	MoreBody bool   `protobuf:"varint,2,opt,name=more_body,json=moreBody,proto3" json:"more_body,omitempty"`
}

func (x *Asgi_HttpRequest) Reset() {
	*x = Asgi_HttpRequest{}
	mi := &file_pkg_modal_api_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_HttpRequest) ProtoMessage() {}

func (x *Asgi_HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_HttpRequest.ProtoReflect.Descriptor instead.
func (*Asgi_HttpRequest) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 1}
}

func (x *Asgi_HttpRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Asgi_HttpRequest) GetMoreBody() bool {
	if x != nil {
		return x.MoreBody
	}
	return false
}

// Message of type "http.response.start"
type Asgi_HttpResponseStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   uint32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Headers  [][]byte `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"` // Flat list of alternating header names and values
	Trailers bool     `protobuf:"varint,3,opt,name=trailers,proto3" json:"trailers,omitempty"`
}

func (x *Asgi_HttpResponseStart) Reset() {
	*x = Asgi_HttpResponseStart{}
	mi := &file_pkg_modal_api_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_HttpResponseStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_HttpResponseStart) ProtoMessage() {}

func (x *Asgi_HttpResponseStart) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_HttpResponseStart.ProtoReflect.Descriptor instead.
func (*Asgi_HttpResponseStart) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 2}
}

func (x *Asgi_HttpResponseStart) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Asgi_HttpResponseStart) GetHeaders() [][]byte {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Asgi_HttpResponseStart) GetTrailers() bool {
	if x != nil {
		return x.Trailers
	}
	return false
}

// Message of type "http.response.body"
type Asgi_HttpResponseBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body     []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	MoreBody bool   `protobuf:"varint,2,opt,name=more_body,json=moreBody,proto3" json:"more_body,omitempty"`
}

func (x *Asgi_HttpResponseBody) Reset() {
	*x = Asgi_HttpResponseBody{}
	mi := &file_pkg_modal_api_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_HttpResponseBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_HttpResponseBody) ProtoMessage() {}

func (x *Asgi_HttpResponseBody) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_HttpResponseBody.ProtoReflect.Descriptor instead.
func (*Asgi_HttpResponseBody) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 3}
}

func (x *Asgi_HttpResponseBody) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Asgi_HttpResponseBody) GetMoreBody() bool {
	if x != nil {
		return x.MoreBody
	}
	return false
}

// Message of type "http.response.trailers"
type Asgi_HttpResponseTrailers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers      [][]byte `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"` // Flat list of alternating header names and values
	MoreTrailers bool     `protobuf:"varint,2,opt,name=more_trailers,json=moreTrailers,proto3" json:"more_trailers,omitempty"`
}

func (x *Asgi_HttpResponseTrailers) Reset() {
	*x = Asgi_HttpResponseTrailers{}
	mi := &file_pkg_modal_api_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_HttpResponseTrailers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_HttpResponseTrailers) ProtoMessage() {}

func (x *Asgi_HttpResponseTrailers) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_HttpResponseTrailers.ProtoReflect.Descriptor instead.
func (*Asgi_HttpResponseTrailers) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 4}
}

func (x *Asgi_HttpResponseTrailers) GetHeaders() [][]byte {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Asgi_HttpResponseTrailers) GetMoreTrailers() bool {
	if x != nil {
		return x.MoreTrailers
	}
	return false
}

// Message of type "http.disconnect"
type Asgi_HttpDisconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Asgi_HttpDisconnect) Reset() {
	*x = Asgi_HttpDisconnect{}
	mi := &file_pkg_modal_api_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_HttpDisconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_HttpDisconnect) ProtoMessage() {}

func (x *Asgi_HttpDisconnect) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_HttpDisconnect.ProtoReflect.Descriptor instead.
func (*Asgi_HttpDisconnect) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 5}
}

// Message of type "websocket" (connection scope)
type Asgi_Websocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpVersion  string   `protobuf:"bytes,1,opt,name=http_version,json=httpVersion,proto3" json:"http_version,omitempty"` // We don't support RFC 8441 yet, so this will always be "1.1"
	Scheme       string   `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Path         string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	QueryString  []byte   `protobuf:"bytes,4,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
	Headers      [][]byte `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"` // Flat list of alternating header names and values
	ClientHost   *string  `protobuf:"bytes,6,opt,name=client_host,json=clientHost,proto3,oneof" json:"client_host,omitempty"`
	ClientPort   *uint32  `protobuf:"varint,7,opt,name=client_port,json=clientPort,proto3,oneof" json:"client_port,omitempty"`
	Subprotocols []string `protobuf:"bytes,8,rep,name=subprotocols,proto3" json:"subprotocols,omitempty"`
}

func (x *Asgi_Websocket) Reset() {
	*x = Asgi_Websocket{}
	mi := &file_pkg_modal_api_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_Websocket) ProtoMessage() {}

func (x *Asgi_Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_Websocket.ProtoReflect.Descriptor instead.
func (*Asgi_Websocket) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 6}
}

func (x *Asgi_Websocket) GetHttpVersion() string {
	if x != nil {
		return x.HttpVersion
	}
	return ""
}

func (x *Asgi_Websocket) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Asgi_Websocket) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Asgi_Websocket) GetQueryString() []byte {
	if x != nil {
		return x.QueryString
	}
	return nil
}

func (x *Asgi_Websocket) GetHeaders() [][]byte {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Asgi_Websocket) GetClientHost() string {
	if x != nil && x.ClientHost != nil {
		return *x.ClientHost
	}
	return ""
}

func (x *Asgi_Websocket) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *Asgi_Websocket) GetSubprotocols() []string {
	if x != nil {
		return x.Subprotocols
	}
	return nil
}

// Message of type "websocket.connect"
type Asgi_WebsocketConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Asgi_WebsocketConnect) Reset() {
	*x = Asgi_WebsocketConnect{}
	mi := &file_pkg_modal_api_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_WebsocketConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_WebsocketConnect) ProtoMessage() {}

func (x *Asgi_WebsocketConnect) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_WebsocketConnect.ProtoReflect.Descriptor instead.
func (*Asgi_WebsocketConnect) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 7}
}

// Message of type "websocket.accept"
type Asgi_WebsocketAccept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subprotocol *string  `protobuf:"bytes,1,opt,name=subprotocol,proto3,oneof" json:"subprotocol,omitempty"`
	Headers     [][]byte `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"` // Flat list of alternating header names and values
}

func (x *Asgi_WebsocketAccept) Reset() {
	*x = Asgi_WebsocketAccept{}
	mi := &file_pkg_modal_api_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_WebsocketAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_WebsocketAccept) ProtoMessage() {}

func (x *Asgi_WebsocketAccept) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_WebsocketAccept.ProtoReflect.Descriptor instead.
func (*Asgi_WebsocketAccept) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 8}
}

func (x *Asgi_WebsocketAccept) GetSubprotocol() string {
	if x != nil && x.Subprotocol != nil {
		return *x.Subprotocol
	}
	return ""
}

func (x *Asgi_WebsocketAccept) GetHeaders() [][]byte {
	if x != nil {
		return x.Headers
	}
	return nil
}

// Message of type "websocket.receive"
type Asgi_WebsocketReceive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*Asgi_WebsocketReceive_Bytes
	//	*Asgi_WebsocketReceive_Text
	Content isAsgi_WebsocketReceive_Content `protobuf_oneof:"content"`
}

func (x *Asgi_WebsocketReceive) Reset() {
	*x = Asgi_WebsocketReceive{}
	mi := &file_pkg_modal_api_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_WebsocketReceive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_WebsocketReceive) ProtoMessage() {}

func (x *Asgi_WebsocketReceive) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_WebsocketReceive.ProtoReflect.Descriptor instead.
func (*Asgi_WebsocketReceive) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 9}
}

func (m *Asgi_WebsocketReceive) GetContent() isAsgi_WebsocketReceive_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Asgi_WebsocketReceive) GetBytes() []byte {
	if x, ok := x.GetContent().(*Asgi_WebsocketReceive_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Asgi_WebsocketReceive) GetText() string {
	if x, ok := x.GetContent().(*Asgi_WebsocketReceive_Text); ok {
		return x.Text
	}
	return ""
}

type isAsgi_WebsocketReceive_Content interface {
	isAsgi_WebsocketReceive_Content()
}

type Asgi_WebsocketReceive_Bytes struct {
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3,oneof"`
}

type Asgi_WebsocketReceive_Text struct {
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

func (*Asgi_WebsocketReceive_Bytes) isAsgi_WebsocketReceive_Content() {}

func (*Asgi_WebsocketReceive_Text) isAsgi_WebsocketReceive_Content() {}

// Message of type "websocket.send"
type Asgi_WebsocketSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*Asgi_WebsocketSend_Bytes
	//	*Asgi_WebsocketSend_Text
	Content isAsgi_WebsocketSend_Content `protobuf_oneof:"content"`
}

func (x *Asgi_WebsocketSend) Reset() {
	*x = Asgi_WebsocketSend{}
	mi := &file_pkg_modal_api_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_WebsocketSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_WebsocketSend) ProtoMessage() {}

func (x *Asgi_WebsocketSend) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_WebsocketSend.ProtoReflect.Descriptor instead.
func (*Asgi_WebsocketSend) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 10}
}

func (m *Asgi_WebsocketSend) GetContent() isAsgi_WebsocketSend_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Asgi_WebsocketSend) GetBytes() []byte {
	if x, ok := x.GetContent().(*Asgi_WebsocketSend_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Asgi_WebsocketSend) GetText() string {
	if x, ok := x.GetContent().(*Asgi_WebsocketSend_Text); ok {
		return x.Text
	}
	return ""
}

type isAsgi_WebsocketSend_Content interface {
	isAsgi_WebsocketSend_Content()
}

type Asgi_WebsocketSend_Bytes struct {
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3,oneof"`
}

type Asgi_WebsocketSend_Text struct {
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

func (*Asgi_WebsocketSend_Bytes) isAsgi_WebsocketSend_Content() {}

func (*Asgi_WebsocketSend_Text) isAsgi_WebsocketSend_Content() {}

// Message of type "websocket.disconnect"
type Asgi_WebsocketDisconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *uint32 `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
}

func (x *Asgi_WebsocketDisconnect) Reset() {
	*x = Asgi_WebsocketDisconnect{}
	mi := &file_pkg_modal_api_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_WebsocketDisconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_WebsocketDisconnect) ProtoMessage() {}

func (x *Asgi_WebsocketDisconnect) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_WebsocketDisconnect.ProtoReflect.Descriptor instead.
func (*Asgi_WebsocketDisconnect) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 11}
}

func (x *Asgi_WebsocketDisconnect) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

// Message of type "websocket.close"
type Asgi_WebsocketClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   *uint32 `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Reason string  `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Asgi_WebsocketClose) Reset() {
	*x = Asgi_WebsocketClose{}
	mi := &file_pkg_modal_api_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asgi_WebsocketClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asgi_WebsocketClose) ProtoMessage() {}

func (x *Asgi_WebsocketClose) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asgi_WebsocketClose.ProtoReflect.Descriptor instead.
func (*Asgi_WebsocketClose) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{28, 12}
}

func (x *Asgi_WebsocketClose) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *Asgi_WebsocketClose) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DictListResponse_DictInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt float64 `protobuf:"fixed64,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *DictListResponse_DictInfo) Reset() {
	*x = DictListResponse_DictInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DictListResponse_DictInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictListResponse_DictInfo) ProtoMessage() {}

func (x *DictListResponse_DictInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictListResponse_DictInfo.ProtoReflect.Descriptor instead.
func (*DictListResponse_DictInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{80, 0}
}

func (x *DictListResponse_DictInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DictListResponse_DictInfo) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type FunctionData_RankedFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank     uint32    `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Function *Function `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *FunctionData_RankedFunction) Reset() {
	*x = FunctionData_RankedFunction{}
	mi := &file_pkg_modal_api_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionData_RankedFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionData_RankedFunction) ProtoMessage() {}

func (x *FunctionData_RankedFunction) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionData_RankedFunction.ProtoReflect.Descriptor instead.
func (*FunctionData_RankedFunction) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{114, 0}
}

func (x *FunctionData_RankedFunction) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *FunctionData_RankedFunction) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

type QueueListResponse_QueueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt     float64 `protobuf:"fixed64,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	NumPartitions int32   `protobuf:"varint,3,opt,name=num_partitions,json=numPartitions,proto3" json:"num_partitions,omitempty"`
	TotalSize     int32   `protobuf:"varint,4,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *QueueListResponse_QueueInfo) Reset() {
	*x = QueueListResponse_QueueInfo{}
	mi := &file_pkg_modal_api_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueListResponse_QueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueListResponse_QueueInfo) ProtoMessage() {}

func (x *QueueListResponse_QueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueListResponse_QueueInfo.ProtoReflect.Descriptor instead.
func (*QueueListResponse_QueueInfo) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{193, 0}
}

func (x *QueueListResponse_QueueInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueueListResponse_QueueInfo) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *QueueListResponse_QueueInfo) GetNumPartitions() int32 {
	if x != nil {
		return x.NumPartitions
	}
	return 0
}

func (x *QueueListResponse_QueueInfo) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type Schedule_Cron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronString string `protobuf:"bytes,1,opt,name=cron_string,json=cronString,proto3" json:"cron_string,omitempty"`
}

func (x *Schedule_Cron) Reset() {
	*x = Schedule_Cron{}
	mi := &file_pkg_modal_api_proto_msgTypes[312]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule_Cron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule_Cron) ProtoMessage() {}

func (x *Schedule_Cron) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[312]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule_Cron.ProtoReflect.Descriptor instead.
func (*Schedule_Cron) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{223, 0}
}

func (x *Schedule_Cron) GetCronString() string {
	if x != nil {
		return x.CronString
	}
	return ""
}

type Schedule_Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Years   int32   `protobuf:"varint,1,opt,name=years,proto3" json:"years,omitempty"`
	Months  int32   `protobuf:"varint,2,opt,name=months,proto3" json:"months,omitempty"`
	Weeks   int32   `protobuf:"varint,3,opt,name=weeks,proto3" json:"weeks,omitempty"`
	Days    int32   `protobuf:"varint,4,opt,name=days,proto3" json:"days,omitempty"`
	Hours   int32   `protobuf:"varint,5,opt,name=hours,proto3" json:"hours,omitempty"`
	Minutes int32   `protobuf:"varint,6,opt,name=minutes,proto3" json:"minutes,omitempty"`
	Seconds float32 `protobuf:"fixed32,7,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *Schedule_Period) Reset() {
	*x = Schedule_Period{}
	mi := &file_pkg_modal_api_proto_msgTypes[313]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule_Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule_Period) ProtoMessage() {}

func (x *Schedule_Period) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_modal_api_proto_msgTypes[313]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule_Period.ProtoReflect.Descriptor instead.
func (*Schedule_Period) Descriptor() ([]byte, []int) {
	return file_pkg_modal_api_proto_rawDescGZIP(), []int{223, 1}
}

func (x *Schedule_Period) GetYears() int32 {
	if x != nil {
		return x.Years
	}
	return 0
}

func (x *Schedule_Period) GetMonths() int32 {
	if x != nil {
		return x.Months
	}
	return 0
}

func (x *Schedule_Period) GetWeeks() int32 {
	if x != nil {
		return x.Weeks
	}
	return 0
}

func (x *Schedule_Period) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *Schedule_Period) GetHours() int32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *Schedule_Period) GetMinutes() int32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *Schedule_Period) GetSeconds() float32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

var File_pkg_modal_api_proto protoreflect.FileDescriptor

var file_pkg_modal_api_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x1a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x41, 0x70,
	0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x70, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x6e, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x50, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x55,
	0x72, 0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x22, 0x25, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x1c, 0x41,
	0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x22, 0x98, 0x02, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x34, 0x0a, 0x1b, 0x41,
	0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x22, 0x7c, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x16, 0x61, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x9f, 0x01, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x37, 0x0a, 0x1e, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x11, 0x41,
	0x70, 0x70, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x22, 0x53, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x5a, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x22, 0x4e, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x61, 0x70, 0x70, 0x73, 0x1a, 0xee, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x2a, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xad, 0x05, 0x0a,
	0x11, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x53, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73,
	0x12, 0x59, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3e, 0x0a,
	0x10, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x12,
	0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x45, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x03, 0x0a, 0x14,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x12, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x75, 0x6e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x43, 0x0a, 0x15, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a,
	0x0e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xb3, 0x12, 0x0a, 0x04, 0x41, 0x73, 0x67, 0x69, 0x12, 0x2d, 0x0a, 0x04, 0x68, 0x74,
	0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x73, 0x67, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5f, 0x0a, 0x16, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x14, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x0f,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67,
	0x69, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x10, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x10,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x52, 0x0a,
	0x11, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e, 0x57, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x14,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x13, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x73, 0x67, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x1a, 0x96, 0x02, 0x0a, 0x04, 0x48, 0x74, 0x74, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x3e, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x1a, 0x61, 0x0a, 0x11, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x1a, 0x43, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6d, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x55, 0x0a, 0x14, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f,
	0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6d, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x1a,
	0x10, 0x0a, 0x0e, 0x48, 0x74, 0x74, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x1a, 0xa7, 0x02, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x12, 0x0a, 0x10, 0x57,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a,
	0x62, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x1a, 0x4b, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x1a, 0x48, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x37, 0x0a, 0x13, 0x57, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0x4a, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x67, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x64, 0x35, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x62, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x29, 0x0a, 0x0e, 0x42,
	0x6c, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x7c, 0x0a, 0x0d,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x62, 0x0a, 0x10, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xce,
	0x01, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0x98, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x7c, 0x0a, 0x13, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd4, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x17, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x15, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x18,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x16, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbf, 0x02, 0x0a,
	0x12, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x50, 0x49, 0x43, 0x4b, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x02, 0x22, 0x56,
	0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x22, 0xad, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x22, 0x63, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x03, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x73, 0x12, 0x33,
	0x0a, 0x13, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x22, 0x36, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x52, 0x32, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x43, 0x50, 0x10, 0x03, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xa8, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x5d, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0x41, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x70, 0x0a, 0x1c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x50, 0x75, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x65,
	0x63, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xdf, 0x01, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x54, 0x59, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x70, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4f, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x30,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65,
	0x63, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x69, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x09,
	0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x19, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x24, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a,
	0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x35, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x17, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x24, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x66, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xa4, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x39,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x2b, 0x0a, 0x10, 0x44, 0x69, 0x63, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x13, 0x44, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2c, 0x0a, 0x14, 0x44, 0x69, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x44, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x2c, 0x0a, 0x11, 0x44, 0x69, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x63, 0x74, 0x49, 0x64, 0x22, 0x33,
	0x0a, 0x09, 0x44, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x16, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x17, 0x44, 0x69,
	0x63, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3b,
	0x0a, 0x0e, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4c, 0x0a, 0x0f, 0x44,
	0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x44, 0x69, 0x63,
	0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x63, 0x74, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0e, 0x44, 0x69,
	0x63, 0x74, 0x4c, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x69, 0x63, 0x74, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x0f, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x3c, 0x0a, 0x0f, 0x44, 0x69,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x05, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64, 0x69, 0x63, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x08,
	0x44, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3b, 0x0a, 0x0e, 0x44,
	0x69, 0x63, 0x74, 0x50, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4c, 0x0a, 0x0f, 0x44, 0x69, 0x63, 0x74,
	0x50, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x65, 0x0a, 0x11, 0x44, 0x69, 0x63, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x64,
	0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x06, 0x64, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x14, 0x0a,
	0x12, 0x44, 0x69, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x64,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x4e, 0x53, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x3d, 0x0a, 0x1e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3c, 0x0a, 0x13, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x14, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x4e, 0x53,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x12, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x34, 0x0a,
	0x18, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x18, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86,
	0x01, 0x0a, 0x1e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x22, 0x52, 0x0a, 0x17, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x68, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x70, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x77,
	0x65, 0x62, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77,
	0x65, 0x62, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x41, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x59, 0x4d, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x03, 0x22, 0xf8, 0x1a,
	0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x42, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x30,
	0x0a, 0x08, 0x70, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x54, 0x59, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73,
	0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x72,
	0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65,
	0x62, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x73,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x09, 0x73, 0x33, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x33, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x33, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x02, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f,
	0x6d, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x36, 0x70, 0x6e, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x36, 0x70, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x26, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x20, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x1c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x42, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x19, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x6e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x38,
	0x0a, 0x16, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x13, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65,
	0x72, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x6b, 0x0a, 0x0e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x22, 0x66, 0x0a, 0x0c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x58, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x69, 0x70, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x31, 0x10, 0x32,
	0x4a, 0x04, 0x08, 0x34, 0x10, 0x35, 0x4a, 0x04, 0x08, 0x39, 0x10, 0x3a, 0x4a, 0x04, 0x08, 0x3a,
	0x10, 0x3b, 0x4a, 0x04, 0x08, 0x3b, 0x10, 0x3c, 0x22, 0xde, 0x01, 0x0a, 0x19, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xb3, 0x01, 0x0a, 0x19, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x19, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xcb, 0x04, 0x0a, 0x10, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a,
	0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x4a, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x3a, 0x0a, 0x17, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x18, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x15, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xf0, 0x01, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x5f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x65,
	0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x10, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x57, 0x65, 0x62, 0x55, 0x72,
	0x6c, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x08, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77,
	0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x55,
	0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x52, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x54, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x1a, 0x58, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x01,
	0x0a, 0x10, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x12, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x13, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x1b,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x4e, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x22, 0x41, 0x0a, 0x1e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x24, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x49, 0x0a, 0x25, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0xb6, 0x01, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x8d, 0x02, 0x0a, 0x18, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4d, 0x73, 0x4a, 0x04, 0x08,
	0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xc1, 0x02, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64,
	0x78, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x19, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x78, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x04, 0x69, 0x64, 0x78, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d,
	0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x22, 0xba, 0x01, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61,
	0x67, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x13, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x1c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x1d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x22, 0x86, 0x03, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe9, 0x01, 0x0a,
	0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72,
	0x67, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x72,
	0x67, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x12, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x1d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x97, 0x01, 0x0a, 0x13, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x56, 0x0a, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x85, 0x06, 0x0a, 0x0f, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x01, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x13, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52,
	0x0c, 0x77, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x18, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x06, 0x52, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x18, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x0e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4d, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x5c, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xa2, 0x01,
	0x0a, 0x18, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x22, 0x60, 0x0a, 0x19, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x1d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x39, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x7e, 0x0a, 0x19, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x13,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x63,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x0d, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x7f, 0x0a, 0x25, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x77, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x64, 0x0a, 0x09, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x50, 0x55,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x30, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xf1, 0x05, 0x0a, 0x0d, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x69, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x78, 0x69, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x62, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x62, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x67, 0x65,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x22, 0x73, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x1c, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xa2,
	0x05, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x67, 0x70, 0x75, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x0a, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x67, 0x70, 0x75, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x42, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x02, 0x0a, 0x17, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x18, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xaf, 0x01,
	0x0a, 0x19, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22,
	0xb3, 0x01, 0x0a, 0x1a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x65, 0x6f, 0x66, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a,
	0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x5a, 0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x22, 0xe7, 0x01, 0x0a,
	0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x65, 0x78, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x17, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x81,
	0x01, 0x0a, 0x18, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x54, 0x0a, 0x13, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x53,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x65, 0x78, 0x22, 0x7c, 0x0a, 0x13, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x2e, 0x0a, 0x14, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x7a, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63,
	0x69, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x43, 0x69, 0x64, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x03, 0x22, 0xb1, 0x03, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x18,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57,
	0x0a, 0x15, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x13, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x5d, 0x0a, 0x17, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x17, 0x0a, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x2f, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x07, 0x50, 0x54,
	0x59, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x73, 0x7a, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x73, 0x7a, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x73, 0x7a, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x73, 0x7a, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x76, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x76, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x6e, 0x76, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x6e, 0x76, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x76, 0x54, 0x65, 0x72, 0x6d,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x54, 0x59, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x54, 0x59, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x4e, 0x0a, 0x07, 0x50, 0x54, 0x59, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x10,
	0x02, 0x22, 0x40, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x22, 0x39, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x88,
	0x02, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x18, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64,
	0x22, 0x89, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x78, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x49, 0x70, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x31, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x22, 0x48, 0x0a, 0x19, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x49, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x49, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x69, 0x70, 0x22, 0x6c, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x49, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x49, 0x70, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x73, 0x22, 0x7a, 0x0a, 0x11,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x35, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x22,
	0x82, 0x02, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x52, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x22, 0x2a, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x32, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x24, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x22, 0x67, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75,
	0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x47, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9d, 0x01,
	0x0a, 0x0f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x5e, 0x0a,
	0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xcd, 0x01,
	0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x43, 0x70, 0x75, 0x12, 0x36, 0x0a, 0x0a, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x4d, 0x61,
	0x78, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x6d, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x62, 0x22, 0x66, 0x0a,
	0x13, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x65, 0x6f, 0x66, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x45, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x9a, 0x01, 0x0a, 0x07, 0x53, 0x33, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xa0, 0x08,
	0x0a, 0x07, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64,
	0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b,
	0x64, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x6e, 0x66, 0x73, 0x5f, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x6e, 0x66, 0x73,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x32, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x33, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x33, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x54, 0x59, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x02, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x36, 0x70, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x36, 0x70,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13,
	0x22, 0x95, 0x01, 0x0a, 0x14, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x15, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64,
	0x22, 0xbb, 0x01, 0x0a, 0x15, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x38,
	0x0a, 0x17, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x18, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x53, 0x0a,
	0x18, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47, 0x65,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x4c, 0x0a, 0x15, 0x53, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x22, 0xda, 0x01, 0x0a, 0x12, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4e, 0x0a,
	0x13, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x22, 0x77, 0x0a,
	0x18, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x65, 0x6f, 0x66, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x54, 0x61,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x54, 0x61, 0x67, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x38, 0x0a, 0x17, 0x53,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x18, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4d, 0x0a, 0x12, 0x53, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x4a, 0x0a, 0x13, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xde, 0x02, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x63, 0x72,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x27, 0x0a, 0x04, 0x43,
	0x72, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x1a, 0xaa, 0x01, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x79, 0x65, 0x61, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x65,
	0x65, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x58, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x58, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x8c, 0x02, 0x0a, 0x13, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x44, 0x69, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x44, 0x69, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x3a, 0x0a, 0x0c,
	0x45, 0x6e, 0x76, 0x44, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x22, 0x32, 0x0a,
	0x13, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x64, 0x22, 0xd1, 0x03, 0x0a, 0x18, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a,
	0x08, 0x65, 0x6e, 0x76, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x44, 0x69, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x44, 0x69, 0x63, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x76,
	0x44, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x19, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x22,
	0xaf, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x3e, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x73, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x1a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x65, 0x0a, 0x1b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xa6, 0x02, 0x0a, 0x1e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1c, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x52, 0x0a, 0x1d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x14,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a,
	0x18, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xce,
	0x01, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22,
	0xe5, 0x01, 0x0a, 0x1a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x5f, 0x68, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x35, 0x0a, 0x1b, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x81,
	0x01, 0x0a, 0x1d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x22, 0x38, 0x0a, 0x19, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb0, 0x01, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x11, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x41, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x45, 0x0a, 0x0f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6f, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6f,
	0x66, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x74, 0x79, 0x45, 0x78, 0x65, 0x63, 0x49,
	0x64, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x11, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x35,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x79, 0x0a, 0x16, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x55, 0x72, 0x6c, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x75, 0x0a, 0x14, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x57,
	0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77,
	0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x75,
	0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0f, 0x75,
	0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x6e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x4a, 0x0a, 0x12, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0xc7,
	0x01, 0x0a, 0x13, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e,
	0x0a, 0x10, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x6e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0f, 0x75, 0x6e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x2c, 0x0a, 0x12, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22,
	0x38, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x14, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x70,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x72,
	0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x72, 0x63, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65,
	0x22, 0x61, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x14, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x22, 0xd9, 0x02, 0x0a, 0x18, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x71,
	0x0a, 0x19, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x35, 0x0a, 0x16, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x17, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x0e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3e, 0x0a, 0x11, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x12, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x83, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x64,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x17, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22, 0x79, 0x0a, 0x0a, 0x57, 0x65,
	0x62, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x6c,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x22, 0x9a, 0x03, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x65, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x77, 0x65, 0x62,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x77,
	0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x65, 0x62, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x77, 0x65, 0x62, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x6f,
	0x63, 0x73, 0x22, 0x64, 0x0a, 0x1b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x0c, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x44, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5a, 0x0a,
	0x10, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0x83, 0x01, 0x0a, 0x13, 0x41, 0x70,
	0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x50, 0x50, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f,
	0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x41, 0x50, 0x50, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x56, 0x49, 0x53, 0x49,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x2a,
	0xa1, 0x02, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x50, 0x50, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29,
	0x0a, 0x25, 0x41, 0x50, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x50, 0x50,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x52, 0x55, 0x50, 0x54, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x50, 0x50, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x50, 0x50, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x50, 0x50, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x2a, 0x91, 0x02, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x11,
	0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45,
	0x44, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x01, 0x2a, 0x85, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x6f, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50,
	0x50, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x03, 0x2a,
	0x91, 0x01, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0xb1, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x78, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10,
	0x05, 0x2a, 0xa2, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x43,
	0x50, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4f,
	0x43, 0x49, 0x10, 0x04, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06,
	0x22, 0x04, 0x08, 0x07, 0x10, 0x07, 0x2a, 0x5a, 0x0a, 0x0d, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4e, 0x53, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x58, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x4e, 0x53, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x50, 0x49,
	0x43, 0x4b, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x41, 0x53, 0x47, 0x49, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x2a, 0x80, 0x01, 0x0a, 0x13,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x83,
	0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x03, 0x2a, 0xd3, 0x01, 0x0a, 0x1a, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10,
	0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10,
	0x02, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x10, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x02, 0x2a, 0x95, 0x02, 0x0a,
	0x07, 0x47, 0x50, 0x55, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x34, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x31, 0x30, 0x30, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x31, 0x30, 0x47, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x50, 0x55,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x11, 0x47,
	0x50, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x31, 0x30, 0x30, 0x5f, 0x32, 0x30, 0x47,
	0x10, 0x05, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1f, 0x0a, 0x17, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x31, 0x30, 0x30, 0x5f, 0x34, 0x30, 0x47, 0x42, 0x5f, 0x4d, 0x41, 0x4e,
	0x59, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1c, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x32, 0x10,
	0x07, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x31, 0x30, 0x30, 0x5f, 0x38, 0x30, 0x47, 0x42, 0x10, 0x08, 0x12, 0x0f, 0x0a,
	0x0b, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x34, 0x10, 0x09, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x31, 0x30, 0x30, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x34,
	0x30, 0x53, 0x10, 0x0b, 0x2a, 0xa0, 0x02, 0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x46, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x2e, 0x0a,
	0x2a, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x5f, 0x49, 0x46, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x33, 0x0a,
	0x2f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x59,
	0x4d, 0x4f, 0x55, 0x53, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x50,
	0x50, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x50, 0x48, 0x45,
	0x4d, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0xed, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x49, 0x43, 0x4b, 0x4c, 0x45, 0x10, 0x09, 0x2a, 0x3e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xa9, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f,
	0x58, 0x59, 0x5f, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52,
	0x4f, 0x58, 0x59, 0x5f, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x5f, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x49, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x49, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x59, 0x10, 0x04, 0x2a, 0x78, 0x0a, 0x11, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x02, 0x2a, 0xb2, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x57, 0x53,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x03, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x53,
	0x10, 0x04, 0x2a, 0xdc, 0x02, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52,
	0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x07, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45,
	0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x45, 0x4d, 0x50, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
	0x0b, 0x2a, 0x32, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x31, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x56, 0x32, 0x10, 0x02, 0x2a, 0x9a, 0x01, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x45,
	0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x04, 0x22, 0x04, 0x08, 0x01,
	0x10, 0x01, 0x2a, 0x99, 0x01, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x53, 0x47, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x57,
	0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x53, 0x47, 0x49, 0x5f, 0x41, 0x50, 0x50, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x04, 0x32, 0x82,
	0x57, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x57,
	0x0a, 0x13, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x47, 0x65, 0x74, 0x42, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x41, 0x70, 0x70,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x47, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x47,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x21,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x41, 0x70, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1e,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1f, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x70, 0x70, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x62, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x62,
	0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x74,
	0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x58, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x47, 0x65, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x50, 0x75, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x45, 0x78, 0x65, 0x63, 0x57, 0x61, 0x69, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x57, 0x61,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x44, 0x69, 0x63, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a,
	0x0c, 0x44, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x44, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x30, 0x01, 0x12, 0x45, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x69, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x44, 0x69, 0x63,
	0x74, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x44, 0x69, 0x63, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x07, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x07, 0x44, 0x69, 0x63, 0x74, 0x50, 0x6f, 0x70, 0x12, 0x1c, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74,
	0x50, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x50, 0x6f,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x44, 0x69, 0x63,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x53, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x73, 0x0a, 0x16, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x67, 0x0a, 0x12, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x15, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x16, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x75, 0x74, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x16, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x75, 0x74, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x88, 0x01,
	0x0a, 0x1d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x26, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x47, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x74, 0x79, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x6f,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x10, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x67, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x49, 0x70, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x49, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x12, 0x1d,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x49, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4c, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x75,
	0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x10, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x53,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x47,
	0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x53, 0x74, 0x64, 0x69, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f,
	0x78, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x53,
	0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x54, 0x61, 0x67, 0x73, 0x53, 0x65, 0x74, 0x12, 0x23, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x54, 0x61, 0x67, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x10, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x0b, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x57, 0x61, 0x69, 0x74, 0x12, 0x20, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x11,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x76, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d,
	0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x1b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5d, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54,
	0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x57, 0x61, 0x69, 0x74, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x57, 0x61, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0b, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0f,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a,
	0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23,
	0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x13, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x61, 0x6c,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_modal_api_proto_rawDescOnce sync.Once
	file_pkg_modal_api_proto_rawDescData = file_pkg_modal_api_proto_rawDesc
)

func file_pkg_modal_api_proto_rawDescGZIP() []byte {
	file_pkg_modal_api_proto_rawDescOnce.Do(func() {
		file_pkg_modal_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_modal_api_proto_rawDescData)
	})
	return file_pkg_modal_api_proto_rawDescData
}

var file_pkg_modal_api_proto_enumTypes = make([]protoimpl.EnumInfo, 34)
var file_pkg_modal_api_proto_msgTypes = make([]protoimpl.MessageInfo, 316)
var file_pkg_modal_api_proto_goTypes = []any{
	(AppDeployVisibility)(0),        // 0: modal.client.AppDeployVisibility
	(AppDisconnectReason)(0),        // 1: modal.client.AppDisconnectReason
	(AppState)(0),                   // 2: modal.client.AppState
	(AppStopSource)(0),              // 3: modal.client.AppStopSource
	(CertificateStatus)(0),          // 4: modal.client.CertificateStatus
	(CheckpointStatus)(0),           // 5: modal.client.CheckpointStatus
	(ClientType)(0),                 // 6: modal.client.ClientType
	(CloudProvider)(0),              // 7: modal.client.CloudProvider
	(DNSRecordType)(0),              // 8: modal.client.DNSRecordType
	(DataFormat)(0),                 // 9: modal.client.DataFormat
	(DeploymentNamespace)(0),        // 10: modal.client.DeploymentNamespace
	(FileDescriptor)(0),             // 11: modal.client.FileDescriptor
	(FunctionCallInvocationType)(0), // 12: modal.client.FunctionCallInvocationType
	(FunctionCallType)(0),           // 13: modal.client.FunctionCallType
	(GPUType)(0),                    // 14: modal.client.GPUType
	(ObjectCreationType)(0),         // 15: modal.client.ObjectCreationType
	(ParameterType)(0),              // 16: modal.client.ParameterType
	(ProgressType)(0),               // 17: modal.client.ProgressType
	(ProxyIpStatus)(0),              // 18: modal.client.ProxyIpStatus
	(RateLimitInterval)(0),          // 19: modal.client.RateLimitInterval
	(RegistryAuthType)(0),           // 20: modal.client.RegistryAuthType
	(TaskState)(0),                  // 21: modal.client.TaskState
	(VolumeFsVersion)(0),            // 22: modal.client.VolumeFsVersion
	(WebhookAsyncMode)(0),           // 23: modal.client.WebhookAsyncMode
	(WebhookType)(0),                // 24: modal.client.WebhookType
	(ClassParameterInfo_ParameterSerializationFormat)(0), // 25: modal.client.ClassParameterInfo.ParameterSerializationFormat
	(CloudBucketMount_BucketType)(0),                     // 26: modal.client.CloudBucketMount.BucketType
	(FileEntry_FileType)(0),                              // 27: modal.client.FileEntry.FileType
	(Function_DefinitionType)(0),                         // 28: modal.client.Function.DefinitionType
	(Function_FunctionType)(0),                           // 29: modal.client.Function.FunctionType
	(GenericResult_GenericStatus)(0),                     // 30: modal.client.GenericResult.GenericStatus
	(GenericResult_GeneratorStatus)(0),                   // 31: modal.client.GenericResult.GeneratorStatus
	(NetworkAccess_NetworkAccessType)(0),                 // 32: modal.client.NetworkAccess.NetworkAccessType
	(PTYInfo_PTYType)(0),                                 // 33: modal.client.PTYInfo.PTYType
	(*AppClientDisconnectRequest)(nil),                   // 34: modal.client.AppClientDisconnectRequest
	(*AppCreateRequest)(nil),                             // 35: modal.client.AppCreateRequest
	(*AppCreateResponse)(nil),                            // 36: modal.client.AppCreateResponse
	(*AppDeployRequest)(nil),                             // 37: modal.client.AppDeployRequest
	(*AppDeployResponse)(nil),                            // 38: modal.client.AppDeployResponse
	(*AppDeploySingleObjectRequest)(nil),                 // 39: modal.client.AppDeploySingleObjectRequest
	(*AppDeploySingleObjectResponse)(nil),                // 40: modal.client.AppDeploySingleObjectResponse
	(*AppDeploymentHistory)(nil),                         // 41: modal.client.AppDeploymentHistory
	(*AppDeploymentHistoryRequest)(nil),                  // 42: modal.client.AppDeploymentHistoryRequest
	(*AppDeploymentHistoryResponse)(nil),                 // 43: modal.client.AppDeploymentHistoryResponse
	(*AppGetByDeploymentNameRequest)(nil),                // 44: modal.client.AppGetByDeploymentNameRequest
	(*AppGetByDeploymentNameResponse)(nil),               // 45: modal.client.AppGetByDeploymentNameResponse
	(*AppGetLogsRequest)(nil),                            // 46: modal.client.AppGetLogsRequest
	(*AppGetObjectsItem)(nil),                            // 47: modal.client.AppGetObjectsItem
	(*AppGetObjectsRequest)(nil),                         // 48: modal.client.AppGetObjectsRequest
	(*AppGetObjectsResponse)(nil),                        // 49: modal.client.AppGetObjectsResponse
	(*AppGetOrCreateRequest)(nil),                        // 50: modal.client.AppGetOrCreateRequest
	(*AppGetOrCreateResponse)(nil),                       // 51: modal.client.AppGetOrCreateResponse
	(*AppHeartbeatRequest)(nil),                          // 52: modal.client.AppHeartbeatRequest
	(*AppListRequest)(nil),                               // 53: modal.client.AppListRequest
	(*AppListResponse)(nil),                              // 54: modal.client.AppListResponse
	(*AppLookupRequest)(nil),                             // 55: modal.client.AppLookupRequest
	(*AppLookupResponse)(nil),                            // 56: modal.client.AppLookupResponse
	(*AppPublishRequest)(nil),                            // 57: modal.client.AppPublishRequest
	(*AppPublishResponse)(nil),                           // 58: modal.client.AppPublishResponse
	(*AppRollbackRequest)(nil),                           // 59: modal.client.AppRollbackRequest
	(*AppSetObjectsRequest)(nil),                         // 60: modal.client.AppSetObjectsRequest
	(*AppStopRequest)(nil),                               // 61: modal.client.AppStopRequest
	(*Asgi)(nil),                                         // 62: modal.client.Asgi
	(*BaseImage)(nil),                                    // 63: modal.client.BaseImage
	(*BlobCreateRequest)(nil),                            // 64: modal.client.BlobCreateRequest
	(*BlobCreateResponse)(nil),                           // 65: modal.client.BlobCreateResponse
	(*BlobGetRequest)(nil),                               // 66: modal.client.BlobGetRequest
	(*BlobGetResponse)(nil),                              // 67: modal.client.BlobGetResponse
	(*BuildFunction)(nil),                                // 68: modal.client.BuildFunction
	(*CancelInputEvent)(nil),                             // 69: modal.client.CancelInputEvent
	(*CheckpointInfo)(nil),                               // 70: modal.client.CheckpointInfo
	(*ClassCreateRequest)(nil),                           // 71: modal.client.ClassCreateRequest
	(*ClassCreateResponse)(nil),                          // 72: modal.client.ClassCreateResponse
	(*ClassGetRequest)(nil),                              // 73: modal.client.ClassGetRequest
	(*ClassGetResponse)(nil),                             // 74: modal.client.ClassGetResponse
	(*ClassHandleMetadata)(nil),                          // 75: modal.client.ClassHandleMetadata
	(*ClassMethod)(nil),                                  // 76: modal.client.ClassMethod
	(*ClassParameterInfo)(nil),                           // 77: modal.client.ClassParameterInfo
	(*ClassParameterSet)(nil),                            // 78: modal.client.ClassParameterSet
	(*ClassParameterSpec)(nil),                           // 79: modal.client.ClassParameterSpec
	(*ClassParameterValue)(nil),                          // 80: modal.client.ClassParameterValue
	(*ClientHelloResponse)(nil),                          // 81: modal.client.ClientHelloResponse
	(*CloudBucketMount)(nil),                             // 82: modal.client.CloudBucketMount
	(*ContainerArguments)(nil),                           // 83: modal.client.ContainerArguments
	(*ContainerCheckpointRequest)(nil),                   // 84: modal.client.ContainerCheckpointRequest
	(*ContainerExecGetOutputRequest)(nil),                // 85: modal.client.ContainerExecGetOutputRequest
	(*ContainerExecPutInputRequest)(nil),                 // 86: modal.client.ContainerExecPutInputRequest
	(*ContainerExecRequest)(nil),                         // 87: modal.client.ContainerExecRequest
	(*ContainerExecResponse)(nil),                        // 88: modal.client.ContainerExecResponse
	(*ContainerExecWaitRequest)(nil),                     // 89: modal.client.ContainerExecWaitRequest
	(*ContainerExecWaitResponse)(nil),                    // 90: modal.client.ContainerExecWaitResponse
	(*ContainerHeartbeatRequest)(nil),                    // 91: modal.client.ContainerHeartbeatRequest
	(*ContainerHeartbeatResponse)(nil),                   // 92: modal.client.ContainerHeartbeatResponse
	(*ContainerLogRequest)(nil),                          // 93: modal.client.ContainerLogRequest
	(*ContainerStopRequest)(nil),                         // 94: modal.client.ContainerStopRequest
	(*ContainerStopResponse)(nil),                        // 95: modal.client.ContainerStopResponse
	(*CustomDomainConfig)(nil),                           // 96: modal.client.CustomDomainConfig
	(*CustomDomainInfo)(nil),                             // 97: modal.client.CustomDomainInfo
	(*DNSRecord)(nil),                                    // 98: modal.client.DNSRecord
	(*DataChunk)(nil),                                    // 99: modal.client.DataChunk
	(*DictClearRequest)(nil),                             // 100: modal.client.DictClearRequest
	(*DictContainsRequest)(nil),                          // 101: modal.client.DictContainsRequest
	(*DictContainsResponse)(nil),                         // 102: modal.client.DictContainsResponse
	(*DictContentsRequest)(nil),                          // 103: modal.client.DictContentsRequest
	(*DictDeleteRequest)(nil),                            // 104: modal.client.DictDeleteRequest
	(*DictEntry)(nil),                                    // 105: modal.client.DictEntry
	(*DictGetOrCreateRequest)(nil),                       // 106: modal.client.DictGetOrCreateRequest
	(*DictGetOrCreateResponse)(nil),                      // 107: modal.client.DictGetOrCreateResponse
	(*DictGetRequest)(nil),                               // 108: modal.client.DictGetRequest
	(*DictGetResponse)(nil),                              // 109: modal.client.DictGetResponse
	(*DictHeartbeatRequest)(nil),                         // 110: modal.client.DictHeartbeatRequest
	(*DictLenRequest)(nil),                               // 111: modal.client.DictLenRequest
	(*DictLenResponse)(nil),                              // 112: modal.client.DictLenResponse
	(*DictListRequest)(nil),                              // 113: modal.client.DictListRequest
	(*DictListResponse)(nil),                             // 114: modal.client.DictListResponse
	(*DictPopRequest)(nil),                               // 115: modal.client.DictPopRequest
	(*DictPopResponse)(nil),                              // 116: modal.client.DictPopResponse
	(*DictUpdateRequest)(nil),                            // 117: modal.client.DictUpdateRequest
	(*DictUpdateResponse)(nil),                           // 118: modal.client.DictUpdateResponse
	(*Domain)(nil),                                       // 119: modal.client.Domain
	(*DomainCertificateVerifyRequest)(nil),               // 120: modal.client.DomainCertificateVerifyRequest
	(*DomainCertificateVerifyResponse)(nil),              // 121: modal.client.DomainCertificateVerifyResponse
	(*DomainCreateRequest)(nil),                          // 122: modal.client.DomainCreateRequest
	(*DomainCreateResponse)(nil),                         // 123: modal.client.DomainCreateResponse
	(*DomainListRequest)(nil),                            // 124: modal.client.DomainListRequest
	(*DomainListResponse)(nil),                           // 125: modal.client.DomainListResponse
	(*EnvironmentCreateRequest)(nil),                     // 126: modal.client.EnvironmentCreateRequest
	(*EnvironmentDeleteRequest)(nil),                     // 127: modal.client.EnvironmentDeleteRequest
	(*EnvironmentGetOrCreateRequest)(nil),                // 128: modal.client.EnvironmentGetOrCreateRequest
	(*EnvironmentGetOrCreateResponse)(nil),               // 129: modal.client.EnvironmentGetOrCreateResponse
	(*EnvironmentListItem)(nil),                          // 130: modal.client.EnvironmentListItem
	(*EnvironmentListResponse)(nil),                      // 131: modal.client.EnvironmentListResponse
	(*EnvironmentMetadata)(nil),                          // 132: modal.client.EnvironmentMetadata
	(*EnvironmentSettings)(nil),                          // 133: modal.client.EnvironmentSettings
	(*EnvironmentUpdateRequest)(nil),                     // 134: modal.client.EnvironmentUpdateRequest
	(*FileEntry)(nil),                                    // 135: modal.client.FileEntry
	(*Function)(nil),                                     // 136: modal.client.Function
	(*FunctionBindParamsRequest)(nil),                    // 137: modal.client.FunctionBindParamsRequest
	(*FunctionBindParamsResponse)(nil),                   // 138: modal.client.FunctionBindParamsResponse
	(*FunctionCallCallGraphInfo)(nil),                    // 139: modal.client.FunctionCallCallGraphInfo
	(*FunctionCallCancelRequest)(nil),                    // 140: modal.client.FunctionCallCancelRequest
	(*FunctionCallGetDataRequest)(nil),                   // 141: modal.client.FunctionCallGetDataRequest
	(*FunctionCallInfo)(nil),                             // 142: modal.client.FunctionCallInfo
	(*FunctionCallListRequest)(nil),                      // 143: modal.client.FunctionCallListRequest
	(*FunctionCallListResponse)(nil),                     // 144: modal.client.FunctionCallListResponse
	(*FunctionCallPutDataRequest)(nil),                   // 145: modal.client.FunctionCallPutDataRequest
	(*FunctionCreateRequest)(nil),                        // 146: modal.client.FunctionCreateRequest
	(*FunctionCreateResponse)(nil),                       // 147: modal.client.FunctionCreateResponse
	(*FunctionData)(nil),                                 // 148: modal.client.FunctionData
	(*FunctionExtended)(nil),                             // 149: modal.client.FunctionExtended
	(*FunctionGetCallGraphRequest)(nil),                  // 150: modal.client.FunctionGetCallGraphRequest
	(*FunctionGetCallGraphResponse)(nil),                 // 151: modal.client.FunctionGetCallGraphResponse
	(*FunctionGetCurrentStatsRequest)(nil),               // 152: modal.client.FunctionGetCurrentStatsRequest
	(*FunctionGetDynamicConcurrencyRequest)(nil),         // 153: modal.client.FunctionGetDynamicConcurrencyRequest
	(*FunctionGetDynamicConcurrencyResponse)(nil),        // 154: modal.client.FunctionGetDynamicConcurrencyResponse
	(*FunctionGetInputsItem)(nil),                        // 155: modal.client.FunctionGetInputsItem
	(*FunctionGetInputsRequest)(nil),                     // 156: modal.client.FunctionGetInputsRequest
	(*FunctionGetInputsResponse)(nil),                    // 157: modal.client.FunctionGetInputsResponse
	(*FunctionGetOutputsItem)(nil),                       // 158: modal.client.FunctionGetOutputsItem
	(*FunctionGetOutputsRequest)(nil),                    // 159: modal.client.FunctionGetOutputsRequest
	(*FunctionGetOutputsResponse)(nil),                   // 160: modal.client.FunctionGetOutputsResponse
	(*FunctionGetRequest)(nil),                           // 161: modal.client.FunctionGetRequest
	(*FunctionGetResponse)(nil),                          // 162: modal.client.FunctionGetResponse
	(*FunctionGetSerializedRequest)(nil),                 // 163: modal.client.FunctionGetSerializedRequest
	(*FunctionGetSerializedResponse)(nil),                // 164: modal.client.FunctionGetSerializedResponse
	(*FunctionHandleMetadata)(nil),                       // 165: modal.client.FunctionHandleMetadata
	(*FunctionInput)(nil),                                // 166: modal.client.FunctionInput
	(*FunctionMapRequest)(nil),                           // 167: modal.client.FunctionMapRequest
	(*FunctionMapResponse)(nil),                          // 168: modal.client.FunctionMapResponse
	(*FunctionOptions)(nil),                              // 169: modal.client.FunctionOptions
	(*FunctionPrecreateRequest)(nil),                     // 170: modal.client.FunctionPrecreateRequest
	(*FunctionPrecreateResponse)(nil),                    // 171: modal.client.FunctionPrecreateResponse
	(*FunctionPutInputsItem)(nil),                        // 172: modal.client.FunctionPutInputsItem
	(*FunctionPutInputsRequest)(nil),                     // 173: modal.client.FunctionPutInputsRequest
	(*FunctionPutInputsResponse)(nil),                    // 174: modal.client.FunctionPutInputsResponse
	(*FunctionPutInputsResponseItem)(nil),                // 175: modal.client.FunctionPutInputsResponseItem
	(*FunctionPutOutputsItem)(nil),                       // 176: modal.client.FunctionPutOutputsItem
	(*FunctionPutOutputsRequest)(nil),                    // 177: modal.client.FunctionPutOutputsRequest
	(*FunctionRetryPolicy)(nil),                          // 178: modal.client.FunctionRetryPolicy
	(*FunctionStats)(nil),                                // 179: modal.client.FunctionStats
	(*FunctionUpdateSchedulingParamsRequest)(nil),        // 180: modal.client.FunctionUpdateSchedulingParamsRequest
	(*FunctionUpdateSchedulingParamsResponse)(nil),       // 181: modal.client.FunctionUpdateSchedulingParamsResponse
	(*GPUConfig)(nil),                                    // 182: modal.client.GPUConfig
	(*GeneratorDone)(nil),                                // 183: modal.client.GeneratorDone
	(*GenericResult)(nil),                                // 184: modal.client.GenericResult
	(*Image)(nil),                                        // 185: modal.client.Image
	(*ImageContextFile)(nil),                             // 186: modal.client.ImageContextFile
	(*ImageGetOrCreateRequest)(nil),                      // 187: modal.client.ImageGetOrCreateRequest
	(*ImageGetOrCreateResponse)(nil),                     // 188: modal.client.ImageGetOrCreateResponse
	(*ImageJoinStreamingRequest)(nil),                    // 189: modal.client.ImageJoinStreamingRequest
	(*ImageJoinStreamingResponse)(nil),                   // 190: modal.client.ImageJoinStreamingResponse
	(*ImageRegistryConfig)(nil),                          // 191: modal.client.ImageRegistryConfig
	(*InputCallGraphInfo)(nil),                           // 192: modal.client.InputCallGraphInfo
	(*InputCategoryInfo)(nil),                            // 193: modal.client.InputCategoryInfo
	(*InputInfo)(nil),                                    // 194: modal.client.InputInfo
	(*MountFile)(nil),                                    // 195: modal.client.MountFile
	(*MountGetOrCreateRequest)(nil),                      // 196: modal.client.MountGetOrCreateRequest
	(*MountGetOrCreateResponse)(nil),                     // 197: modal.client.MountGetOrCreateResponse
	(*MountHandleMetadata)(nil),                          // 198: modal.client.MountHandleMetadata
	(*MountPutFileRequest)(nil),                          // 199: modal.client.MountPutFileRequest
	(*MountPutFileResponse)(nil),                         // 200: modal.client.MountPutFileResponse
	(*MultiPartUpload)(nil),                              // 201: modal.client.MultiPartUpload
	(*NetworkAccess)(nil),                                // 202: modal.client.NetworkAccess
	(*Object)(nil),                                       // 203: modal.client.Object
	(*ObjectDependency)(nil),                             // 204: modal.client.ObjectDependency
	(*PTYInfo)(nil),                                      // 205: modal.client.PTYInfo
	(*PortSpec)(nil),                                     // 206: modal.client.PortSpec
	(*PortSpecs)(nil),                                    // 207: modal.client.PortSpecs
	(*ProxyGetOrCreateRequest)(nil),                      // 208: modal.client.ProxyGetOrCreateRequest
	(*ProxyGetOrCreateResponse)(nil),                     // 209: modal.client.ProxyGetOrCreateResponse
	(*ProxyInfo)(nil),                                    // 210: modal.client.ProxyInfo
	(*ProxyIp)(nil),                                      // 211: modal.client.ProxyIp
	(*ProxyIpDeleteRequest)(nil),                         // 212: modal.client.ProxyIpDeleteRequest
	(*ProxyIpGetOrCreateRequest)(nil),                    // 213: modal.client.ProxyIpGetOrCreateRequest
	(*ProxyIpGetOrCreateResponse)(nil),                   // 214: modal.client.ProxyIpGetOrCreateResponse
	(*ProxyIpListResponse)(nil),                          // 215: modal.client.ProxyIpListResponse
	(*QueueClearRequest)(nil),                            // 216: modal.client.QueueClearRequest
	(*QueueDeleteRequest)(nil),                           // 217: modal.client.QueueDeleteRequest
	(*QueueGetOrCreateRequest)(nil),                      // 218: modal.client.QueueGetOrCreateRequest
	(*QueueGetOrCreateResponse)(nil),                     // 219: modal.client.QueueGetOrCreateResponse
	(*QueueGetRequest)(nil),                              // 220: modal.client.QueueGetRequest
	(*QueueGetResponse)(nil),                             // 221: modal.client.QueueGetResponse
	(*QueueHeartbeatRequest)(nil),                        // 222: modal.client.QueueHeartbeatRequest
	(*QueueItem)(nil),                                    // 223: modal.client.QueueItem
	(*QueueLenRequest)(nil),                              // 224: modal.client.QueueLenRequest
	(*QueueLenResponse)(nil),                             // 225: modal.client.QueueLenResponse
	(*QueueListRequest)(nil),                             // 226: modal.client.QueueListRequest
	(*QueueListResponse)(nil),                            // 227: modal.client.QueueListResponse
	(*QueueNextItemsRequest)(nil),                        // 228: modal.client.QueueNextItemsRequest
	(*QueueNextItemsResponse)(nil),                       // 229: modal.client.QueueNextItemsResponse
	(*QueuePutRequest)(nil),                              // 230: modal.client.QueuePutRequest
	(*RateLimit)(nil),                                    // 231: modal.client.RateLimit
	(*Resources)(nil),                                    // 232: modal.client.Resources
	(*RuntimeInputMessage)(nil),                          // 233: modal.client.RuntimeInputMessage
	(*RuntimeOutputBatch)(nil),                           // 234: modal.client.RuntimeOutputBatch
	(*RuntimeOutputMessage)(nil),                         // 235: modal.client.RuntimeOutputMessage
	(*S3Mount)(nil),                                      // 236: modal.client.S3Mount
	(*Sandbox)(nil),                                      // 237: modal.client.Sandbox
	(*SandboxCreateRequest)(nil),                         // 238: modal.client.SandboxCreateRequest
	(*SandboxCreateResponse)(nil),                        // 239: modal.client.SandboxCreateResponse
	(*SandboxGetLogsRequest)(nil),                        // 240: modal.client.SandboxGetLogsRequest
	(*SandboxGetTaskIdRequest)(nil),                      // 241: modal.client.SandboxGetTaskIdRequest
	(*SandboxGetTaskIdResponse)(nil),                     // 242: modal.client.SandboxGetTaskIdResponse
	(*SandboxGetTunnelsRequest)(nil),                     // 243: modal.client.SandboxGetTunnelsRequest
	(*SandboxGetTunnelsResponse)(nil),                    // 244: modal.client.SandboxGetTunnelsResponse
	(*SandboxHandleMetadata)(nil),                        // 245: modal.client.SandboxHandleMetadata
	(*SandboxInfo)(nil),                                  // 246: modal.client.SandboxInfo
	(*SandboxListRequest)(nil),                           // 247: modal.client.SandboxListRequest
	(*SandboxListResponse)(nil),                          // 248: modal.client.SandboxListResponse
	(*SandboxStdinWriteRequest)(nil),                     // 249: modal.client.SandboxStdinWriteRequest
	(*SandboxStdinWriteResponse)(nil),                    // 250: modal.client.SandboxStdinWriteResponse
	(*SandboxTag)(nil),                                   // 251: modal.client.SandboxTag
	(*SandboxTagsSetRequest)(nil),                        // 252: modal.client.SandboxTagsSetRequest
	(*SandboxTerminateRequest)(nil),                      // 253: modal.client.SandboxTerminateRequest
	(*SandboxTerminateResponse)(nil),                     // 254: modal.client.SandboxTerminateResponse
	(*SandboxWaitRequest)(nil),                           // 255: modal.client.SandboxWaitRequest
	(*SandboxWaitResponse)(nil),                          // 256: modal.client.SandboxWaitResponse
	(*Schedule)(nil),                                     // 257: modal.client.Schedule
	(*SchedulerPlacement)(nil),                           // 258: modal.client.SchedulerPlacement
	(*SecretCreateRequest)(nil),                          // 259: modal.client.SecretCreateRequest
	(*SecretCreateResponse)(nil),                         // 260: modal.client.SecretCreateResponse
	(*SecretDeleteRequest)(nil),                          // 261: modal.client.SecretDeleteRequest
	(*SecretGetOrCreateRequest)(nil),                     // 262: modal.client.SecretGetOrCreateRequest
	(*SecretGetOrCreateResponse)(nil),                    // 263: modal.client.SecretGetOrCreateResponse
	(*SecretListItem)(nil),                               // 264: modal.client.SecretListItem
	(*SecretListRequest)(nil),                            // 265: modal.client.SecretListRequest
	(*SecretListResponse)(nil),                           // 266: modal.client.SecretListResponse
	(*SharedVolumeGetFileRequest)(nil),                   // 267: modal.client.SharedVolumeGetFileRequest
	(*SharedVolumeGetFileResponse)(nil),                  // 268: modal.client.SharedVolumeGetFileResponse
	(*SharedVolumeGetOrCreateRequest)(nil),               // 269: modal.client.SharedVolumeGetOrCreateRequest
	(*SharedVolumeGetOrCreateResponse)(nil),              // 270: modal.client.SharedVolumeGetOrCreateResponse
	(*SharedVolumeHeartbeatRequest)(nil),                 // 271: modal.client.SharedVolumeHeartbeatRequest
	(*SharedVolumeListFilesRequest)(nil),                 // 272: modal.client.SharedVolumeListFilesRequest
	(*SharedVolumeListFilesResponse)(nil),                // 273: modal.client.SharedVolumeListFilesResponse
	(*SharedVolumeListItem)(nil),                         // 274: modal.client.SharedVolumeListItem
	(*SharedVolumeListRequest)(nil),                      // 275: modal.client.SharedVolumeListRequest
	(*SharedVolumeListResponse)(nil),                     // 276: modal.client.SharedVolumeListResponse
	(*SharedVolumeMount)(nil),                            // 277: modal.client.SharedVolumeMount
	(*SharedVolumePutFileRequest)(nil),                   // 278: modal.client.SharedVolumePutFileRequest
	(*SharedVolumePutFileResponse)(nil),                  // 279: modal.client.SharedVolumePutFileResponse
	(*SharedVolumeRemoveFileRequest)(nil),                // 280: modal.client.SharedVolumeRemoveFileRequest
	(*TaskCurrentInputsResponse)(nil),                    // 281: modal.client.TaskCurrentInputsResponse
	(*TaskInfo)(nil),                                     // 282: modal.client.TaskInfo
	(*TaskListRequest)(nil),                              // 283: modal.client.TaskListRequest
	(*TaskListResponse)(nil),                             // 284: modal.client.TaskListResponse
	(*TaskLogs)(nil),                                     // 285: modal.client.TaskLogs
	(*TaskLogsBatch)(nil),                                // 286: modal.client.TaskLogsBatch
	(*TaskProgress)(nil),                                 // 287: modal.client.TaskProgress
	(*TaskResultRequest)(nil),                            // 288: modal.client.TaskResultRequest
	(*TaskStats)(nil),                                    // 289: modal.client.TaskStats
	(*TaskTemplate)(nil),                                 // 290: modal.client.TaskTemplate
	(*TokenFlowCreateRequest)(nil),                       // 291: modal.client.TokenFlowCreateRequest
	(*TokenFlowCreateResponse)(nil),                      // 292: modal.client.TokenFlowCreateResponse
	(*TokenFlowWaitRequest)(nil),                         // 293: modal.client.TokenFlowWaitRequest
	(*TokenFlowWaitResponse)(nil),                        // 294: modal.client.TokenFlowWaitResponse
	(*TunnelData)(nil),                                   // 295: modal.client.TunnelData
	(*TunnelStartRequest)(nil),                           // 296: modal.client.TunnelStartRequest
	(*TunnelStartResponse)(nil),                          // 297: modal.client.TunnelStartResponse
	(*TunnelStopRequest)(nil),                            // 298: modal.client.TunnelStopRequest
	(*TunnelStopResponse)(nil),                           // 299: modal.client.TunnelStopResponse
	(*VolumeCommitRequest)(nil),                          // 300: modal.client.VolumeCommitRequest
	(*VolumeCommitResponse)(nil),                         // 301: modal.client.VolumeCommitResponse
	(*VolumeCopyFilesRequest)(nil),                       // 302: modal.client.VolumeCopyFilesRequest
	(*VolumeDeleteRequest)(nil),                          // 303: modal.client.VolumeDeleteRequest
	(*VolumeGetFileRequest)(nil),                         // 304: modal.client.VolumeGetFileRequest
	(*VolumeGetFileResponse)(nil),                        // 305: modal.client.VolumeGetFileResponse
	(*VolumeGetOrCreateRequest)(nil),                     // 306: modal.client.VolumeGetOrCreateRequest
	(*VolumeGetOrCreateResponse)(nil),                    // 307: modal.client.VolumeGetOrCreateResponse
	(*VolumeHeartbeatRequest)(nil),                       // 308: modal.client.VolumeHeartbeatRequest
	(*VolumeListFilesRequest)(nil),                       // 309: modal.client.VolumeListFilesRequest
	(*VolumeListFilesResponse)(nil),                      // 310: modal.client.VolumeListFilesResponse
	(*VolumeListItem)(nil),                               // 311: modal.client.VolumeListItem
	(*VolumeListRequest)(nil),                            // 312: modal.client.VolumeListRequest
	(*VolumeListResponse)(nil),                           // 313: modal.client.VolumeListResponse
	(*VolumeMount)(nil),                                  // 314: modal.client.VolumeMount
	(*VolumePutFilesRequest)(nil),                        // 315: modal.client.VolumePutFilesRequest
	(*VolumeReloadRequest)(nil),                          // 316: modal.client.VolumeReloadRequest
	(*VolumeRemoveFileRequest)(nil),                      // 317: modal.client.VolumeRemoveFileRequest
	(*WebUrlInfo)(nil),                                   // 318: modal.client.WebUrlInfo
	(*WebhookConfig)(nil),                                // 319: modal.client.WebhookConfig
	(*WorkspaceNameLookupResponse)(nil),                  // 320: modal.client.WorkspaceNameLookupResponse
	(*PayloadValue)(nil),                                 // 321: modal.client.PayloadValue
	(*PayloadListValue)(nil),                             // 322: modal.client.PayloadListValue
	(*PayloadDictValue)(nil),                             // 323: modal.client.PayloadDictValue
	(*AppListResponse_AppListItem)(nil),                  // 324: modal.client.AppListResponse.AppListItem
	nil,                                                  // 325: modal.client.AppPublishRequest.FunctionIdsEntry
	nil,                                                  // 326: modal.client.AppPublishRequest.ClassIdsEntry
	nil,                                                  // 327: modal.client.AppPublishRequest.DefinitionIdsEntry
	nil,                                                  // 328: modal.client.AppSetObjectsRequest.IndexedObjectIdsEntry
	(*Asgi_Http)(nil),                                    // 329: modal.client.Asgi.Http
	(*Asgi_HttpRequest)(nil),                             // 330: modal.client.Asgi.HttpRequest
	(*Asgi_HttpResponseStart)(nil),                       // 331: modal.client.Asgi.HttpResponseStart
	(*Asgi_HttpResponseBody)(nil),                        // 332: modal.client.Asgi.HttpResponseBody
	(*Asgi_HttpResponseTrailers)(nil),                    // 333: modal.client.Asgi.HttpResponseTrailers
	(*Asgi_HttpDisconnect)(nil),                          // 334: modal.client.Asgi.HttpDisconnect
	(*Asgi_Websocket)(nil),                               // 335: modal.client.Asgi.Websocket
	(*Asgi_WebsocketConnect)(nil),                        // 336: modal.client.Asgi.WebsocketConnect
	(*Asgi_WebsocketAccept)(nil),                         // 337: modal.client.Asgi.WebsocketAccept
	(*Asgi_WebsocketReceive)(nil),                        // 338: modal.client.Asgi.WebsocketReceive
	(*Asgi_WebsocketSend)(nil),                           // 339: modal.client.Asgi.WebsocketSend
	(*Asgi_WebsocketDisconnect)(nil),                     // 340: modal.client.Asgi.WebsocketDisconnect
	(*Asgi_WebsocketClose)(nil),                          // 341: modal.client.Asgi.WebsocketClose
	nil,                                                  // 342: modal.client.ContainerArguments.TracingContextEntry
	(*DictListResponse_DictInfo)(nil),                    // 343: modal.client.DictListResponse.DictInfo
	(*FunctionData_RankedFunction)(nil),                  // 344: modal.client.FunctionData.RankedFunction
	(*QueueListResponse_QueueInfo)(nil),                  // 345: modal.client.QueueListResponse.QueueInfo
	(*Schedule_Cron)(nil),                                // 346: modal.client.Schedule.Cron
	(*Schedule_Period)(nil),                              // 347: modal.client.Schedule.Period
	nil,                                                  // 348: modal.client.SecretCreateRequest.EnvDictEntry
	nil,                                                  // 349: modal.client.SecretGetOrCreateRequest.EnvDictEntry
	(*wrapperspb.StringValue)(nil),                       // 350: google.protobuf.StringValue
	(*emptypb.Empty)(nil),                                // 351: google.protobuf.Empty
}
var file_pkg_modal_api_proto_depIdxs = []int32{
	1,   // 0: modal.client.AppClientDisconnectRequest.reason:type_name -> modal.client.AppDisconnectReason
	2,   // 1: modal.client.AppCreateRequest.app_state:type_name -> modal.client.AppState
	10,  // 2: modal.client.AppDeployRequest.namespace:type_name -> modal.client.DeploymentNamespace
	0,   // 3: modal.client.AppDeployRequest.visibility:type_name -> modal.client.AppDeployVisibility
	10,  // 4: modal.client.AppDeploySingleObjectRequest.namespace:type_name -> modal.client.DeploymentNamespace
	41,  // 5: modal.client.AppDeploymentHistoryResponse.app_deployment_histories:type_name -> modal.client.AppDeploymentHistory
	10,  // 6: modal.client.AppGetByDeploymentNameRequest.namespace:type_name -> modal.client.DeploymentNamespace
	11,  // 7: modal.client.AppGetLogsRequest.file_descriptor:type_name -> modal.client.FileDescriptor
	203, // 8: modal.client.AppGetObjectsItem.object:type_name -> modal.client.Object
	47,  // 9: modal.client.AppGetObjectsResponse.items:type_name -> modal.client.AppGetObjectsItem
	15,  // 10: modal.client.AppGetOrCreateRequest.object_creation_type:type_name -> modal.client.ObjectCreationType
	324, // 11: modal.client.AppListResponse.apps:type_name -> modal.client.AppListResponse.AppListItem
	2,   // 12: modal.client.AppPublishRequest.app_state:type_name -> modal.client.AppState
	325, // 13: modal.client.AppPublishRequest.function_ids:type_name -> modal.client.AppPublishRequest.FunctionIdsEntry
	326, // 14: modal.client.AppPublishRequest.class_ids:type_name -> modal.client.AppPublishRequest.ClassIdsEntry
	327, // 15: modal.client.AppPublishRequest.definition_ids:type_name -> modal.client.AppPublishRequest.DefinitionIdsEntry
	328, // 16: modal.client.AppSetObjectsRequest.indexed_object_ids:type_name -> modal.client.AppSetObjectsRequest.IndexedObjectIdsEntry
	2,   // 17: modal.client.AppSetObjectsRequest.new_app_state:type_name -> modal.client.AppState
	3,   // 18: modal.client.AppStopRequest.source:type_name -> modal.client.AppStopSource
	329, // 19: modal.client.Asgi.http:type_name -> modal.client.Asgi.Http
	330, // 20: modal.client.Asgi.http_request:type_name -> modal.client.Asgi.HttpRequest
	331, // 21: modal.client.Asgi.http_response_start:type_name -> modal.client.Asgi.HttpResponseStart
	332, // 22: modal.client.Asgi.http_response_body:type_name -> modal.client.Asgi.HttpResponseBody
	333, // 23: modal.client.Asgi.http_response_trailers:type_name -> modal.client.Asgi.HttpResponseTrailers
	334, // 24: modal.client.Asgi.http_disconnect:type_name -> modal.client.Asgi.HttpDisconnect
	335, // 25: modal.client.Asgi.websocket:type_name -> modal.client.Asgi.Websocket
	336, // 26: modal.client.Asgi.websocket_connect:type_name -> modal.client.Asgi.WebsocketConnect
	337, // 27: modal.client.Asgi.websocket_accept:type_name -> modal.client.Asgi.WebsocketAccept
	338, // 28: modal.client.Asgi.websocket_receive:type_name -> modal.client.Asgi.WebsocketReceive
	339, // 29: modal.client.Asgi.websocket_send:type_name -> modal.client.Asgi.WebsocketSend
	340, // 30: modal.client.Asgi.websocket_disconnect:type_name -> modal.client.Asgi.WebsocketDisconnect
	341, // 31: modal.client.Asgi.websocket_close:type_name -> modal.client.Asgi.WebsocketClose
	201, // 32: modal.client.BlobCreateResponse.multipart:type_name -> modal.client.MultiPartUpload
	166, // 33: modal.client.BuildFunction.input:type_name -> modal.client.FunctionInput
	5,   // 34: modal.client.CheckpointInfo.status:type_name -> modal.client.CheckpointStatus
	76,  // 35: modal.client.ClassCreateRequest.methods:type_name -> modal.client.ClassMethod
	75,  // 36: modal.client.ClassCreateResponse.handle_metadata:type_name -> modal.client.ClassHandleMetadata
	10,  // 37: modal.client.ClassGetRequest.namespace:type_name -> modal.client.DeploymentNamespace
	75,  // 38: modal.client.ClassGetResponse.handle_metadata:type_name -> modal.client.ClassHandleMetadata
	76,  // 39: modal.client.ClassHandleMetadata.methods:type_name -> modal.client.ClassMethod
	165, // 40: modal.client.ClassHandleMetadata.class_function_metadata:type_name -> modal.client.FunctionHandleMetadata
	165, // 41: modal.client.ClassMethod.function_handle_metadata:type_name -> modal.client.FunctionHandleMetadata
	25,  // 42: modal.client.ClassParameterInfo.format:type_name -> modal.client.ClassParameterInfo.ParameterSerializationFormat
	79,  // 43: modal.client.ClassParameterInfo.schema:type_name -> modal.client.ClassParameterSpec
	80,  // 44: modal.client.ClassParameterSet.parameters:type_name -> modal.client.ClassParameterValue
	16,  // 45: modal.client.ClassParameterSpec.type:type_name -> modal.client.ParameterType
	16,  // 46: modal.client.ClassParameterValue.type:type_name -> modal.client.ParameterType
	26,  // 47: modal.client.CloudBucketMount.bucket_type:type_name -> modal.client.CloudBucketMount.BucketType
	136, // 48: modal.client.ContainerArguments.function_def:type_name -> modal.client.Function
	210, // 49: modal.client.ContainerArguments.proxy_info:type_name -> modal.client.ProxyInfo
	342, // 50: modal.client.ContainerArguments.tracing_context:type_name -> modal.client.ContainerArguments.TracingContextEntry
	11,  // 51: modal.client.ContainerExecGetOutputRequest.file_descriptor:type_name -> modal.client.FileDescriptor
	233, // 52: modal.client.ContainerExecPutInputRequest.input:type_name -> modal.client.RuntimeInputMessage
	205, // 53: modal.client.ContainerExecRequest.pty_info:type_name -> modal.client.PTYInfo
	69,  // 54: modal.client.ContainerHeartbeatResponse.cancel_input_event:type_name -> modal.client.CancelInputEvent
	285, // 55: modal.client.ContainerLogRequest.logs:type_name -> modal.client.TaskLogs
	8,   // 56: modal.client.DNSRecord.type:type_name -> modal.client.DNSRecordType
	9,   // 57: modal.client.DataChunk.data_format:type_name -> modal.client.DataFormat
	10,  // 58: modal.client.DictGetOrCreateRequest.namespace:type_name -> modal.client.DeploymentNamespace
	15,  // 59: modal.client.DictGetOrCreateRequest.object_creation_type:type_name -> modal.client.ObjectCreationType
	105, // 60: modal.client.DictGetOrCreateRequest.data:type_name -> modal.client.DictEntry
	343, // 61: modal.client.DictListResponse.dicts:type_name -> modal.client.DictListResponse.DictInfo
	105, // 62: modal.client.DictUpdateRequest.updates:type_name -> modal.client.DictEntry
	4,   // 63: modal.client.Domain.certificate_status:type_name -> modal.client.CertificateStatus
	98,  // 64: modal.client.Domain.dns_records:type_name -> modal.client.DNSRecord
	119, // 65: modal.client.DomainCertificateVerifyResponse.domain:type_name -> modal.client.Domain
	98,  // 66: modal.client.DomainCreateResponse.dns_records:type_name -> modal.client.DNSRecord
	119, // 67: modal.client.DomainListResponse.domains:type_name -> modal.client.Domain
	15,  // 68: modal.client.EnvironmentGetOrCreateRequest.object_creation_type:type_name -> modal.client.ObjectCreationType
	132, // 69: modal.client.EnvironmentGetOrCreateResponse.metadata:type_name -> modal.client.EnvironmentMetadata
	130, // 70: modal.client.EnvironmentListResponse.items:type_name -> modal.client.EnvironmentListItem
	133, // 71: modal.client.EnvironmentMetadata.settings:type_name -> modal.client.EnvironmentSettings
	350, // 72: modal.client.EnvironmentUpdateRequest.name:type_name -> google.protobuf.StringValue
	350, // 73: modal.client.EnvironmentUpdateRequest.web_suffix:type_name -> google.protobuf.StringValue
	27,  // 74: modal.client.FileEntry.type:type_name -> modal.client.FileEntry.FileType
	28,  // 75: modal.client.Function.definition_type:type_name -> modal.client.Function.DefinitionType
	29,  // 76: modal.client.Function.function_type:type_name -> modal.client.Function.FunctionType
	232, // 77: modal.client.Function.resources:type_name -> modal.client.Resources
	231, // 78: modal.client.Function.rate_limit:type_name -> modal.client.RateLimit
	319, // 79: modal.client.Function.webhook_config:type_name -> modal.client.WebhookConfig
	277, // 80: modal.client.Function.shared_volume_mounts:type_name -> modal.client.SharedVolumeMount
	178, // 81: modal.client.Function.retry_policy:type_name -> modal.client.FunctionRetryPolicy
	205, // 82: modal.client.Function.pty_info:type_name -> modal.client.PTYInfo
	7,   // 83: modal.client.Function.cloud_provider:type_name -> modal.client.CloudProvider
	318, // 84: modal.client.Function.web_url_info:type_name -> modal.client.WebUrlInfo
	314, // 85: modal.client.Function.volume_mounts:type_name -> modal.client.VolumeMount
	97,  // 86: modal.client.Function.custom_domain_info:type_name -> modal.client.CustomDomainInfo
	70,  // 87: modal.client.Function.checkpoint:type_name -> modal.client.CheckpointInfo
	204, // 88: modal.client.Function.object_dependencies:type_name -> modal.client.ObjectDependency
	236, // 89: modal.client.Function.s3_mounts:type_name -> modal.client.S3Mount
	82,  // 90: modal.client.Function.cloud_bucket_mounts:type_name -> modal.client.CloudBucketMount
	258, // 91: modal.client.Function.scheduler_placement:type_name -> modal.client.SchedulerPlacement
	77,  // 92: modal.client.Function.class_parameter_info:type_name -> modal.client.ClassParameterInfo
	290, // 93: modal.client.Function._experimental_task_templates:type_name -> modal.client.TaskTemplate
	257, // 94: modal.client.Function.schedule:type_name -> modal.client.Schedule
	169, // 95: modal.client.FunctionBindParamsRequest.function_options:type_name -> modal.client.FunctionOptions
	165, // 96: modal.client.FunctionBindParamsResponse.handle_metadata:type_name -> modal.client.FunctionHandleMetadata
	193, // 97: modal.client.FunctionCallInfo.pending_inputs:type_name -> modal.client.InputCategoryInfo
	193, // 98: modal.client.FunctionCallInfo.failed_inputs:type_name -> modal.client.InputCategoryInfo
	193, // 99: modal.client.FunctionCallInfo.succeeded_inputs:type_name -> modal.client.InputCategoryInfo
	193, // 100: modal.client.FunctionCallInfo.timeout_inputs:type_name -> modal.client.InputCategoryInfo
	193, // 101: modal.client.FunctionCallInfo.cancelled_inputs:type_name -> modal.client.InputCategoryInfo
	142, // 102: modal.client.FunctionCallListResponse.function_calls:type_name -> modal.client.FunctionCallInfo
	99,  // 103: modal.client.FunctionCallPutDataRequest.data_chunks:type_name -> modal.client.DataChunk
	136, // 104: modal.client.FunctionCreateRequest.function:type_name -> modal.client.Function
	257, // 105: modal.client.FunctionCreateRequest.schedule:type_name -> modal.client.Schedule
	148, // 106: modal.client.FunctionCreateRequest.function_data:type_name -> modal.client.FunctionData
	136, // 107: modal.client.FunctionCreateResponse.function:type_name -> modal.client.Function
	165, // 108: modal.client.FunctionCreateResponse.handle_metadata:type_name -> modal.client.FunctionHandleMetadata
	29,  // 109: modal.client.FunctionData.function_type:type_name -> modal.client.Function.FunctionType
	318, // 110: modal.client.FunctionData.web_url_info:type_name -> modal.client.WebUrlInfo
	319, // 111: modal.client.FunctionData.webhook_config:type_name -> modal.client.WebhookConfig
	97,  // 112: modal.client.FunctionData.custom_domain_info:type_name -> modal.client.CustomDomainInfo
	77,  // 113: modal.client.FunctionData.class_parameter_info:type_name -> modal.client.ClassParameterInfo
	344, // 114: modal.client.FunctionData.ranked_functions:type_name -> modal.client.FunctionData.RankedFunction
	257, // 115: modal.client.FunctionData.schedule:type_name -> modal.client.Schedule
	136, // 116: modal.client.FunctionExtended.function_singleton:type_name -> modal.client.Function
	148, // 117: modal.client.FunctionExtended.function_data:type_name -> modal.client.FunctionData
	192, // 118: modal.client.FunctionGetCallGraphResponse.inputs:type_name -> modal.client.InputCallGraphInfo
	139, // 119: modal.client.FunctionGetCallGraphResponse.function_calls:type_name -> modal.client.FunctionCallCallGraphInfo
	166, // 120: modal.client.FunctionGetInputsItem.input:type_name -> modal.client.FunctionInput
	155, // 121: modal.client.FunctionGetInputsResponse.inputs:type_name -> modal.client.FunctionGetInputsItem
	184, // 122: modal.client.FunctionGetOutputsItem.result:type_name -> modal.client.GenericResult
	9,   // 123: modal.client.FunctionGetOutputsItem.data_format:type_name -> modal.client.DataFormat
	158, // 124: modal.client.FunctionGetOutputsResponse.outputs:type_name -> modal.client.FunctionGetOutputsItem
	10,  // 125: modal.client.FunctionGetRequest.namespace:type_name -> modal.client.DeploymentNamespace
	165, // 126: modal.client.FunctionGetResponse.handle_metadata:type_name -> modal.client.FunctionHandleMetadata
	29,  // 127: modal.client.FunctionHandleMetadata.function_type:type_name -> modal.client.Function.FunctionType
	77,  // 128: modal.client.FunctionHandleMetadata.class_parameter_info:type_name -> modal.client.ClassParameterInfo
	9,   // 129: modal.client.FunctionInput.data_format:type_name -> modal.client.DataFormat
	13,  // 130: modal.client.FunctionMapRequest.function_call_type:type_name -> modal.client.FunctionCallType
	172, // 131: modal.client.FunctionMapRequest.pipelined_inputs:type_name -> modal.client.FunctionPutInputsItem
	12,  // 132: modal.client.FunctionMapRequest.function_call_invocation_type:type_name -> modal.client.FunctionCallInvocationType
	175, // 133: modal.client.FunctionMapResponse.pipelined_inputs:type_name -> modal.client.FunctionPutInputsResponseItem
	232, // 134: modal.client.FunctionOptions.resources:type_name -> modal.client.Resources
	178, // 135: modal.client.FunctionOptions.retry_policy:type_name -> modal.client.FunctionRetryPolicy
	314, // 136: modal.client.FunctionOptions.volume_mounts:type_name -> modal.client.VolumeMount
	29,  // 137: modal.client.FunctionPrecreateRequest.function_type:type_name -> modal.client.Function.FunctionType
	319, // 138: modal.client.FunctionPrecreateRequest.webhook_config:type_name -> modal.client.WebhookConfig
	165, // 139: modal.client.FunctionPrecreateResponse.handle_metadata:type_name -> modal.client.FunctionHandleMetadata
	166, // 140: modal.client.FunctionPutInputsItem.input:type_name -> modal.client.FunctionInput
	172, // 141: modal.client.FunctionPutInputsRequest.inputs:type_name -> modal.client.FunctionPutInputsItem
	175, // 142: modal.client.FunctionPutInputsResponse.inputs:type_name -> modal.client.FunctionPutInputsResponseItem
	184, // 143: modal.client.FunctionPutOutputsItem.result:type_name -> modal.client.GenericResult
	9,   // 144: modal.client.FunctionPutOutputsItem.data_format:type_name -> modal.client.DataFormat
	176, // 145: modal.client.FunctionPutOutputsRequest.outputs:type_name -> modal.client.FunctionPutOutputsItem
	14,  // 146: modal.client.GPUConfig.type:type_name -> modal.client.GPUType
	30,  // 147: modal.client.GenericResult.status:type_name -> modal.client.GenericResult.GenericStatus
	31,  // 148: modal.client.GenericResult.gen_status:type_name -> modal.client.GenericResult.GeneratorStatus
	63,  // 149: modal.client.Image.base_images:type_name -> modal.client.BaseImage
	186, // 150: modal.client.Image.context_files:type_name -> modal.client.ImageContextFile
	182, // 151: modal.client.Image.gpu_config:type_name -> modal.client.GPUConfig
	191, // 152: modal.client.Image.image_registry_config:type_name -> modal.client.ImageRegistryConfig
	68,  // 153: modal.client.Image.build_function:type_name -> modal.client.BuildFunction
	185, // 154: modal.client.ImageGetOrCreateRequest.image:type_name -> modal.client.Image
	10,  // 155: modal.client.ImageGetOrCreateRequest.namespace:type_name -> modal.client.DeploymentNamespace
	184, // 156: modal.client.ImageJoinStreamingResponse.result:type_name -> modal.client.GenericResult
	285, // 157: modal.client.ImageJoinStreamingResponse.task_logs:type_name -> modal.client.TaskLogs
	20,  // 158: modal.client.ImageRegistryConfig.registry_auth_type:type_name -> modal.client.RegistryAuthType
	30,  // 159: modal.client.InputCallGraphInfo.status:type_name -> modal.client.GenericResult.GenericStatus
	194, // 160: modal.client.InputCategoryInfo.latest:type_name -> modal.client.InputInfo
	10,  // 161: modal.client.MountGetOrCreateRequest.namespace:type_name -> modal.client.DeploymentNamespace
	15,  // 162: modal.client.MountGetOrCreateRequest.object_creation_type:type_name -> modal.client.ObjectCreationType
	195, // 163: modal.client.MountGetOrCreateRequest.files:type_name -> modal.client.MountFile
	198, // 164: modal.client.MountGetOrCreateResponse.handle_metadata:type_name -> modal.client.MountHandleMetadata
	32,  // 165: modal.client.NetworkAccess.network_access_type:type_name -> modal.client.NetworkAccess.NetworkAccessType
	165, // 166: modal.client.Object.function_handle_metadata:type_name -> modal.client.FunctionHandleMetadata
	198, // 167: modal.client.Object.mount_handle_metadata:type_name -> modal.client.MountHandleMetadata
	75,  // 168: modal.client.Object.class_handle_metadata:type_name -> modal.client.ClassHandleMetadata
	245, // 169: modal.client.Object.sandbox_handle_metadata:type_name -> modal.client.SandboxHandleMetadata
	33,  // 170: modal.client.PTYInfo.pty_type:type_name -> modal.client.PTYInfo.PTYType
	206, // 171: modal.client.PortSpecs.ports:type_name -> modal.client.PortSpec
	10,  // 172: modal.client.ProxyGetOrCreateRequest.namespace:type_name -> modal.client.DeploymentNamespace
	15,  // 173: modal.client.ProxyGetOrCreateRequest.object_creation_type:type_name -> modal.client.ObjectCreationType
	18,  // 174: modal.client.ProxyIp.status:type_name -> modal.client.ProxyIpStatus
	18,  // 175: modal.client.ProxyIpGetOrCreateResponse.status:type_name -> modal.client.ProxyIpStatus
	211, // 176: modal.client.ProxyIpListResponse.proxy_ips:type_name -> modal.client.ProxyIp
	10,  // 177: modal.client.QueueGetOrCreateRequest.namespace:type_name -> modal.client.DeploymentNamespace
	15,  // 178: modal.client.QueueGetOrCreateRequest.object_creation_type:type_name -> modal.client.ObjectCreationType
	345, // 179: modal.client.QueueListResponse.queues:type_name -> modal.client.QueueListResponse.QueueInfo
	223, // 180: modal.client.QueueNextItemsResponse.items:type_name -> modal.client.QueueItem
	19,  // 181: modal.client.RateLimit.interval:type_name -> modal.client.RateLimitInterval
	182, // 182: modal.client.Resources.gpu_config:type_name -> modal.client.GPUConfig
	235, // 183: modal.client.RuntimeOutputBatch.items:type_name -> modal.client.RuntimeOutputMessage
	11,  // 184: modal.client.RuntimeOutputMessage.file_descriptor:type_name -> modal.client.FileDescriptor
	232, // 185: modal.client.Sandbox.resources:type_name -> modal.client.Resources
	7,   // 186: modal.client.Sandbox.cloud_provider:type_name -> modal.client.CloudProvider
	277, // 187: modal.client.Sandbox.nfs_mounts:type_name -> modal.client.SharedVolumeMount
	236, // 188: modal.client.Sandbox.s3_mounts:type_name -> modal.client.S3Mount
	82,  // 189: modal.client.Sandbox.cloud_bucket_mounts:type_name -> modal.client.CloudBucketMount
	314, // 190: modal.client.Sandbox.volume_mounts:type_name -> modal.client.VolumeMount
	205, // 191: modal.client.Sandbox.pty_info:type_name -> modal.client.PTYInfo
	258, // 192: modal.client.Sandbox.scheduler_placement:type_name -> modal.client.SchedulerPlacement
	207, // 193: modal.client.Sandbox.open_ports:type_name -> modal.client.PortSpecs
	202, // 194: modal.client.Sandbox.network_access:type_name -> modal.client.NetworkAccess
	237, // 195: modal.client.SandboxCreateRequest.definition:type_name -> modal.client.Sandbox
	11,  // 196: modal.client.SandboxGetLogsRequest.file_descriptor:type_name -> modal.client.FileDescriptor
	184, // 197: modal.client.SandboxGetTunnelsResponse.result:type_name -> modal.client.GenericResult
	295, // 198: modal.client.SandboxGetTunnelsResponse.tunnels:type_name -> modal.client.TunnelData
	184, // 199: modal.client.SandboxHandleMetadata.result:type_name -> modal.client.GenericResult
	282, // 200: modal.client.SandboxInfo.task_info:type_name -> modal.client.TaskInfo
	251, // 201: modal.client.SandboxListRequest.tags:type_name -> modal.client.SandboxTag
	246, // 202: modal.client.SandboxListResponse.sandboxes:type_name -> modal.client.SandboxInfo
	251, // 203: modal.client.SandboxTagsSetRequest.tags:type_name -> modal.client.SandboxTag
	184, // 204: modal.client.SandboxTerminateResponse.existing_result:type_name -> modal.client.GenericResult
	184, // 205: modal.client.SandboxWaitResponse.result:type_name -> modal.client.GenericResult
	346, // 206: modal.client.Schedule.cron:type_name -> modal.client.Schedule.Cron
	347, // 207: modal.client.Schedule.period:type_name -> modal.client.Schedule.Period
	348, // 208: modal.client.SecretCreateRequest.env_dict:type_name -> modal.client.SecretCreateRequest.EnvDictEntry
	10,  // 209: modal.client.SecretGetOrCreateRequest.namespace:type_name -> modal.client.DeploymentNamespace
	15,  // 210: modal.client.SecretGetOrCreateRequest.object_creation_type:type_name -> modal.client.ObjectCreationType
	349, // 211: modal.client.SecretGetOrCreateRequest.env_dict:type_name -> modal.client.SecretGetOrCreateRequest.EnvDictEntry
	264, // 212: modal.client.SecretListResponse.items:type_name -> modal.client.SecretListItem
	10,  // 213: modal.client.SharedVolumeGetOrCreateRequest.namespace:type_name -> modal.client.DeploymentNamespace
	15,  // 214: modal.client.SharedVolumeGetOrCreateRequest.object_creation_type:type_name -> modal.client.ObjectCreationType
	135, // 215: modal.client.SharedVolumeListFilesResponse.entries:type_name -> modal.client.FileEntry
	7,   // 216: modal.client.SharedVolumeListItem.cloud_provider:type_name -> modal.client.CloudProvider
	274, // 217: modal.client.SharedVolumeListResponse.items:type_name -> modal.client.SharedVolumeListItem
	7,   // 218: modal.client.SharedVolumeMount.cloud_provider:type_name -> modal.client.CloudProvider
	184, // 219: modal.client.TaskInfo.result:type_name -> modal.client.GenericResult
	289, // 220: modal.client.TaskListResponse.tasks:type_name -> modal.client.TaskStats
	21,  // 221: modal.client.TaskLogs.task_state:type_name -> modal.client.TaskState
	11,  // 222: modal.client.TaskLogs.file_descriptor:type_name -> modal.client.FileDescriptor
	287, // 223: modal.client.TaskLogs.task_progress:type_name -> modal.client.TaskProgress
	285, // 224: modal.client.TaskLogsBatch.items:type_name -> modal.client.TaskLogs
	17,  // 225: modal.client.TaskProgress.progress_type:type_name -> modal.client.ProgressType
	184, // 226: modal.client.TaskResultRequest.result:type_name -> modal.client.GenericResult
	232, // 227: modal.client.TaskTemplate.resources:type_name -> modal.client.Resources
	10,  // 228: modal.client.VolumeGetOrCreateRequest.namespace:type_name -> modal.client.DeploymentNamespace
	15,  // 229: modal.client.VolumeGetOrCreateRequest.object_creation_type:type_name -> modal.client.ObjectCreationType
	22,  // 230: modal.client.VolumeGetOrCreateRequest.version:type_name -> modal.client.VolumeFsVersion
	22,  // 231: modal.client.VolumeGetOrCreateResponse.version:type_name -> modal.client.VolumeFsVersion
	135, // 232: modal.client.VolumeListFilesResponse.entries:type_name -> modal.client.FileEntry
	311, // 233: modal.client.VolumeListResponse.items:type_name -> modal.client.VolumeListItem
	195, // 234: modal.client.VolumePutFilesRequest.files:type_name -> modal.client.MountFile
	24,  // 235: modal.client.WebhookConfig.type:type_name -> modal.client.WebhookType
	23,  // 236: modal.client.WebhookConfig.async_mode:type_name -> modal.client.WebhookAsyncMode
	96,  // 237: modal.client.WebhookConfig.custom_domains:type_name -> modal.client.CustomDomainConfig
	16,  // 238: modal.client.PayloadValue.type:type_name -> modal.client.ParameterType
	322, // 239: modal.client.PayloadValue.list_value:type_name -> modal.client.PayloadListValue
	323, // 240: modal.client.PayloadValue.dict_value:type_name -> modal.client.PayloadDictValue
	321, // 241: modal.client.PayloadListValue.items:type_name -> modal.client.PayloadValue
	321, // 242: modal.client.PayloadDictValue.values:type_name -> modal.client.PayloadValue
	2,   // 243: modal.client.AppListResponse.AppListItem.state:type_name -> modal.client.AppState
	136, // 244: modal.client.FunctionData.RankedFunction.function:type_name -> modal.client.Function
	34,  // 245: modal.client.ModalClient.AppClientDisconnect:input_type -> modal.client.AppClientDisconnectRequest
	35,  // 246: modal.client.ModalClient.AppCreate:input_type -> modal.client.AppCreateRequest
	37,  // 247: modal.client.ModalClient.AppDeploy:input_type -> modal.client.AppDeployRequest
	39,  // 248: modal.client.ModalClient.AppDeploySingleObject:input_type -> modal.client.AppDeploySingleObjectRequest
	42,  // 249: modal.client.ModalClient.AppDeploymentHistory:input_type -> modal.client.AppDeploymentHistoryRequest
	44,  // 250: modal.client.ModalClient.AppGetByDeploymentName:input_type -> modal.client.AppGetByDeploymentNameRequest
	46,  // 251: modal.client.ModalClient.AppGetLogs:input_type -> modal.client.AppGetLogsRequest
	48,  // 252: modal.client.ModalClient.AppGetObjects:input_type -> modal.client.AppGetObjectsRequest
	50,  // 253: modal.client.ModalClient.AppGetOrCreate:input_type -> modal.client.AppGetOrCreateRequest
	52,  // 254: modal.client.ModalClient.AppHeartbeat:input_type -> modal.client.AppHeartbeatRequest
	53,  // 255: modal.client.ModalClient.AppList:input_type -> modal.client.AppListRequest
	55,  // 256: modal.client.ModalClient.AppLookup:input_type -> modal.client.AppLookupRequest
	57,  // 257: modal.client.ModalClient.AppPublish:input_type -> modal.client.AppPublishRequest
	59,  // 258: modal.client.ModalClient.AppRollback:input_type -> modal.client.AppRollbackRequest
	60,  // 259: modal.client.ModalClient.AppSetObjects:input_type -> modal.client.AppSetObjectsRequest
	61,  // 260: modal.client.ModalClient.AppStop:input_type -> modal.client.AppStopRequest
	64,  // 261: modal.client.ModalClient.BlobCreate:input_type -> modal.client.BlobCreateRequest
	66,  // 262: modal.client.ModalClient.BlobGet:input_type -> modal.client.BlobGetRequest
	71,  // 263: modal.client.ModalClient.ClassCreate:input_type -> modal.client.ClassCreateRequest
	73,  // 264: modal.client.ModalClient.ClassGet:input_type -> modal.client.ClassGetRequest
	351, // 265: modal.client.ModalClient.ClientHello:input_type -> google.protobuf.Empty
	84,  // 266: modal.client.ModalClient.ContainerCheckpoint:input_type -> modal.client.ContainerCheckpointRequest
	87,  // 267: modal.client.ModalClient.ContainerExec:input_type -> modal.client.ContainerExecRequest
	85,  // 268: modal.client.ModalClient.ContainerExecGetOutput:input_type -> modal.client.ContainerExecGetOutputRequest
	86,  // 269: modal.client.ModalClient.ContainerExecPutInput:input_type -> modal.client.ContainerExecPutInputRequest
	89,  // 270: modal.client.ModalClient.ContainerExecWait:input_type -> modal.client.ContainerExecWaitRequest
	91,  // 271: modal.client.ModalClient.ContainerHeartbeat:input_type -> modal.client.ContainerHeartbeatRequest
	93,  // 272: modal.client.ModalClient.ContainerLog:input_type -> modal.client.ContainerLogRequest
	94,  // 273: modal.client.ModalClient.ContainerStop:input_type -> modal.client.ContainerStopRequest
	100, // 274: modal.client.ModalClient.DictClear:input_type -> modal.client.DictClearRequest
	101, // 275: modal.client.ModalClient.DictContains:input_type -> modal.client.DictContainsRequest
	103, // 276: modal.client.ModalClient.DictContents:input_type -> modal.client.DictContentsRequest
	104, // 277: modal.client.ModalClient.DictDelete:input_type -> modal.client.DictDeleteRequest
	108, // 278: modal.client.ModalClient.DictGet:input_type -> modal.client.DictGetRequest
	106, // 279: modal.client.ModalClient.DictGetOrCreate:input_type -> modal.client.DictGetOrCreateRequest
	110, // 280: modal.client.ModalClient.DictHeartbeat:input_type -> modal.client.DictHeartbeatRequest
	111, // 281: modal.client.ModalClient.DictLen:input_type -> modal.client.DictLenRequest
	113, // 282: modal.client.ModalClient.DictList:input_type -> modal.client.DictListRequest
	115, // 283: modal.client.ModalClient.DictPop:input_type -> modal.client.DictPopRequest
	117, // 284: modal.client.ModalClient.DictUpdate:input_type -> modal.client.DictUpdateRequest
	120, // 285: modal.client.ModalClient.DomainCertificateVerify:input_type -> modal.client.DomainCertificateVerifyRequest
	122, // 286: modal.client.ModalClient.DomainCreate:input_type -> modal.client.DomainCreateRequest
	124, // 287: modal.client.ModalClient.DomainList:input_type -> modal.client.DomainListRequest
	126, // 288: modal.client.ModalClient.EnvironmentCreate:input_type -> modal.client.EnvironmentCreateRequest
	127, // 289: modal.client.ModalClient.EnvironmentDelete:input_type -> modal.client.EnvironmentDeleteRequest
	128, // 290: modal.client.ModalClient.EnvironmentGetOrCreate:input_type -> modal.client.EnvironmentGetOrCreateRequest
	351, // 291: modal.client.ModalClient.EnvironmentList:input_type -> google.protobuf.Empty
	134, // 292: modal.client.ModalClient.EnvironmentUpdate:input_type -> modal.client.EnvironmentUpdateRequest
	137, // 293: modal.client.ModalClient.FunctionBindParams:input_type -> modal.client.FunctionBindParamsRequest
	140, // 294: modal.client.ModalClient.FunctionCallCancel:input_type -> modal.client.FunctionCallCancelRequest
	141, // 295: modal.client.ModalClient.FunctionCallGetDataIn:input_type -> modal.client.FunctionCallGetDataRequest
	141, // 296: modal.client.ModalClient.FunctionCallGetDataOut:input_type -> modal.client.FunctionCallGetDataRequest
	143, // 297: modal.client.ModalClient.FunctionCallList:input_type -> modal.client.FunctionCallListRequest
	145, // 298: modal.client.ModalClient.FunctionCallPutDataOut:input_type -> modal.client.FunctionCallPutDataRequest
	146, // 299: modal.client.ModalClient.FunctionCreate:input_type -> modal.client.FunctionCreateRequest
	161, // 300: modal.client.ModalClient.FunctionGet:input_type -> modal.client.FunctionGetRequest
	150, // 301: modal.client.ModalClient.FunctionGetCallGraph:input_type -> modal.client.FunctionGetCallGraphRequest
	152, // 302: modal.client.ModalClient.FunctionGetCurrentStats:input_type -> modal.client.FunctionGetCurrentStatsRequest
	153, // 303: modal.client.ModalClient.FunctionGetDynamicConcurrency:input_type -> modal.client.FunctionGetDynamicConcurrencyRequest
	156, // 304: modal.client.ModalClient.FunctionGetInputs:input_type -> modal.client.FunctionGetInputsRequest
	159, // 305: modal.client.ModalClient.FunctionGetOutputs:input_type -> modal.client.FunctionGetOutputsRequest
	163, // 306: modal.client.ModalClient.FunctionGetSerialized:input_type -> modal.client.FunctionGetSerializedRequest
	167, // 307: modal.client.ModalClient.FunctionMap:input_type -> modal.client.FunctionMapRequest
	170, // 308: modal.client.ModalClient.FunctionPrecreate:input_type -> modal.client.FunctionPrecreateRequest
	173, // 309: modal.client.ModalClient.FunctionPutInputs:input_type -> modal.client.FunctionPutInputsRequest
	177, // 310: modal.client.ModalClient.FunctionPutOutputs:input_type -> modal.client.FunctionPutOutputsRequest
	351, // 311: modal.client.ModalClient.FunctionStartPtyShell:input_type -> google.protobuf.Empty
	180, // 312: modal.client.ModalClient.FunctionUpdateSchedulingParams:input_type -> modal.client.FunctionUpdateSchedulingParamsRequest
	187, // 313: modal.client.ModalClient.ImageGetOrCreate:input_type -> modal.client.ImageGetOrCreateRequest
	189, // 314: modal.client.ModalClient.ImageJoinStreaming:input_type -> modal.client.ImageJoinStreamingRequest
	196, // 315: modal.client.ModalClient.MountGetOrCreate:input_type -> modal.client.MountGetOrCreateRequest
	199, // 316: modal.client.ModalClient.MountPutFile:input_type -> modal.client.MountPutFileRequest
	208, // 317: modal.client.ModalClient.ProxyGetOrCreate:input_type -> modal.client.ProxyGetOrCreateRequest
	212, // 318: modal.client.ModalClient.ProxyIpDelete:input_type -> modal.client.ProxyIpDeleteRequest
	213, // 319: modal.client.ModalClient.ProxyIpGetOrCreate:input_type -> modal.client.ProxyIpGetOrCreateRequest
	351, // 320: modal.client.ModalClient.ProxyIpList:input_type -> google.protobuf.Empty
	216, // 321: modal.client.ModalClient.QueueClear:input_type -> modal.client.QueueClearRequest
	217, // 322: modal.client.ModalClient.QueueDelete:input_type -> modal.client.QueueDeleteRequest
	220, // 323: modal.client.ModalClient.QueueGet:input_type -> modal.client.QueueGetRequest
	218, // 324: modal.client.ModalClient.QueueGetOrCreate:input_type -> modal.client.QueueGetOrCreateRequest
	222, // 325: modal.client.ModalClient.QueueHeartbeat:input_type -> modal.client.QueueHeartbeatRequest
	224, // 326: modal.client.ModalClient.QueueLen:input_type -> modal.client.QueueLenRequest
	226, // 327: modal.client.ModalClient.QueueList:input_type -> modal.client.QueueListRequest
	228, // 328: modal.client.ModalClient.QueueNextItems:input_type -> modal.client.QueueNextItemsRequest
	230, // 329: modal.client.ModalClient.QueuePut:input_type -> modal.client.QueuePutRequest
	238, // 330: modal.client.ModalClient.SandboxCreate:input_type -> modal.client.SandboxCreateRequest
	240, // 331: modal.client.ModalClient.SandboxGetLogs:input_type -> modal.client.SandboxGetLogsRequest
	241, // 332: modal.client.ModalClient.SandboxGetTaskId:input_type -> modal.client.SandboxGetTaskIdRequest
	243, // 333: modal.client.ModalClient.SandboxGetTunnels:input_type -> modal.client.SandboxGetTunnelsRequest
	247, // 334: modal.client.ModalClient.SandboxList:input_type -> modal.client.SandboxListRequest
	249, // 335: modal.client.ModalClient.SandboxStdinWrite:input_type -> modal.client.SandboxStdinWriteRequest
	252, // 336: modal.client.ModalClient.SandboxTagsSet:input_type -> modal.client.SandboxTagsSetRequest
	253, // 337: modal.client.ModalClient.SandboxTerminate:input_type -> modal.client.SandboxTerminateRequest
	255, // 338: modal.client.ModalClient.SandboxWait:input_type -> modal.client.SandboxWaitRequest
	261, // 339: modal.client.ModalClient.SecretDelete:input_type -> modal.client.SecretDeleteRequest
	262, // 340: modal.client.ModalClient.SecretGetOrCreate:input_type -> modal.client.SecretGetOrCreateRequest
	265, // 341: modal.client.ModalClient.SecretList:input_type -> modal.client.SecretListRequest
	267, // 342: modal.client.ModalClient.SharedVolumeGetFile:input_type -> modal.client.SharedVolumeGetFileRequest
	269, // 343: modal.client.ModalClient.SharedVolumeGetOrCreate:input_type -> modal.client.SharedVolumeGetOrCreateRequest
	271, // 344: modal.client.ModalClient.SharedVolumeHeartbeat:input_type -> modal.client.SharedVolumeHeartbeatRequest
	275, // 345: modal.client.ModalClient.SharedVolumeList:input_type -> modal.client.SharedVolumeListRequest
	272, // 346: modal.client.ModalClient.SharedVolumeListFiles:input_type -> modal.client.SharedVolumeListFilesRequest
	272, // 347: modal.client.ModalClient.SharedVolumeListFilesStream:input_type -> modal.client.SharedVolumeListFilesRequest
	278, // 348: modal.client.ModalClient.SharedVolumePutFile:input_type -> modal.client.SharedVolumePutFileRequest
	280, // 349: modal.client.ModalClient.SharedVolumeRemoveFile:input_type -> modal.client.SharedVolumeRemoveFileRequest
	351, // 350: modal.client.ModalClient.TaskCurrentInputs:input_type -> google.protobuf.Empty
	283, // 351: modal.client.ModalClient.TaskList:input_type -> modal.client.TaskListRequest
	288, // 352: modal.client.ModalClient.TaskResult:input_type -> modal.client.TaskResultRequest
	291, // 353: modal.client.ModalClient.TokenFlowCreate:input_type -> modal.client.TokenFlowCreateRequest
	293, // 354: modal.client.ModalClient.TokenFlowWait:input_type -> modal.client.TokenFlowWaitRequest
	296, // 355: modal.client.ModalClient.TunnelStart:input_type -> modal.client.TunnelStartRequest
	298, // 356: modal.client.ModalClient.TunnelStop:input_type -> modal.client.TunnelStopRequest
	300, // 357: modal.client.ModalClient.VolumeCommit:input_type -> modal.client.VolumeCommitRequest
	302, // 358: modal.client.ModalClient.VolumeCopyFiles:input_type -> modal.client.VolumeCopyFilesRequest
	303, // 359: modal.client.ModalClient.VolumeDelete:input_type -> modal.client.VolumeDeleteRequest
	304, // 360: modal.client.ModalClient.VolumeGetFile:input_type -> modal.client.VolumeGetFileRequest
	306, // 361: modal.client.ModalClient.VolumeGetOrCreate:input_type -> modal.client.VolumeGetOrCreateRequest
	308, // 362: modal.client.ModalClient.VolumeHeartbeat:input_type -> modal.client.VolumeHeartbeatRequest
	312, // 363: modal.client.ModalClient.VolumeList:input_type -> modal.client.VolumeListRequest
	309, // 364: modal.client.ModalClient.VolumeListFiles:input_type -> modal.client.VolumeListFilesRequest
	315, // 365: modal.client.ModalClient.VolumePutFiles:input_type -> modal.client.VolumePutFilesRequest
	316, // 366: modal.client.ModalClient.VolumeReload:input_type -> modal.client.VolumeReloadRequest
	317, // 367: modal.client.ModalClient.VolumeRemoveFile:input_type -> modal.client.VolumeRemoveFileRequest
	351, // 368: modal.client.ModalClient.WorkspaceNameLookup:input_type -> google.protobuf.Empty
	351, // 369: modal.client.ModalClient.AppClientDisconnect:output_type -> google.protobuf.Empty
	36,  // 370: modal.client.ModalClient.AppCreate:output_type -> modal.client.AppCreateResponse
	38,  // 371: modal.client.ModalClient.AppDeploy:output_type -> modal.client.AppDeployResponse
	40,  // 372: modal.client.ModalClient.AppDeploySingleObject:output_type -> modal.client.AppDeploySingleObjectResponse
	43,  // 373: modal.client.ModalClient.AppDeploymentHistory:output_type -> modal.client.AppDeploymentHistoryResponse
	45,  // 374: modal.client.ModalClient.AppGetByDeploymentName:output_type -> modal.client.AppGetByDeploymentNameResponse
	286, // 375: modal.client.ModalClient.AppGetLogs:output_type -> modal.client.TaskLogsBatch
	49,  // 376: modal.client.ModalClient.AppGetObjects:output_type -> modal.client.AppGetObjectsResponse
	51,  // 377: modal.client.ModalClient.AppGetOrCreate:output_type -> modal.client.AppGetOrCreateResponse
	351, // 378: modal.client.ModalClient.AppHeartbeat:output_type -> google.protobuf.Empty
	54,  // 379: modal.client.ModalClient.AppList:output_type -> modal.client.AppListResponse
	56,  // 380: modal.client.ModalClient.AppLookup:output_type -> modal.client.AppLookupResponse
	58,  // 381: modal.client.ModalClient.AppPublish:output_type -> modal.client.AppPublishResponse
	351, // 382: modal.client.ModalClient.AppRollback:output_type -> google.protobuf.Empty
	351, // 383: modal.client.ModalClient.AppSetObjects:output_type -> google.protobuf.Empty
	351, // 384: modal.client.ModalClient.AppStop:output_type -> google.protobuf.Empty
	65,  // 385: modal.client.ModalClient.BlobCreate:output_type -> modal.client.BlobCreateResponse
	67,  // 386: modal.client.ModalClient.BlobGet:output_type -> modal.client.BlobGetResponse
	72,  // 387: modal.client.ModalClient.ClassCreate:output_type -> modal.client.ClassCreateResponse
	74,  // 388: modal.client.ModalClient.ClassGet:output_type -> modal.client.ClassGetResponse
	81,  // 389: modal.client.ModalClient.ClientHello:output_type -> modal.client.ClientHelloResponse
	351, // 390: modal.client.ModalClient.ContainerCheckpoint:output_type -> google.protobuf.Empty
	88,  // 391: modal.client.ModalClient.ContainerExec:output_type -> modal.client.ContainerExecResponse
	234, // 392: modal.client.ModalClient.ContainerExecGetOutput:output_type -> modal.client.RuntimeOutputBatch
	351, // 393: modal.client.ModalClient.ContainerExecPutInput:output_type -> google.protobuf.Empty
	90,  // 394: modal.client.ModalClient.ContainerExecWait:output_type -> modal.client.ContainerExecWaitResponse
	92,  // 395: modal.client.ModalClient.ContainerHeartbeat:output_type -> modal.client.ContainerHeartbeatResponse
	351, // 396: modal.client.ModalClient.ContainerLog:output_type -> google.protobuf.Empty
	95,  // 397: modal.client.ModalClient.ContainerStop:output_type -> modal.client.ContainerStopResponse
	351, // 398: modal.client.ModalClient.DictClear:output_type -> google.protobuf.Empty
	102, // 399: modal.client.ModalClient.DictContains:output_type -> modal.client.DictContainsResponse
	105, // 400: modal.client.ModalClient.DictContents:output_type -> modal.client.DictEntry
	351, // 401: modal.client.ModalClient.DictDelete:output_type -> google.protobuf.Empty
	109, // 402: modal.client.ModalClient.DictGet:output_type -> modal.client.DictGetResponse
	107, // 403: modal.client.ModalClient.DictGetOrCreate:output_type -> modal.client.DictGetOrCreateResponse
	351, // 404: modal.client.ModalClient.DictHeartbeat:output_type -> google.protobuf.Empty
	112, // 405: modal.client.ModalClient.DictLen:output_type -> modal.client.DictLenResponse
	114, // 406: modal.client.ModalClient.DictList:output_type -> modal.client.DictListResponse
	116, // 407: modal.client.ModalClient.DictPop:output_type -> modal.client.DictPopResponse
	118, // 408: modal.client.ModalClient.DictUpdate:output_type -> modal.client.DictUpdateResponse
	121, // 409: modal.client.ModalClient.DomainCertificateVerify:output_type -> modal.client.DomainCertificateVerifyResponse
	123, // 410: modal.client.ModalClient.DomainCreate:output_type -> modal.client.DomainCreateResponse
	125, // 411: modal.client.ModalClient.DomainList:output_type -> modal.client.DomainListResponse
	351, // 412: modal.client.ModalClient.EnvironmentCreate:output_type -> google.protobuf.Empty
	351, // 413: modal.client.ModalClient.EnvironmentDelete:output_type -> google.protobuf.Empty
	129, // 414: modal.client.ModalClient.EnvironmentGetOrCreate:output_type -> modal.client.EnvironmentGetOrCreateResponse
	131, // 415: modal.client.ModalClient.EnvironmentList:output_type -> modal.client.EnvironmentListResponse
	130, // 416: modal.client.ModalClient.EnvironmentUpdate:output_type -> modal.client.EnvironmentListItem
	138, // 417: modal.client.ModalClient.FunctionBindParams:output_type -> modal.client.FunctionBindParamsResponse
	351, // 418: modal.client.ModalClient.FunctionCallCancel:output_type -> google.protobuf.Empty
	99,  // 419: modal.client.ModalClient.FunctionCallGetDataIn:output_type -> modal.client.DataChunk
	99,  // 420: modal.client.ModalClient.FunctionCallGetDataOut:output_type -> modal.client.DataChunk
	144, // 421: modal.client.ModalClient.FunctionCallList:output_type -> modal.client.FunctionCallListResponse
	351, // 422: modal.client.ModalClient.FunctionCallPutDataOut:output_type -> google.protobuf.Empty
	147, // 423: modal.client.ModalClient.FunctionCreate:output_type -> modal.client.FunctionCreateResponse
	162, // 424: modal.client.ModalClient.FunctionGet:output_type -> modal.client.FunctionGetResponse
	151, // 425: modal.client.ModalClient.FunctionGetCallGraph:output_type -> modal.client.FunctionGetCallGraphResponse
	179, // 426: modal.client.ModalClient.FunctionGetCurrentStats:output_type -> modal.client.FunctionStats
	154, // 427: modal.client.ModalClient.FunctionGetDynamicConcurrency:output_type -> modal.client.FunctionGetDynamicConcurrencyResponse
	157, // 428: modal.client.ModalClient.FunctionGetInputs:output_type -> modal.client.FunctionGetInputsResponse
	160, // 429: modal.client.ModalClient.FunctionGetOutputs:output_type -> modal.client.FunctionGetOutputsResponse
	164, // 430: modal.client.ModalClient.FunctionGetSerialized:output_type -> modal.client.FunctionGetSerializedResponse
	168, // 431: modal.client.ModalClient.FunctionMap:output_type -> modal.client.FunctionMapResponse
	171, // 432: modal.client.ModalClient.FunctionPrecreate:output_type -> modal.client.FunctionPrecreateResponse
	174, // 433: modal.client.ModalClient.FunctionPutInputs:output_type -> modal.client.FunctionPutInputsResponse
	351, // 434: modal.client.ModalClient.FunctionPutOutputs:output_type -> google.protobuf.Empty
	351, // 435: modal.client.ModalClient.FunctionStartPtyShell:output_type -> google.protobuf.Empty
	181, // 436: modal.client.ModalClient.FunctionUpdateSchedulingParams:output_type -> modal.client.FunctionUpdateSchedulingParamsResponse
	188, // 437: modal.client.ModalClient.ImageGetOrCreate:output_type -> modal.client.ImageGetOrCreateResponse
	190, // 438: modal.client.ModalClient.ImageJoinStreaming:output_type -> modal.client.ImageJoinStreamingResponse
	197, // 439: modal.client.ModalClient.MountGetOrCreate:output_type -> modal.client.MountGetOrCreateResponse
	200, // 440: modal.client.ModalClient.MountPutFile:output_type -> modal.client.MountPutFileResponse
	209, // 441: modal.client.ModalClient.ProxyGetOrCreate:output_type -> modal.client.ProxyGetOrCreateResponse
	351, // 442: modal.client.ModalClient.ProxyIpDelete:output_type -> google.protobuf.Empty
	214, // 443: modal.client.ModalClient.ProxyIpGetOrCreate:output_type -> modal.client.ProxyIpGetOrCreateResponse
	215, // 444: modal.client.ModalClient.ProxyIpList:output_type -> modal.client.ProxyIpListResponse
	351, // 445: modal.client.ModalClient.QueueClear:output_type -> google.protobuf.Empty
	351, // 446: modal.client.ModalClient.QueueDelete:output_type -> google.protobuf.Empty
	221, // 447: modal.client.ModalClient.QueueGet:output_type -> modal.client.QueueGetResponse
	219, // 448: modal.client.ModalClient.QueueGetOrCreate:output_type -> modal.client.QueueGetOrCreateResponse
	351, // 449: modal.client.ModalClient.QueueHeartbeat:output_type -> google.protobuf.Empty
	225, // 450: modal.client.ModalClient.QueueLen:output_type -> modal.client.QueueLenResponse
	227, // 451: modal.client.ModalClient.QueueList:output_type -> modal.client.QueueListResponse
	229, // 452: modal.client.ModalClient.QueueNextItems:output_type -> modal.client.QueueNextItemsResponse
	351, // 453: modal.client.ModalClient.QueuePut:output_type -> google.protobuf.Empty
	239, // 454: modal.client.ModalClient.SandboxCreate:output_type -> modal.client.SandboxCreateResponse
	286, // 455: modal.client.ModalClient.SandboxGetLogs:output_type -> modal.client.TaskLogsBatch
	242, // 456: modal.client.ModalClient.SandboxGetTaskId:output_type -> modal.client.SandboxGetTaskIdResponse
	244, // 457: modal.client.ModalClient.SandboxGetTunnels:output_type -> modal.client.SandboxGetTunnelsResponse
	248, // 458: modal.client.ModalClient.SandboxList:output_type -> modal.client.SandboxListResponse
	250, // 459: modal.client.ModalClient.SandboxStdinWrite:output_type -> modal.client.SandboxStdinWriteResponse
	351, // 460: modal.client.ModalClient.SandboxTagsSet:output_type -> google.protobuf.Empty
	254, // 461: modal.client.ModalClient.SandboxTerminate:output_type -> modal.client.SandboxTerminateResponse
	256, // 462: modal.client.ModalClient.SandboxWait:output_type -> modal.client.SandboxWaitResponse
	351, // 463: modal.client.ModalClient.SecretDelete:output_type -> google.protobuf.Empty
	263, // 464: modal.client.ModalClient.SecretGetOrCreate:output_type -> modal.client.SecretGetOrCreateResponse
	266, // 465: modal.client.ModalClient.SecretList:output_type -> modal.client.SecretListResponse
	268, // 466: modal.client.ModalClient.SharedVolumeGetFile:output_type -> modal.client.SharedVolumeGetFileResponse
	270, // 467: modal.client.ModalClient.SharedVolumeGetOrCreate:output_type -> modal.client.SharedVolumeGetOrCreateResponse
	351, // 468: modal.client.ModalClient.SharedVolumeHeartbeat:output_type -> google.protobuf.Empty
	276, // 469: modal.client.ModalClient.SharedVolumeList:output_type -> modal.client.SharedVolumeListResponse
	273, // 470: modal.client.ModalClient.SharedVolumeListFiles:output_type -> modal.client.SharedVolumeListFilesResponse
	273, // 471: modal.client.ModalClient.SharedVolumeListFilesStream:output_type -> modal.client.SharedVolumeListFilesResponse
	279, // 472: modal.client.ModalClient.SharedVolumePutFile:output_type -> modal.client.SharedVolumePutFileResponse
	351, // 473: modal.client.ModalClient.SharedVolumeRemoveFile:output_type -> google.protobuf.Empty
	281, // 474: modal.client.ModalClient.TaskCurrentInputs:output_type -> modal.client.TaskCurrentInputsResponse
	284, // 475: modal.client.ModalClient.TaskList:output_type -> modal.client.TaskListResponse
	351, // 476: modal.client.ModalClient.TaskResult:output_type -> google.protobuf.Empty
	292, // 477: modal.client.ModalClient.TokenFlowCreate:output_type -> modal.client.TokenFlowCreateResponse
	294, // 478: modal.client.ModalClient.TokenFlowWait:output_type -> modal.client.TokenFlowWaitResponse
	297, // 479: modal.client.ModalClient.TunnelStart:output_type -> modal.client.TunnelStartResponse
	299, // 480: modal.client.ModalClient.TunnelStop:output_type -> modal.client.TunnelStopResponse
	301, // 481: modal.client.ModalClient.VolumeCommit:output_type -> modal.client.VolumeCommitResponse
	351, // 482: modal.client.ModalClient.VolumeCopyFiles:output_type -> google.protobuf.Empty
	351, // 483: modal.client.ModalClient.VolumeDelete:output_type -> google.protobuf.Empty
	305, // 484: modal.client.ModalClient.VolumeGetFile:output_type -> modal.client.VolumeGetFileResponse
	307, // 485: modal.client.ModalClient.VolumeGetOrCreate:output_type -> modal.client.VolumeGetOrCreateResponse
	351, // 486: modal.client.ModalClient.VolumeHeartbeat:output_type -> google.protobuf.Empty
	313, // 487: modal.client.ModalClient.VolumeList:output_type -> modal.client.VolumeListResponse
	310, // 488: modal.client.ModalClient.VolumeListFiles:output_type -> modal.client.VolumeListFilesResponse
	351, // 489: modal.client.ModalClient.VolumePutFiles:output_type -> google.protobuf.Empty
	351, // 490: modal.client.ModalClient.VolumeReload:output_type -> google.protobuf.Empty
	351, // 491: modal.client.ModalClient.VolumeRemoveFile:output_type -> google.protobuf.Empty
	320, // 492: modal.client.ModalClient.WorkspaceNameLookup:output_type -> modal.client.WorkspaceNameLookupResponse
	369, // [369:493] is the sub-list for method output_type
	245, // [245:369] is the sub-list for method input_type
	245, // [245:245] is the sub-list for extension type_name
	245, // [245:245] is the sub-list for extension extendee
	0,   // [0:245] is the sub-list for field type_name
}

func init() { file_pkg_modal_api_proto_init() }
func file_pkg_modal_api_proto_init() {
	if File_pkg_modal_api_proto != nil {
		return
	}
	file_pkg_modal_options_proto_init()
	file_pkg_modal_api_proto_msgTypes[28].OneofWrappers = []any{
		(*Asgi_Http_)(nil),
		(*Asgi_HttpRequest_)(nil),
		(*Asgi_HttpResponseStart_)(nil),
		(*Asgi_HttpResponseBody_)(nil),
		(*Asgi_HttpResponseTrailers_)(nil),
		(*Asgi_HttpDisconnect_)(nil),
		(*Asgi_Websocket_)(nil),
		(*Asgi_WebsocketConnect_)(nil),
		(*Asgi_WebsocketAccept_)(nil),
		(*Asgi_WebsocketReceive_)(nil),
		(*Asgi_WebsocketSend_)(nil),
		(*Asgi_WebsocketDisconnect_)(nil),
		(*Asgi_WebsocketClose_)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[31].OneofWrappers = []any{
		(*BlobCreateResponse_UploadUrl)(nil),
		(*BlobCreateResponse_Multipart)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[45].OneofWrappers = []any{
		(*ClassParameterSpec_StringDefault)(nil),
		(*ClassParameterSpec_IntDefault)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[46].OneofWrappers = []any{
		(*ClassParameterValue_StringValue)(nil),
		(*ClassParameterValue_IntValue)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[48].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[49].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[56].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[58].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[65].OneofWrappers = []any{
		(*DataChunk_Data)(nil),
		(*DataChunk_DataBlobId)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[75].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[82].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[102].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[115].OneofWrappers = []any{
		(*FunctionExtended_FunctionSingleton)(nil),
		(*FunctionExtended_FunctionData)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[132].OneofWrappers = []any{
		(*FunctionInput_Args)(nil),
		(*FunctionInput_ArgsBlobId)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[135].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[150].OneofWrappers = []any{
		(*GenericResult_Data)(nil),
		(*GenericResult_DataBlobId)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[161].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[165].OneofWrappers = []any{
		(*MountPutFileRequest_Data)(nil),
		(*MountPutFileRequest_DataBlobId)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[169].OneofWrappers = []any{
		(*Object_FunctionHandleMetadata)(nil),
		(*Object_MountHandleMetadata)(nil),
		(*Object_ClassHandleMetadata)(nil),
		(*Object_SandboxHandleMetadata)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[179].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[200].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[203].OneofWrappers = []any{
		(*Sandbox_OpenPorts)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[223].OneofWrappers = []any{
		(*Schedule_Cron_)(nil),
		(*Schedule_Period_)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[224].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[234].OneofWrappers = []any{
		(*SharedVolumeGetFileResponse_Data)(nil),
		(*SharedVolumeGetFileResponse_DataBlobId)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[244].OneofWrappers = []any{
		(*SharedVolumePutFileRequest_Data)(nil),
		(*SharedVolumePutFileRequest_DataBlobId)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[261].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[263].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[271].OneofWrappers = []any{
		(*VolumeGetFileResponse_Data)(nil),
		(*VolumeGetFileResponse_DataBlobId)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[275].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[287].OneofWrappers = []any{
		(*PayloadValue_StrValue)(nil),
		(*PayloadValue_IntValue)(nil),
		(*PayloadValue_BoolValue)(nil),
		(*PayloadValue_FloatValue)(nil),
		(*PayloadValue_BytesValue)(nil),
		(*PayloadValue_ListValue)(nil),
		(*PayloadValue_DictValue)(nil),
		(*PayloadValue_PickleValue)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[295].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[301].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[303].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[304].OneofWrappers = []any{
		(*Asgi_WebsocketReceive_Bytes)(nil),
		(*Asgi_WebsocketReceive_Text)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[305].OneofWrappers = []any{
		(*Asgi_WebsocketSend_Bytes)(nil),
		(*Asgi_WebsocketSend_Text)(nil),
	}
	file_pkg_modal_api_proto_msgTypes[306].OneofWrappers = []any{}
	file_pkg_modal_api_proto_msgTypes[307].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_modal_api_proto_rawDesc,
			NumEnums:      34,
			NumMessages:   316,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_modal_api_proto_goTypes,
		DependencyIndexes: file_pkg_modal_api_proto_depIdxs,
		EnumInfos:         file_pkg_modal_api_proto_enumTypes,
		MessageInfos:      file_pkg_modal_api_proto_msgTypes,
	}.Build()
	File_pkg_modal_api_proto = out.File
	file_pkg_modal_api_proto_rawDesc = nil
	file_pkg_modal_api_proto_goTypes = nil
	file_pkg_modal_api_proto_depIdxs = nil
}
